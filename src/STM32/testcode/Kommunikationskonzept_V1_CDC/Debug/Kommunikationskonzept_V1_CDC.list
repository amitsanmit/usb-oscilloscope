
Kommunikationskonzept_V1_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008dd0  08008dd0  00009dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f10  08008f10  0000a15c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f10  08008f10  00009f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f18  08008f18  0000a15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f18  08008f18  00009f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f1c  08008f1c  00009f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08008f20  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000254c  2000015c  0800907c  0000a15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026a8  0800907c  0000a6a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f13  00000000  00000000  0000a18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343e  00000000  00000000  0001b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a14  00000000  00000000  0001f298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c9f  00000000  00000000  0001fcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135fb  00000000  00000000  0004994b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f073a  00000000  00000000  0005cf46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  0014d6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001511a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000015c 	.word	0x2000015c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008db8 	.word	0x08008db8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000160 	.word	0x20000160
 800023c:	08008db8 	.word	0x08008db8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060e:	2b00      	cmp	r3, #0
 8000610:	db0b      	blt.n	800062a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 021f 	and.w	r2, r3, #31
 8000618:	4907      	ldr	r1, [pc, #28]	@ (8000638 <__NVIC_EnableIRQ+0x38>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	095b      	lsrs	r3, r3, #5
 8000620:	2001      	movs	r0, #1
 8000622:	fa00 f202 	lsl.w	r2, r0, r2
 8000626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000e100 	.word	0xe000e100

0800063c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db0c      	blt.n	8000668 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 021f 	and.w	r2, r3, #31
 8000654:	4907      	ldr	r1, [pc, #28]	@ (8000674 <__NVIC_ClearPendingIRQ+0x38>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	2001      	movs	r0, #1
 800065e:	fa00 f202 	lsl.w	r2, r0, r2
 8000662:	3360      	adds	r3, #96	@ 0x60
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000e100 	.word	0xe000e100

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	@ (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	@ (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <app_Init>:
/* app_Init()
 *
 * run all application initializations
 *	 													*/
void app_Init()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
	__disable_irq();

		GPIO_Init();
 80006d4:	f000 f9aa 	bl	8000a2c <GPIO_Init>
		EXTI_Init();
 80006d8:	f000 f9e0 	bl	8000a9c <EXTI_Init>
		TIM3_Init();
 80006dc:	f000 fa0a 	bl	8000af4 <TIM3_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80006e0:	b662      	cpsie	i
}
 80006e2:	bf00      	nop

	__enable_irq();
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <setOnboardStatusLEDs>:
 *
 * 0 is not recommended -> LEDs are off
 * (not distinguishable from error or invalid input)
 *	 													*/
void setOnboardStatusLEDs(uint8_t status)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	int ledMask = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
	// turn LD1..3 off
	GPIOB->ODR &= ~(LD1_Pin|LD2_Pin|LD3_Pin);
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <setOnboardStatusLEDs+0x94>)
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	4920      	ldr	r1, [pc, #128]	@ (800077c <setOnboardStatusLEDs+0x94>)
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <setOnboardStatusLEDs+0x98>)
 80006fe:	4013      	ands	r3, r2
 8000700:	614b      	str	r3, [r1, #20]
	switch(status)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b07      	cmp	r3, #7
 8000706:	d82c      	bhi.n	8000762 <setOnboardStatusLEDs+0x7a>
 8000708:	a201      	add	r2, pc, #4	@ (adr r2, 8000710 <setOnboardStatusLEDs+0x28>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000763 	.word	0x08000763
 8000714:	08000731 	.word	0x08000731
 8000718:	08000737 	.word	0x08000737
 800071c:	0800073d 	.word	0x0800073d
 8000720:	08000743 	.word	0x08000743
 8000724:	0800074b 	.word	0x0800074b
 8000728:	08000753 	.word	0x08000753
 800072c:	0800075b 	.word	0x0800075b
	{
	case 0:
		break;
	case 1:
		ledMask = LD1_Pin;
 8000730:	2301      	movs	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
		break;
 8000734:	e016      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	case 2:
		ledMask = LD2_Pin;
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	60fb      	str	r3, [r7, #12]
		break;
 800073a:	e013      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	case 3:
		ledMask = LD2_Pin|LD1_Pin;
 800073c:	2381      	movs	r3, #129	@ 0x81
 800073e:	60fb      	str	r3, [r7, #12]
		break;
 8000740:	e010      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	case 4:
		ledMask = LD3_Pin;
 8000742:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000746:	60fb      	str	r3, [r7, #12]
		break;
 8000748:	e00c      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	case 5:
		ledMask = LD3_Pin|LD1_Pin;
 800074a:	f244 0301 	movw	r3, #16385	@ 0x4001
 800074e:	60fb      	str	r3, [r7, #12]
		break;
 8000750:	e008      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	case 6:
		ledMask = LD3_Pin|LD2_Pin;
 8000752:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000756:	60fb      	str	r3, [r7, #12]
		break;
 8000758:	e004      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	case 7:
		ledMask = LD3_Pin|LD2_Pin|LD1_Pin;
 800075a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800075e:	60fb      	str	r3, [r7, #12]
		break;
 8000760:	e000      	b.n	8000764 <setOnboardStatusLEDs+0x7c>
	default:
		break;
 8000762:	bf00      	nop
	}
	GPIOB->ODR |= ledMask;
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <setOnboardStatusLEDs+0x94>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4904      	ldr	r1, [pc, #16]	@ (800077c <setOnboardStatusLEDs+0x94>)
 800076c:	4313      	orrs	r3, r2
 800076e:	614b      	str	r3, [r1, #20]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40020400 	.word	0x40020400
 8000780:	ffffbf7e 	.word	0xffffbf7e

08000784 <usbRxCallback>:
 * callback function called by CDC_Receive_FS(...) in "usbd_cdc_if.h"
 *
 * receives a newline-terminated command
 *	 													*/
void usbRxCallback(uint8_t* Buf, uint32_t *Len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	memcpy(usbRxBuf, Buf, *Len);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	461a      	mov	r2, r3
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <usbRxCallback+0x34>)
 8000798:	f007 ff80 	bl	800869c <memcpy>
	usbRxBufLen = *Len;
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <usbRxCallback+0x38>)
 80007a4:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <usbRxCallback+0x3c>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
	receiveCommand();
 80007ac:	f000 f876 	bl	800089c <receiveCommand>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200001f8 	.word	0x200001f8
 80007bc:	20000238 	.word	0x20000238
 80007c0:	2000023a 	.word	0x2000023a

080007c4 <sendCommand>:
 * takes the command string as an argument
 *
 * sends a newline-terminated command
 *	 													*/
void sendCommand(const char* command)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    // format command into newline-terminated string
    int len = snprintf(cmdTxBuffer, CMD_TX_BUFFER_SIZE, "%s\n", command);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <sendCommand+0x38>)
 80007d0:	2180      	movs	r1, #128	@ 0x80
 80007d2:	480b      	ldr	r0, [pc, #44]	@ (8000800 <sendCommand+0x3c>)
 80007d4:	f007 feea 	bl	80085ac <sniprintf>
 80007d8:	60f8      	str	r0, [r7, #12]

    // only send if length is valid (safety)
    if (len > 0 && len < CMD_TX_BUFFER_SIZE) {
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	dd08      	ble.n	80007f2 <sendCommand+0x2e>
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80007e4:	dc05      	bgt.n	80007f2 <sendCommand+0x2e>
        CDC_Send((uint8_t*)cmdTxBuffer, len);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <sendCommand+0x3c>)
 80007ee:	f000 f841 	bl	8000874 <CDC_Send>
    }
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08008dd0 	.word	0x08008dd0
 8000800:	20000178 	.word	0x20000178

08000804 <collectData>:

void collectData()
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
	for(int i = 0; i < sizeof(sampleBuffer)/sizeof(sampleBuffer[0]); i++)
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	e008      	b.n	8000822 <collectData+0x1e>
	{
		sampleBuffer[i] = i;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	b299      	uxth	r1, r3
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <collectData+0x34>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < sizeof(sampleBuffer)/sizeof(sampleBuffer[0]); i++)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000828:	d3f2      	bcc.n	8000810 <collectData+0xc>
	}
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	200002c0 	.word	0x200002c0

0800083c <sendData>:

void sendData()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	int size = sizeof(sampleBuffer);
 8000842:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000846:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 10; i++)
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	e008      	b.n	8000860 <sendData+0x24>
	{
		CDC_Send((uint8_t*)sampleBuffer, size);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	4619      	mov	r1, r3
 8000854:	4806      	ldr	r0, [pc, #24]	@ (8000870 <sendData+0x34>)
 8000856:	f000 f80d 	bl	8000874 <CDC_Send>
	for(int i = 0; i < 10; i++)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3301      	adds	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b09      	cmp	r3, #9
 8000864:	ddf3      	ble.n	800084e <sendData+0x12>
	}
}
 8000866:	bf00      	nop
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200002c0 	.word	0x200002c0

08000874 <CDC_Send>:
/* void CDC_Send(uint8_t* data, uint16_t len)
 *
 * safely uses CDC_Transmit_FS(...)
 *	 													*/
static void CDC_Send(uint8_t* data, uint16_t len)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	807b      	strh	r3, [r7, #2]
	while (CDC_Transmit_FS(data, len) == USBD_BUSY)
 8000880:	bf00      	nop
 8000882:	887b      	ldrh	r3, [r7, #2]
 8000884:	4619      	mov	r1, r3
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f007 f8ec 	bl	8007a64 <CDC_Transmit_FS>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	d0f7      	beq.n	8000882 <CDC_Send+0xe>
	{
		// wait until USB stack is ready
	}
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <receiveCommand>:

static void receiveCommand()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
	// wait for command reception
	while(usbRxFlag == 0) {}
 80008a2:	bf00      	nop
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <receiveCommand+0x9c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0fa      	beq.n	80008a4 <receiveCommand+0x8>

	for (uint32_t i = 0; i < usbRxBufLen; i++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	e030      	b.n	8000916 <receiveCommand+0x7a>
	{
		uint8_t ch = usbRxBuf[i];
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <receiveCommand+0xa0>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	70fb      	strb	r3, [r7, #3]

		// check for termination character
		if (ch == '\n' || ch == '\r') {
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2b0a      	cmp	r3, #10
 80008c2:	d002      	beq.n	80008ca <receiveCommand+0x2e>
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b0d      	cmp	r3, #13
 80008c8:	d110      	bne.n	80008ec <receiveCommand+0x50>
			if (cmdRxIndex > 0) {
 80008ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <receiveCommand+0xa4>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d01e      	beq.n	8000910 <receiveCommand+0x74>
			cmdRxBuffer[cmdRxIndex] = '\0'; // NULL-terminate
 80008d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <receiveCommand+0xa4>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000944 <receiveCommand+0xa8>)
 80008da:	2100      	movs	r1, #0
 80008dc:	5499      	strb	r1, [r3, r2]

			// process the received command:
			processCommand((char*)cmdRxBuffer);
 80008de:	4819      	ldr	r0, [pc, #100]	@ (8000944 <receiveCommand+0xa8>)
 80008e0:	f000 f834 	bl	800094c <processCommand>

			cmdRxIndex = 0; // reset buffer
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <receiveCommand+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	801a      	strh	r2, [r3, #0]
			if (cmdRxIndex > 0) {
 80008ea:	e011      	b.n	8000910 <receiveCommand+0x74>
			}
		}
		else
		{
			if (cmdRxIndex < CMD_RX_BUFFER_SIZE - 1)
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <receiveCommand+0xa4>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80008f2:	d80a      	bhi.n	800090a <receiveCommand+0x6e>
			{
				// insert character into buffer
				cmdRxBuffer[cmdRxIndex++] = ch;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <receiveCommand+0xa4>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	b291      	uxth	r1, r2
 80008fc:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <receiveCommand+0xa4>)
 80008fe:	8011      	strh	r1, [r2, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	4a10      	ldr	r2, [pc, #64]	@ (8000944 <receiveCommand+0xa8>)
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	5453      	strb	r3, [r2, r1]
 8000908:	e002      	b.n	8000910 <receiveCommand+0x74>
			}
			else
			{
				// buffer overflow -> reset
				cmdRxIndex = 0;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <receiveCommand+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < usbRxBufLen; i++)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <receiveCommand+0xac>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4293      	cmp	r3, r2
 8000920:	d3c8      	bcc.n	80008b4 <receiveCommand+0x18>
			}
		}
	}

	usbRxFlag = 0;
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <receiveCommand+0x9c>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
	usbRxBufLen = 0;
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <receiveCommand+0xac>)
 800092a:	2200      	movs	r2, #0
 800092c:	801a      	strh	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000023a 	.word	0x2000023a
 800093c:	200001f8 	.word	0x200001f8
 8000940:	200002bc 	.word	0x200002bc
 8000944:	2000023c 	.word	0x2000023c
 8000948:	20000238 	.word	0x20000238

0800094c <processCommand>:
 *
 * receives NULL-terminated (\0) string with the
 * corresponding command sent to the µC from host (PC)
 *	 													*/
static void processCommand(const char* cmd)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    if (strcmp(cmd, "RESET") == 0) {
 8000954:	492d      	ldr	r1, [pc, #180]	@ (8000a0c <processCommand+0xc0>)
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fc72 	bl	8000240 <strcmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d103      	bne.n	800096a <processCommand+0x1e>
    	fsm_add_event(EV_RESET);
 8000962:	2005      	movs	r0, #5
 8000964:	f000 f934 	bl	8000bd0 <fsm_add_event>
    }
    else {
        const char* error = "ERR:UNKNOWN_CMD\n";
        CDC_Transmit_FS((uint8_t*)error, strlen(error));
    }
}
 8000968:	e04c      	b.n	8000a04 <processCommand+0xb8>
	else if (strcmp(cmd, "APP") == 0) {
 800096a:	4929      	ldr	r1, [pc, #164]	@ (8000a10 <processCommand+0xc4>)
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fc67 	bl	8000240 <strcmp>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d103      	bne.n	8000980 <processCommand+0x34>
    	fsm_add_event(EV_START_APP);
 8000978:	2007      	movs	r0, #7
 800097a:	f000 f929 	bl	8000bd0 <fsm_add_event>
}
 800097e:	e041      	b.n	8000a04 <processCommand+0xb8>
    else if (strcmp(cmd, "RUN_START") == 0) {
 8000980:	4924      	ldr	r1, [pc, #144]	@ (8000a14 <processCommand+0xc8>)
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fc5c 	bl	8000240 <strcmp>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d103      	bne.n	8000996 <processCommand+0x4a>
    	fsm_add_event(EV_SAMPL_RUN_START);
 800098e:	2008      	movs	r0, #8
 8000990:	f000 f91e 	bl	8000bd0 <fsm_add_event>
}
 8000994:	e036      	b.n	8000a04 <processCommand+0xb8>
    else if (strcmp(cmd, "READY_FOR_DATA") == 0) {
 8000996:	4920      	ldr	r1, [pc, #128]	@ (8000a18 <processCommand+0xcc>)
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fc51 	bl	8000240 <strcmp>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d103      	bne.n	80009ac <processCommand+0x60>
        	fsm_add_event(EV_DATA_TRANSMIT);
 80009a4:	2009      	movs	r0, #9
 80009a6:	f000 f913 	bl	8000bd0 <fsm_add_event>
}
 80009aa:	e02b      	b.n	8000a04 <processCommand+0xb8>
    else if (strcmp(cmd, "RECEIVED") == 0) {
 80009ac:	491b      	ldr	r1, [pc, #108]	@ (8000a1c <processCommand+0xd0>)
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fc46 	bl	8000240 <strcmp>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <processCommand+0x76>
    	fsm_add_event(EV_SAMPL_RECEIVED);
 80009ba:	200a      	movs	r0, #10
 80009bc:	f000 f908 	bl	8000bd0 <fsm_add_event>
}
 80009c0:	e020      	b.n	8000a04 <processCommand+0xb8>
    else if (strcmp(cmd, "CONTINUE") == 0) {
 80009c2:	4917      	ldr	r1, [pc, #92]	@ (8000a20 <processCommand+0xd4>)
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff fc3b 	bl	8000240 <strcmp>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d103      	bne.n	80009d8 <processCommand+0x8c>
    	fsm_add_event(EV_SAMPL_ACK_CONTINUE);
 80009d0:	200c      	movs	r0, #12
 80009d2:	f000 f8fd 	bl	8000bd0 <fsm_add_event>
}
 80009d6:	e015      	b.n	8000a04 <processCommand+0xb8>
    else if (strcmp(cmd, "STOP") == 0) {
 80009d8:	4912      	ldr	r1, [pc, #72]	@ (8000a24 <processCommand+0xd8>)
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fc30 	bl	8000240 <strcmp>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d103      	bne.n	80009ee <processCommand+0xa2>
    	fsm_add_event(EV_SAMPL_ACK_STOP);
 80009e6:	200d      	movs	r0, #13
 80009e8:	f000 f8f2 	bl	8000bd0 <fsm_add_event>
}
 80009ec:	e00a      	b.n	8000a04 <processCommand+0xb8>
        const char* error = "ERR:UNKNOWN_CMD\n";
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <processCommand+0xdc>)
 80009f0:	60fb      	str	r3, [r7, #12]
        CDC_Transmit_FS((uint8_t*)error, strlen(error));
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff fc2e 	bl	8000254 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f007 f830 	bl	8007a64 <CDC_Transmit_FS>
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08008dd4 	.word	0x08008dd4
 8000a10:	08008ddc 	.word	0x08008ddc
 8000a14:	08008de0 	.word	0x08008de0
 8000a18:	08008dec 	.word	0x08008dec
 8000a1c:	08008dfc 	.word	0x08008dfc
 8000a20:	08008e08 	.word	0x08008e08
 8000a24:	08008e14 	.word	0x08008e14
 8000a28:	08008e1c 	.word	0x08008e1c

08000a2c <GPIO_Init>:
/* static void GPIO_Init()
 *
 * inititalization of the used GPIOs
 *	 													*/
static void GPIO_Init()
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	/* GPIO for button to manually start sampling
	 * PC13: USR_Btn B1 (NUCLEO-F767)*/
	/* enable clock for GPIOC */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <GPIO_Init+0x58>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <GPIO_Init+0x58>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6313      	str	r3, [r2, #48]	@ 0x30
	// USR_Btn->input (MODE: 0b00)
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <GPIO_Init+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <GPIO_Init+0x5c>)
 8000a42:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000a46:	6013      	str	r3, [r2, #0]
	/* GPIO for onboard status LEDs (LD1..3 of NUCLEO-F767)
	 * PB0:  LD1 (green)
	 * PB7:  LD2 (blue)
	 * PB14: LD3 (red) */
	/* enable clock for GPIOB */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <GPIO_Init+0x58>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <GPIO_Init+0x58>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6313      	str	r3, [r2, #48]	@ 0x30
	// turn LD1..3 off
	GPIOB->ODR &= ~(LD1_Pin|LD2_Pin|LD3_Pin);
 8000a54:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <GPIO_Init+0x60>)
 8000a56:	695a      	ldr	r2, [r3, #20]
 8000a58:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <GPIO_Init+0x60>)
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <GPIO_Init+0x64>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	614b      	str	r3, [r1, #20]
	// LD1..3->output (MODE: 0b01)
	GPIOB->MODER &= ~(GPIO_MODER_MODER0_Msk|GPIO_MODER_MODER7_Msk|GPIO_MODER_MODER14_Msk);
 8000a60:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <GPIO_Init+0x60>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4909      	ldr	r1, [pc, #36]	@ (8000a8c <GPIO_Init+0x60>)
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <GPIO_Init+0x68>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	600b      	str	r3, [r1, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER0_0|GPIO_MODER_MODER7_0|GPIO_MODER_MODER14_0);
 8000a6c:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <GPIO_Init+0x60>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4906      	ldr	r1, [pc, #24]	@ (8000a8c <GPIO_Init+0x60>)
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <GPIO_Init+0x6c>)
 8000a74:	4313      	orrs	r3, r2
 8000a76:	600b      	str	r3, [r1, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	ffffbf7e 	.word	0xffffbf7e
 8000a94:	cfff3ffc 	.word	0xcfff3ffc
 8000a98:	10004001 	.word	0x10004001

08000a9c <EXTI_Init>:
/* static void EXTI_Init()
 *
 * initialization and configuration of EXTI-modules
 *	 													*/
static void EXTI_Init()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	// enable SYSCFG-clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <EXTI_Init+0x4c>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <EXTI_Init+0x4c>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6453      	str	r3, [r2, #68]	@ 0x44

	/* EXTI13 Configuration for USR_Btn B1 (PC13) */
	// SysCfg configuration EXTI13->PC13
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <EXTI_Init+0x50>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <EXTI_Init+0x50>)
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	6153      	str	r3, [r2, #20]
	// unmask EXTI13
	EXTI->IMR |= EXTI_IMR_MR13;
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <EXTI_Init+0x54>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0c      	ldr	r2, [pc, #48]	@ (8000af0 <EXTI_Init+0x54>)
 8000abe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ac2:	6013      	str	r3, [r2, #0]
	// enable rising edge detection for EXTI13 (USR_Btn is high-active)
	EXTI->RTSR |= EXTI_RTSR_TR13;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <EXTI_Init+0x54>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <EXTI_Init+0x54>)
 8000aca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ace:	6093      	str	r3, [r2, #8]
	// NVIC IRQ config for EXTI 10-15
	NVIC_SetPriority(EXTI15_10_IRQn, 15);
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f7ff fdd0 	bl	8000678 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000ad8:	2028      	movs	r0, #40	@ 0x28
 8000ada:	f7ff fdaf 	bl	800063c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ade:	2028      	movs	r0, #40	@ 0x28
 8000ae0:	f7ff fd8e 	bl	8000600 <__NVIC_EnableIRQ>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40013800 	.word	0x40013800
 8000af0:	40013c00 	.word	0x40013c00

08000af4 <TIM3_Init>:
 *
 * initalization of TIM3
 * TIM3 for debouncing USR-Btn
 *	 													*/
static void TIM3_Init()
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	// enable TIM3-clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <TIM3_Init+0x74>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <TIM3_Init+0x74>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	6413      	str	r3, [r2, #64]	@ 0x40

	// set clock with prescaler to clock_cnt=clock_in/(PSC+1)
	uint16_t prescaleValueTIM3 = 49999;
 8000b06:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8000b0a:	80fb      	strh	r3, [r7, #6]
	TIM3->PSC |= prescaleValueTIM3;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <TIM3_Init+0x78>)
 8000b0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	4916      	ldr	r1, [pc, #88]	@ (8000b6c <TIM3_Init+0x78>)
 8000b14:	4313      	orrs	r3, r2
 8000b16:	628b      	str	r3, [r1, #40]	@ 0x28
	// APB1-TimerClk is 100MHz -> 100MHz/(49999+1)=2kHz-> Timer-Clock is 2kHz

	// set auto-reload value
	TIM3->ARR &= ~(0xFFFFFFFF);
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <TIM3_Init+0x78>)
 8000b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <TIM3_Init+0x78>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t TIM3_ticks = 10;
 8000b22:	230a      	movs	r3, #10
 8000b24:	80bb      	strh	r3, [r7, #4]
	TIM3->ARR |= TIM3_ticks;      // count time: 5ms
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <TIM3_Init+0x78>)
 8000b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b2a:	88bb      	ldrh	r3, [r7, #4]
 8000b2c:	490f      	ldr	r1, [pc, #60]	@ (8000b6c <TIM3_Init+0x78>)
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	62cb      	str	r3, [r1, #44]	@ 0x2c

	// enable update interrupt-flag
	TIM3->DIER |= (TIM_DIER_UIE);
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <TIM3_Init+0x78>)
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <TIM3_Init+0x78>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	60d3      	str	r3, [r2, #12]

	// activate upward counter (default) and one-pulse mode
	TIM3->CR1 |= (TIM_CR1_OPM);
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <TIM3_Init+0x78>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <TIM3_Init+0x78>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6013      	str	r3, [r2, #0]

	// NVIC IRQ config
	NVIC_SetPriority(TIM3_IRQn, 1);
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	201d      	movs	r0, #29
 8000b4e:	f7ff fd93 	bl	8000678 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM3_IRQn);
 8000b52:	201d      	movs	r0, #29
 8000b54:	f7ff fd72 	bl	800063c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000b58:	201d      	movs	r0, #29
 8000b5a:	f7ff fd51 	bl	8000600 <__NVIC_EnableIRQ>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40000400 	.word	0x40000400

08000b70 <fsm_run>:
/* void fsm_run()
 *
 * run the main fsm application
 *
 * GLOBAL VISIBILITY		 							*/
void fsm_run(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
    fsm_t   fsm_i; /* FSM instance.                     */
    uint8_t event; /* Buffer for storing incoming event */

    // wait for connection
    while(!vcpConnected) {}
 8000b76:	bf00      	nop
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <fsm_run+0x54>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0fa      	beq.n	8000b78 <fsm_run+0x8>

    fsm_init(&fsm_i, fsm_state_init);
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4910      	ldr	r1, [pc, #64]	@ (8000bc8 <fsm_run+0x58>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f832 	bl	8000bf0 <fsm_init>

    while(1){
    	// only execute fsm, when VCP is connected
    	while(vcpConnected)
 8000b8c:	e014      	b.n	8000bb8 <fsm_run+0x48>
    	{
            dequeue(&event_queue, &event);
 8000b8e:	1cfb      	adds	r3, r7, #3
 8000b90:	4619      	mov	r1, r3
 8000b92:	480e      	ldr	r0, [pc, #56]	@ (8000bcc <fsm_run+0x5c>)
 8000b94:	f000 faf7 	bl	8001186 <dequeue>
            /*
             * Some events can be handled independently of state,
             * while others are dispatched to the current state
             * in the default condition.
             */
            switch(event){
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d105      	bne.n	8000baa <fsm_run+0x3a>
            //case EV_FOO:
            //    foo();
            //    break;
            case EV_RESET:
                fsm_init(&fsm_i, fsm_state_init);
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4909      	ldr	r1, [pc, #36]	@ (8000bc8 <fsm_run+0x58>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f824 	bl	8000bf0 <fsm_init>
                break;
 8000ba8:	e006      	b.n	8000bb8 <fsm_run+0x48>
            default:
                fsm_dispatch(&fsm_i, event);
 8000baa:	78fa      	ldrb	r2, [r7, #3]
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f82d 	bl	8000c10 <fsm_dispatch>
                break;
 8000bb6:	bf00      	nop
    	while(vcpConnected)
 8000bb8:	4b02      	ldr	r3, [pc, #8]	@ (8000bc4 <fsm_run+0x54>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e5      	bne.n	8000b8e <fsm_run+0x1e>
 8000bc2:	e7f9      	b.n	8000bb8 <fsm_run+0x48>
 8000bc4:	20001e7c 	.word	0x20001e7c
 8000bc8:	08000c59 	.word	0x08000c59
 8000bcc:	20000a90 	.word	0x20000a90

08000bd0 <fsm_add_event>:
/* void fsm_add_event(uint8_t in)
 *
 * used to enqueue events (e.g. in ISRs)
 *
 * GLOBAL VISIBILITY		 							*/
void fsm_add_event(uint8_t in){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
    enqueue(&event_queue, in);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4803      	ldr	r0, [pc, #12]	@ (8000bec <fsm_add_event+0x1c>)
 8000be0:	f000 fab6 	bl	8001150 <enqueue>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000a90 	.word	0x20000a90

08000bf0 <fsm_init>:

/* static void fsm_init(fsm_t *fsm, state_fp init_state)
 *
 * initializes the FSM and brings it into Init State
 * 		 												*/
static void fsm_init(fsm_t *fsm, state_fp init_state){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    fsm->state = init_state;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	601a      	str	r2, [r3, #0]
    fsm_dispatch(fsm, EV_ENTRY);
 8000c00:	2101      	movs	r1, #1
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f804 	bl	8000c10 <fsm_dispatch>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <fsm_dispatch>:

/* static void fsm_dispatch(fsm_t *fsm, uint8_t event)
 *
 * calls the specific function of a state
 * 		 												*/
static void fsm_dispatch(fsm_t *fsm, uint8_t event){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
    (*(fsm)->state)(fsm, event);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	78fa      	ldrb	r2, [r7, #3]
 8000c22:	4611      	mov	r1, r2
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	4798      	blx	r3
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <fsm_transition>:
 *
 * 1. executes the exit statements of current state
 * 2. changes the state (-> transition)
 * 3. executes the entry statements of new state
 * 		 												*/
static void fsm_transition(fsm_t *fsm, state_fp new_state){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
    fsm_dispatch(fsm, EV_EXIT);
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ffe7 	bl	8000c10 <fsm_dispatch>
    fsm->state = new_state;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	601a      	str	r2, [r3, #0]
    fsm_dispatch(fsm, EV_ENTRY);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffe0 	bl	8000c10 <fsm_dispatch>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <fsm_state_init>:
 * with the corresponding event EV_ENTRY and EV_EXIT 	*/

/* initialization state
 *
 * ONLY RUN ONCE - initialize peripherals										*/
static void fsm_state_init(fsm_t *fsm, uint8_t event){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
    switch(event){
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	d00c      	beq.n	8000c84 <fsm_state_init+0x2c>
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	dc0f      	bgt.n	8000c8e <fsm_state_init+0x36>
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d002      	beq.n	8000c78 <fsm_state_init+0x20>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d00d      	beq.n	8000c92 <fsm_state_init+0x3a>
        break;
    case EV_EXIT:
        /* State exit actions */
        break;
    default:
        break;
 8000c76:	e00a      	b.n	8000c8e <fsm_state_init+0x36>
        app_Init();
 8000c78:	f7ff fd28 	bl	80006cc <app_Init>
        setOnboardStatusLEDs(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fd33 	bl	80006e8 <setOnboardStatusLEDs>
        break;
 8000c82:	e007      	b.n	8000c94 <fsm_state_init+0x3c>
        fsm_transition(fsm, fsm_state_idle);
 8000c84:	4905      	ldr	r1, [pc, #20]	@ (8000c9c <fsm_state_init+0x44>)
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffd2 	bl	8000c30 <fsm_transition>
        break;
 8000c8c:	e002      	b.n	8000c94 <fsm_state_init+0x3c>
        break;
 8000c8e:	bf00      	nop
 8000c90:	e000      	b.n	8000c94 <fsm_state_init+0x3c>
        break;
 8000c92:	bf00      	nop
    }
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08000ca1 	.word	0x08000ca1

08000ca0 <fsm_state_idle>:

/* idle state
 *
 * WAIT FOR RUN_START FROM HOST (PC) */
static void fsm_state_idle(fsm_t *fsm, uint8_t event){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
    switch(event){
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d00d      	beq.n	8000cce <fsm_state_idle+0x2e>
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	dc10      	bgt.n	8000cd8 <fsm_state_idle+0x38>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d002      	beq.n	8000cc0 <fsm_state_idle+0x20>
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d00e      	beq.n	8000cdc <fsm_state_idle+0x3c>
        break;
    case EV_EXIT:
        /* State exit actions */
        break;
    default:
        break;
 8000cbe:	e00b      	b.n	8000cd8 <fsm_state_idle+0x38>
    	setOnboardStatusLEDs(2);
 8000cc0:	2002      	movs	r0, #2
 8000cc2:	f7ff fd11 	bl	80006e8 <setOnboardStatusLEDs>
    	sendCommand("STATE:IDLE");
 8000cc6:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <fsm_state_idle+0x48>)
 8000cc8:	f7ff fd7c 	bl	80007c4 <sendCommand>
        break;
 8000ccc:	e007      	b.n	8000cde <fsm_state_idle+0x3e>
        fsm_transition(fsm, fsm_state_data_acquisition);
 8000cce:	4907      	ldr	r1, [pc, #28]	@ (8000cec <fsm_state_idle+0x4c>)
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffad 	bl	8000c30 <fsm_transition>
        break;
 8000cd6:	e002      	b.n	8000cde <fsm_state_idle+0x3e>
        break;
 8000cd8:	bf00      	nop
 8000cda:	e000      	b.n	8000cde <fsm_state_idle+0x3e>
        break;
 8000cdc:	bf00      	nop
    }
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08008e30 	.word	0x08008e30
 8000cec:	08000cf1 	.word	0x08000cf1

08000cf0 <fsm_state_data_acquisition>:

static void fsm_state_data_acquisition(fsm_t *fsm, uint8_t event){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
    switch(event){
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	2b0a      	cmp	r3, #10
 8000d02:	d82f      	bhi.n	8000d64 <fsm_state_data_acquisition+0x74>
 8000d04:	a201      	add	r2, pc, #4	@ (adr r2, 8000d0c <fsm_state_data_acquisition+0x1c>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d39 	.word	0x08000d39
 8000d10:	08000d65 	.word	0x08000d65
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000d65 	.word	0x08000d65
 8000d1c:	08000d65 	.word	0x08000d65
 8000d20:	08000d47 	.word	0x08000d47
 8000d24:	08000d65 	.word	0x08000d65
 8000d28:	08000d65 	.word	0x08000d65
 8000d2c:	08000d5b 	.word	0x08000d5b
 8000d30:	08000d65 	.word	0x08000d65
 8000d34:	08000d53 	.word	0x08000d53
    case EV_ENTRY:
        /* State entry actions */
    	setOnboardStatusLEDs(3);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f7ff fcd5 	bl	80006e8 <setOnboardStatusLEDs>
    	sendCommand("STATE:ACQUIRE");
 8000d3e:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <fsm_state_data_acquisition+0x80>)
 8000d40:	f7ff fd40 	bl	80007c4 <sendCommand>
        break;
 8000d44:	e00f      	b.n	8000d66 <fsm_state_data_acquisition+0x76>
    case EV_B1_PRESSED:
    	collectData();
 8000d46:	f7ff fd5d 	bl	8000804 <collectData>
        fsm_add_event(EV_DATA_READY);	// later in DMA ISR
 8000d4a:	200b      	movs	r0, #11
 8000d4c:	f7ff ff40 	bl	8000bd0 <fsm_add_event>
        break;
 8000d50:	e009      	b.n	8000d66 <fsm_state_data_acquisition+0x76>
    case EV_DATA_READY:
    	sendCommand("ACQUISITON:DONE");
 8000d52:	4808      	ldr	r0, [pc, #32]	@ (8000d74 <fsm_state_data_acquisition+0x84>)
 8000d54:	f7ff fd36 	bl	80007c4 <sendCommand>
        break;
 8000d58:	e005      	b.n	8000d66 <fsm_state_data_acquisition+0x76>
    case EV_DATA_TRANSMIT:
        fsm_transition(fsm, fsm_state_data_transmission);
 8000d5a:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <fsm_state_data_acquisition+0x88>)
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff67 	bl	8000c30 <fsm_transition>
        break;
 8000d62:	e000      	b.n	8000d66 <fsm_state_data_acquisition+0x76>
    case EV_EXIT:
        /* State exit actions */
        break;
    default:
        break;
 8000d64:	bf00      	nop
    }
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08008e3c 	.word	0x08008e3c
 8000d74:	08008e4c 	.word	0x08008e4c
 8000d78:	08000d7d 	.word	0x08000d7d

08000d7c <fsm_state_data_transmission>:

static void fsm_state_data_transmission(fsm_t *fsm, uint8_t event){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
    switch(event){
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b0a      	cmp	r3, #10
 8000d8c:	d00f      	beq.n	8000dae <fsm_state_data_transmission+0x32>
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	dc12      	bgt.n	8000db8 <fsm_state_data_transmission+0x3c>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d002      	beq.n	8000d9c <fsm_state_data_transmission+0x20>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d010      	beq.n	8000dbc <fsm_state_data_transmission+0x40>
        break;
    case EV_EXIT:
        /* State exit actions */
        break;
    default:
        break;
 8000d9a:	e00d      	b.n	8000db8 <fsm_state_data_transmission+0x3c>
    	setOnboardStatusLEDs(4);
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f7ff fca3 	bl	80006e8 <setOnboardStatusLEDs>
    	sendCommand("STATE:TRANSMISSION");
 8000da2:	4809      	ldr	r0, [pc, #36]	@ (8000dc8 <fsm_state_data_transmission+0x4c>)
 8000da4:	f7ff fd0e 	bl	80007c4 <sendCommand>
    	sendData();
 8000da8:	f7ff fd48 	bl	800083c <sendData>
        break;
 8000dac:	e007      	b.n	8000dbe <fsm_state_data_transmission+0x42>
        fsm_transition(fsm, fsm_state_wait_for_ACK);
 8000dae:	4907      	ldr	r1, [pc, #28]	@ (8000dcc <fsm_state_data_transmission+0x50>)
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff3d 	bl	8000c30 <fsm_transition>
        break;
 8000db6:	e002      	b.n	8000dbe <fsm_state_data_transmission+0x42>
        break;
 8000db8:	bf00      	nop
 8000dba:	e000      	b.n	8000dbe <fsm_state_data_transmission+0x42>
        break;
 8000dbc:	bf00      	nop
    }
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08008e5c 	.word	0x08008e5c
 8000dcc:	08000dd1 	.word	0x08000dd1

08000dd0 <fsm_state_wait_for_ACK>:

static void fsm_state_wait_for_ACK(fsm_t *fsm, uint8_t event){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
    switch(event){
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	2b0c      	cmp	r3, #12
 8000de2:	d82e      	bhi.n	8000e42 <fsm_state_wait_for_ACK+0x72>
 8000de4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <fsm_state_wait_for_ACK+0x1c>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e21 	.word	0x08000e21
 8000df0:	08000e43 	.word	0x08000e43
 8000df4:	08000e43 	.word	0x08000e43
 8000df8:	08000e43 	.word	0x08000e43
 8000dfc:	08000e43 	.word	0x08000e43
 8000e00:	08000e43 	.word	0x08000e43
 8000e04:	08000e43 	.word	0x08000e43
 8000e08:	08000e43 	.word	0x08000e43
 8000e0c:	08000e43 	.word	0x08000e43
 8000e10:	08000e43 	.word	0x08000e43
 8000e14:	08000e43 	.word	0x08000e43
 8000e18:	08000e2f 	.word	0x08000e2f
 8000e1c:	08000e39 	.word	0x08000e39
    case EV_ENTRY:
        /* State entry actions */
    	setOnboardStatusLEDs(5);
 8000e20:	2005      	movs	r0, #5
 8000e22:	f7ff fc61 	bl	80006e8 <setOnboardStatusLEDs>
    	sendCommand("STATE:WAIT_FOR_ACK");
 8000e26:	4809      	ldr	r0, [pc, #36]	@ (8000e4c <fsm_state_wait_for_ACK+0x7c>)
 8000e28:	f7ff fccc 	bl	80007c4 <sendCommand>
        break;
 8000e2c:	e00a      	b.n	8000e44 <fsm_state_wait_for_ACK+0x74>
    case EV_SAMPL_ACK_CONTINUE:
        fsm_transition(fsm, fsm_state_data_acquisition);
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <fsm_state_wait_for_ACK+0x80>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fefd 	bl	8000c30 <fsm_transition>
        break;
 8000e36:	e005      	b.n	8000e44 <fsm_state_wait_for_ACK+0x74>
    case EV_SAMPL_ACK_STOP:
        fsm_transition(fsm, fsm_state_idle);
 8000e38:	4906      	ldr	r1, [pc, #24]	@ (8000e54 <fsm_state_wait_for_ACK+0x84>)
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fef8 	bl	8000c30 <fsm_transition>
        break;
 8000e40:	e000      	b.n	8000e44 <fsm_state_wait_for_ACK+0x74>
    case EV_EXIT:
        /* State exit actions */
        break;
    default:
        break;
 8000e42:	bf00      	nop
    }
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	08008e70 	.word	0x08008e70
 8000e50:	08000cf1 	.word	0x08000cf1
 8000e54:	08000ca1 	.word	0x08000ca1

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 facb 	bl	80013f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f808 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f876 	bl	8000f54 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000e68:	f006 fd2a 	bl	80078c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // start fsm application
  fsm_run();
 8000e6c:	f7ff fe80 	bl	8000b70 <fsm_run>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <main+0x18>

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	@ 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2234      	movs	r2, #52	@ 0x34
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fbc6 	bl	8008614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 0308 	add.w	r3, r7, #8
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <SystemClock_Config+0xd8>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f4c <SystemClock_Config+0xd8>)
 8000e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <SystemClock_Config+0xd8>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <SystemClock_Config+0xdc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eb8:	4a25      	ldr	r2, [pc, #148]	@ (8000f50 <SystemClock_Config+0xdc>)
 8000eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <SystemClock_Config+0xdc>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000ee4:	2364      	movs	r3, #100	@ 0x64
 8000ee6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 f8af 	bl	800305c <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f04:	f000 f91e 	bl	8001144 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f08:	f002 f858 	bl	8002fbc <HAL_PWREx_EnableOverDrive>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f12:	f000 f917 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2103      	movs	r1, #3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fb40 	bl	80035b8 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000f3e:	f000 f901 	bl	8001144 <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	@ 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	@ 0x30
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	4b70      	ldr	r3, [pc, #448]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a6f      	ldr	r2, [pc, #444]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b6d      	ldr	r3, [pc, #436]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	4b6a      	ldr	r3, [pc, #424]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a69      	ldr	r2, [pc, #420]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b67      	ldr	r3, [pc, #412]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b64      	ldr	r3, [pc, #400]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a63      	ldr	r2, [pc, #396]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b61      	ldr	r3, [pc, #388]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b5e      	ldr	r3, [pc, #376]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b58      	ldr	r3, [pc, #352]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a57      	ldr	r2, [pc, #348]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b55      	ldr	r3, [pc, #340]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe2:	4b52      	ldr	r3, [pc, #328]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a51      	ldr	r2, [pc, #324]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000fe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b4f      	ldr	r3, [pc, #316]	@ (800112c <MX_GPIO_Init+0x1d8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001000:	484b      	ldr	r0, [pc, #300]	@ (8001130 <MX_GPIO_Init+0x1dc>)
 8001002:	f000 fd37 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2140      	movs	r1, #64	@ 0x40
 800100a:	484a      	ldr	r0, [pc, #296]	@ (8001134 <MX_GPIO_Init+0x1e0>)
 800100c:	f000 fd32 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001010:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800101a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4844      	ldr	r0, [pc, #272]	@ (8001138 <MX_GPIO_Init+0x1e4>)
 8001028:	f000 fb78 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800102c:	2332      	movs	r3, #50	@ 0x32
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103c:	230b      	movs	r3, #11
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	483c      	ldr	r0, [pc, #240]	@ (8001138 <MX_GPIO_Init+0x1e4>)
 8001048:	f000 fb68 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800104c:	2386      	movs	r3, #134	@ 0x86
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105c:	230b      	movs	r3, #11
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4835      	ldr	r0, [pc, #212]	@ (800113c <MX_GPIO_Init+0x1e8>)
 8001068:	f000 fb58 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800106c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	482a      	ldr	r0, [pc, #168]	@ (8001130 <MX_GPIO_Init+0x1dc>)
 8001086:	f000 fb49 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800108a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109c:	230b      	movs	r3, #11
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4822      	ldr	r0, [pc, #136]	@ (8001130 <MX_GPIO_Init+0x1dc>)
 80010a8:	f000 fb38 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010be:	2307      	movs	r3, #7
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481d      	ldr	r0, [pc, #116]	@ (8001140 <MX_GPIO_Init+0x1ec>)
 80010ca:	f000 fb27 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ce:	2340      	movs	r3, #64	@ 0x40
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4813      	ldr	r0, [pc, #76]	@ (8001134 <MX_GPIO_Init+0x1e0>)
 80010e6:	f000 fb19 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <MX_GPIO_Init+0x1e0>)
 80010fe:	f000 fb0d 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001102:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001114:	230b      	movs	r3, #11
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_GPIO_Init+0x1e0>)
 8001120:	f000 fafc 	bl	800171c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001124:	bf00      	nop
 8001126:	3730      	adds	r7, #48	@ 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40020400 	.word	0x40020400
 8001134:	40021800 	.word	0x40021800
 8001138:	40020800 	.word	0x40020800
 800113c:	40020000 	.word	0x40020000
 8001140:	40020c00 	.word	0x40020c00

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <Error_Handler+0x8>

08001150 <enqueue>:
/* void enqueue(volatile queue_t *queue, uint8_t in)
 *
 * inserts an element 'in' into the queue
 *
 * NO HANDLING OF A FULL QUEUE!		 					*/
void enqueue(volatile queue_t *queue, uint8_t in){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    ENTER_CRITICAL();
 800115c:	f000 f83a 	bl	80011d4 <ENTER_CRITICAL>
    queue->fifo[queue->tail++] = in;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 8001166:	b2db      	uxtb	r3, r3
 8001168:	1c5a      	adds	r2, r3, #1
 800116a:	b2d1      	uxtb	r1, r2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	f882 1101 	strb.w	r1, [r2, #257]	@ 0x101
 8001172:	4619      	mov	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	78fa      	ldrb	r2, [r7, #3]
 8001178:	545a      	strb	r2, [r3, r1]
    LEAVE_CRITICAL();
 800117a:	f000 f833 	bl	80011e4 <LEAVE_CRITICAL>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <dequeue>:
 *
 * extracts an element from the queue and inserts it into variable
 * referenced by 'out'
 *
 * HANDLING OF EMTPY QUEUE -> STANDBY		 			*/
void dequeue(volatile queue_t *queue, uint8_t *out){
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	//LEAVE_CRITICAL();
    while(queue->head == queue->tail){
 8001190:	bf00      	nop
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 8001198:	b2da      	uxtb	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3101 	ldrb.w	r3, [r3, #257]	@ 0x101
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d0f5      	beq.n	8001192 <dequeue+0xc>
        //STANDBY();
    }

    ENTER_CRITICAL();
 80011a6:	f000 f815 	bl	80011d4 <ENTER_CRITICAL>
    *out = queue->fifo[queue->head++];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3100 	ldrb.w	r3, [r3, #256]	@ 0x100
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	b2d1      	uxtb	r1, r2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	f882 1100 	strb.w	r1, [r2, #256]	@ 0x100
 80011bc:	461a      	mov	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	5c9b      	ldrb	r3, [r3, r2]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	701a      	strb	r2, [r3, #0]
    LEAVE_CRITICAL();
 80011c8:	f000 f80c 	bl	80011e4 <LEAVE_CRITICAL>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <ENTER_CRITICAL>:
}

/* void ENTER_CRITICAL()
 *
 * execute before entering critical section				*/
void ENTER_CRITICAL(){
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    asm("CPSID I"); /* Disable interrupts */
 80011d8:	b672      	cpsid	i
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LEAVE_CRITICAL>:

/* void LEAVE_CRITICAL()
 *
 * execute after leaving critical section				*/
void LEAVE_CRITICAL(){
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
    asm("CPSIE I"); /* Enable interrupts */
 80011e8:	b662      	cpsie	i
    asm("ISB");     /* Flush pipeline    */
 80011ea:	f3bf 8f6f 	isb	sy
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <HAL_MspInit+0x44>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	4a0e      	ldr	r2, [pc, #56]	@ (800123c <HAL_MspInit+0x44>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	@ 0x40
 800120a:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <HAL_MspInit+0x44>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_MspInit+0x44>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_MspInit+0x44>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001220:	6453      	str	r3, [r2, #68]	@ 0x44
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_MspInit+0x44>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <NMI_Handler+0x4>

08001248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <MemManage_Handler+0x4>

08001258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <UsageFault_Handler+0x4>

08001268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001296:	f000 f8eb 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <OTG_FS_IRQHandler+0x10>)
 80012a6:	f000 fd36 	bl	8001d16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20002080 	.word	0x20002080

080012b4 <TIM3_IRQHandler>:
 * exception handler for TIM3
 *
 * used to debounce USR_Btn B1 (PC13)
 *	 													*/
void TIM3_IRQHandler()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);  	// clear TIM3 pending flag (UIF)
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <TIM3_IRQHandler+0x28>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <TIM3_IRQHandler+0x28>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6113      	str	r3, [r2, #16]

	if(GPIOC->IDR & USER_Btn_Pin)
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <TIM3_IRQHandler+0x2c>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <TIM3_IRQHandler+0x22>
	{
		// enqueue event EV_B1_PRESSED
		fsm_add_event(EV_B1_PRESSED);
 80012d0:	2006      	movs	r0, #6
 80012d2:	f7ff fc7d 	bl	8000bd0 <fsm_add_event>

	}
	// note:
	// clearing UIF at end causes problem, because of pipelining architecture
	// in combination with tailchaining mechanism (ISR is incorrectly called again)
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000400 	.word	0x40000400
 80012e0:	40020800 	.word	0x40020800

080012e4 <EXTI15_10_IRQHandler>:
 * exception handler for EXTI15_10
 *
 * executed, when USR_Btn B1 (PC13) is pushed
 *	 													*/
void EXTI15_10_IRQHandler()
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR13;		// clear EXTI13 pending flag
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <EXTI15_10_IRQHandler+0x28>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4a07      	ldr	r2, [pc, #28]	@ (800130c <EXTI15_10_IRQHandler+0x28>)
 80012ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012f2:	6153      	str	r3, [r2, #20]

	TIM3->CR1 |= TIM_CR1_CEN;       // enable Counter TIM4
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <EXTI15_10_IRQHandler+0x2c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <EXTI15_10_IRQHandler+0x2c>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40013c00 	.word	0x40013c00
 8001310:	40000400 	.word	0x40000400

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	@ (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	@ (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f007 f97e 	bl	8008644 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20080000 	.word	0x20080000
 8001374:	00000400 	.word	0x00000400
 8001378:	20000b94 	.word	0x20000b94
 800137c:	200026a8 	.word	0x200026a8

08001380 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a8:	f7ff ffea 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ae:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c4:	4c0a      	ldr	r4, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f007 f93d 	bl	8008650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff fd3f 	bl	8000e58 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 80013e8:	08008f20 	.word	0x08008f20
  ldr r2, =_sbss
 80013ec:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80013f0:	200026a8 	.word	0x200026a8

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>

080013f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fa:	2003      	movs	r0, #3
 80013fc:	f000 f94c 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001400:	2000      	movs	r0, #0
 8001402:	f000 f805 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001406:	f7ff fef7 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f967 	bl	8001702 <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f92f 	bl	80016ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000000 	.word	0x20000000
 8001468:	20000008 	.word	0x20000008
 800146c:	20000004 	.word	0x20000004

08001470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_IncTick+0x20>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x24>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a04      	ldr	r2, [pc, #16]	@ (8001494 <HAL_IncTick+0x24>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008
 8001494:	20000b98 	.word	0x20000b98

08001498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return uwTick;
 800149c:	4b03      	ldr	r3, [pc, #12]	@ (80014ac <HAL_GetTick+0x14>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000b98 	.word	0x20000b98

080014b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff ffee 	bl	8001498 <HAL_GetTick>
 80014bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d005      	beq.n	80014d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <HAL_Delay+0x44>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d6:	bf00      	nop
 80014d8:	f7ff ffde 	bl	8001498 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d8f7      	bhi.n	80014d8 <HAL_Delay+0x28>
  {
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008

080014f8 <__NVIC_SetPriorityGrouping>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001508:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001514:	4013      	ands	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001520:	4b06      	ldr	r3, [pc, #24]	@ (800153c <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	4313      	orrs	r3, r2
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	@ (8001538 <__NVIC_SetPriorityGrouping+0x40>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	05fa0000 	.word	0x05fa0000

08001540 <__NVIC_GetPriorityGrouping>:
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <__NVIC_GetPriorityGrouping+0x18>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	f003 0307 	and.w	r3, r3, #7
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_EnableIRQ>:
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	db0b      	blt.n	8001586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 021f 	and.w	r2, r3, #31
 8001574:	4907      	ldr	r1, [pc, #28]	@ (8001594 <__NVIC_EnableIRQ+0x38>)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	095b      	lsrs	r3, r3, #5
 800157c:	2001      	movs	r0, #1
 800157e:	fa00 f202 	lsl.w	r2, r0, r2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000e100 	.word	0xe000e100

08001598 <__NVIC_SetPriority>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	@ (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	@ 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	@ 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff29 	bl	80014f8 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff3e 	bl	8001540 <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff31 	bl	800155c <__NVIC_EnableIRQ>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffa2 	bl	8001654 <SysTick_Config>
 8001710:	4603      	mov	r3, r0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b089      	sub	sp, #36	@ 0x24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e175      	b.n	8001a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 8164 	bne.w	8001a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x56>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80be 	beq.w	8001a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b66      	ldr	r3, [pc, #408]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	4a65      	ldr	r2, [pc, #404]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b2:	4b63      	ldr	r3, [pc, #396]	@ (8001a40 <HAL_GPIO_Init+0x324>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018be:	4a61      	ldr	r2, [pc, #388]	@ (8001a44 <HAL_GPIO_Init+0x328>)
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	@ (8001a48 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d037      	beq.n	800195a <HAL_GPIO_Init+0x23e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a57      	ldr	r2, [pc, #348]	@ (8001a4c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d031      	beq.n	8001956 <HAL_GPIO_Init+0x23a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a56      	ldr	r2, [pc, #344]	@ (8001a50 <HAL_GPIO_Init+0x334>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d02b      	beq.n	8001952 <HAL_GPIO_Init+0x236>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a55      	ldr	r2, [pc, #340]	@ (8001a54 <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x232>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a54      	ldr	r2, [pc, #336]	@ (8001a58 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x22e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a53      	ldr	r2, [pc, #332]	@ (8001a5c <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x22a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x226>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a51      	ldr	r2, [pc, #324]	@ (8001a64 <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x222>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a50      	ldr	r2, [pc, #320]	@ (8001a68 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x21e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a6c <HAL_GPIO_Init+0x350>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x21a>
 8001932:	2309      	movs	r3, #9
 8001934:	e012      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001936:	230a      	movs	r3, #10
 8001938:	e010      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193a:	2308      	movs	r3, #8
 800193c:	e00e      	b.n	800195c <HAL_GPIO_Init+0x240>
 800193e:	2307      	movs	r3, #7
 8001940:	e00c      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001942:	2306      	movs	r3, #6
 8001944:	e00a      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001946:	2305      	movs	r3, #5
 8001948:	e008      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194a:	2304      	movs	r3, #4
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x240>
 800194e:	2303      	movs	r3, #3
 8001950:	e004      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001952:	2302      	movs	r3, #2
 8001954:	e002      	b.n	800195c <HAL_GPIO_Init+0x240>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_GPIO_Init+0x240>
 800195a:	2300      	movs	r3, #0
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	f002 0203 	and.w	r2, r2, #3
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	4093      	lsls	r3, r2
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800196c:	4935      	ldr	r1, [pc, #212]	@ (8001a44 <HAL_GPIO_Init+0x328>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199e:	4a34      	ldr	r2, [pc, #208]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a4:	4b32      	ldr	r3, [pc, #200]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c8:	4a29      	ldr	r2, [pc, #164]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ce:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1c:	4a14      	ldr	r2, [pc, #80]	@ (8001a70 <HAL_GPIO_Init+0x354>)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3301      	adds	r3, #1
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	f67f ae86 	bls.w	800173c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40013800 	.word	0x40013800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40021400 	.word	0x40021400
 8001a60:	40021800 	.word	0x40021800
 8001a64:	40021c00 	.word	0x40021c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022400 	.word	0x40022400
 8001a70:	40013c00 	.word	0x40013c00

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af02      	add	r7, sp, #8
 8001aac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e108      	b.n	8001cca <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f006 f920 	bl	8007d18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2203      	movs	r2, #3
 8001adc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ae6:	d102      	bne.n	8001aee <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fc93 	bl	800441e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7c1a      	ldrb	r2, [r3, #16]
 8001b00:	f88d 2000 	strb.w	r2, [sp]
 8001b04:	3304      	adds	r3, #4
 8001b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b08:	f002 fb7c 	bl	8004204 <USB_CoreInit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2202      	movs	r2, #2
 8001b16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0d5      	b.n	8001cca <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fc8b 	bl	8004440 <USB_SetCurrentMode>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0c6      	b.n	8001cca <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e04a      	b.n	8001bd8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3315      	adds	r3, #21
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b56:	7bfa      	ldrb	r2, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3314      	adds	r3, #20
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	b298      	uxth	r0, r3
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	332e      	adds	r3, #46	@ 0x2e
 8001b7e:	4602      	mov	r2, r0
 8001b80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3318      	adds	r3, #24
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	331c      	adds	r3, #28
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3320      	adds	r3, #32
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3324      	adds	r3, #36	@ 0x24
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	791b      	ldrb	r3, [r3, #4]
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3af      	bcc.n	8001b42 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e044      	b.n	8001c72 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	791b      	ldrb	r3, [r3, #4]
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3b5      	bcc.n	8001be8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7c1a      	ldrb	r2, [r3, #16]
 8001c84:	f88d 2000 	strb.w	r2, [sp]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c8c:	f002 fc24 	bl	80044d8 <USB_DevInit>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e013      	b.n	8001cca <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f001 f95b 	bl	8002f74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fc67 	bl	8005596 <USB_DevDisconnect>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_Start+0x16>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e012      	b.n	8001d0e <HAL_PCD_Start+0x3c>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 fb81 	bl	80043fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fc28 	bl	8005554 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d16:	b590      	push	{r4, r7, lr}
 8001d18:	b08d      	sub	sp, #52	@ 0x34
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fce6 	bl	80056fe <USB_GetMode>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f040 84b9 	bne.w	80026ac <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fc4a 	bl	80055d8 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 84af 	beq.w	80026aa <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fc37 	bl	80055d8 <USB_ReadInterrupts>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d107      	bne.n	8001d84 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f002 0202 	and.w	r2, r2, #2
 8001d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fc25 	bl	80055d8 <USB_ReadInterrupts>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d161      	bne.n	8001e5c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0210 	bic.w	r2, r2, #16
 8001da6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	0c5b      	lsrs	r3, r3, #17
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d124      	bne.n	8001e1e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d035      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6a38      	ldr	r0, [r7, #32]
 8001df4:	f003 fa5c 	bl	80052b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e04:	441a      	add	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e16:	441a      	add	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	e016      	b.n	8001e4c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	0c5b      	lsrs	r3, r3, #17
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d110      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e30:	2208      	movs	r2, #8
 8001e32:	4619      	mov	r1, r3
 8001e34:	6a38      	ldr	r0, [r7, #32]
 8001e36:	f003 fa3b 	bl	80052b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e46:	441a      	add	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0210 	orr.w	r2, r2, #16
 8001e5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fbb9 	bl	80055d8 <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001e70:	f040 80a7 	bne.w	8001fc2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fbbe 	bl	80055fe <USB_ReadDevAllOutEpInterrupt>
 8001e82:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001e84:	e099      	b.n	8001fba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 808e 	beq.w	8001fae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fbe2 	bl	8005666 <USB_ReadDevOutEPInterrupt>
 8001ea2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00c      	beq.n	8001ec8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fed0 	bl	8002c68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ee4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 ffa6 	bl	8002e38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f02:	461a      	mov	r2, r3
 8001f04:	2310      	movs	r3, #16
 8001f06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d030      	beq.n	8001f74 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	2b80      	cmp	r3, #128	@ 0x80
 8001f1c:	d109      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f30:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	78db      	ldrb	r3, [r3, #3]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d108      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2200      	movs	r2, #0
 8001f54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f006 f81d 	bl	8007f9c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2302      	movs	r3, #2
 8001f72:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f003 0320 	and.w	r3, r3, #32
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f af62 	bne.w	8001e86 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fb06 	bl	80055d8 <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001fd6:	f040 80db 	bne.w	8002190 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fb27 	bl	8005632 <USB_ReadDevAllInEpInterrupt>
 8001fe4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001fea:	e0cd      	b.n	8002188 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80c2 	beq.w	800217c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f003 fb4d 	bl	80056a2 <USB_ReadDevInEPInterrupt>
 8002008:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d057      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	69f9      	ldr	r1, [r7, #28]
 8002030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002034:	4013      	ands	r3, r2
 8002036:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002044:	461a      	mov	r2, r3
 8002046:	2301      	movs	r3, #1
 8002048:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	799b      	ldrb	r3, [r3, #6]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d132      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3320      	adds	r3, #32
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4403      	add	r3, r0
 8002072:	331c      	adds	r3, #28
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4419      	add	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4403      	add	r3, r0
 8002086:	3320      	adds	r3, #32
 8002088:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	2b00      	cmp	r3, #0
 800208e:	d113      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x3a2>
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3324      	adds	r3, #36	@ 0x24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d108      	bne.n	80020b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020b0:	461a      	mov	r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	f003 fb56 	bl	8005764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f005 fee7 	bl	8007e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020da:	461a      	mov	r2, r3
 80020dc:	2308      	movs	r3, #8
 80020de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020f6:	461a      	mov	r2, r3
 80020f8:	2310      	movs	r3, #16
 80020fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002112:	461a      	mov	r2, r3
 8002114:	2340      	movs	r3, #64	@ 0x40
 8002116:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d023      	beq.n	800216a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002122:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002124:	6a38      	ldr	r0, [r7, #32]
 8002126:	f002 fb35 	bl	8004794 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	3310      	adds	r3, #16
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3304      	adds	r3, #4
 800213c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d108      	bne.n	8002158 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f005 ff34 	bl	8007fc0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002164:	461a      	mov	r2, r3
 8002166:	2302      	movs	r3, #2
 8002168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fcea 	bl	8002b50 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	3301      	adds	r3, #1
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f af2e 	bne.w	8001fec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f003 fa1f 	bl	80055d8 <USB_ReadInterrupts>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80021a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021a4:	d122      	bne.n	80021ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021cc:	2100      	movs	r1, #0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f006 f8ae 	bl	8008330 <HAL_PCDEx_LPM_Callback>
 80021d4:	e002      	b.n	80021dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f005 fed2 	bl	8007f80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80021ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 f9f1 	bl	80055d8 <USB_ReadInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002200:	d112      	bne.n	8002228 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f005 fe8e 	bl	8007f34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002226:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f9d3 	bl	80055d8 <USB_ReadInterrupts>
 8002232:	4603      	mov	r3, r0
 8002234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800223c:	d121      	bne.n	8002282 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800224c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002254:	2b00      	cmp	r3, #0
 8002256:	d111      	bne.n	800227c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	f003 020f 	and.w	r2, r3, #15
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002272:	2101      	movs	r1, #1
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f006 f85b 	bl	8008330 <HAL_PCDEx_LPM_Callback>
 800227a:	e002      	b.n	8002282 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f005 fe59 	bl	8007f34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 f9a6 	bl	80055d8 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002296:	f040 80b7 	bne.w	8002408 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2110      	movs	r1, #16
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 fa6d 	bl	8004794 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022be:	e046      	b.n	800234e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80022c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022cc:	461a      	mov	r2, r3
 80022ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80022d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80022d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e4:	0151      	lsls	r1, r2, #5
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	440a      	add	r2, r1
 80022ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80022ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80022f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002300:	461a      	mov	r2, r3
 8002302:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002306:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002318:	0151      	lsls	r1, r2, #5
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	440a      	add	r2, r1
 800231e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002326:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002338:	0151      	lsls	r1, r2, #5
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	440a      	add	r2, r1
 800233e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002342:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002346:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234a:	3301      	adds	r3, #1
 800234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	791b      	ldrb	r3, [r3, #4]
 8002352:	461a      	mov	r2, r3
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	4293      	cmp	r3, r2
 8002358:	d3b2      	bcc.n	80022c0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002368:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800236c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7bdb      	ldrb	r3, [r3, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002386:	f043 030b 	orr.w	r3, r3, #11
 800238a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800239c:	f043 030b 	orr.w	r3, r3, #11
 80023a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a2:	e015      	b.n	80023d0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b2:	4619      	mov	r1, r3
 80023b4:	f242 032b 	movw	r3, #8235	@ 0x202b
 80023b8:	4313      	orrs	r3, r2
 80023ba:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023ca:	f043 030b 	orr.w	r3, r3, #11
 80023ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80023e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023f2:	461a      	mov	r2, r3
 80023f4:	f003 f9b6 	bl	8005764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f003 f8e3 	bl	80055d8 <USB_ReadInterrupts>
 8002412:	4603      	mov	r3, r0
 8002414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800241c:	d123      	bne.n	8002466 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f003 f97a 	bl	800571c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fa2a 	bl	8004886 <USB_GetDevSpeed>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681c      	ldr	r4, [r3, #0]
 800243e:	f001 faad 	bl	800399c <HAL_RCC_GetHCLKFreq>
 8002442:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002448:	461a      	mov	r2, r3
 800244a:	4620      	mov	r0, r4
 800244c:	f001 ff34 	bl	80042b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f005 fd46 	bl	8007ee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002464:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 f8b4 	bl	80055d8 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d10a      	bne.n	8002490 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f005 fd23 	bl	8007ec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f002 0208 	and.w	r2, r2, #8
 800248e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 f89f 	bl	80055d8 <USB_ReadInterrupts>
 800249a:	4603      	mov	r3, r0
 800249c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a0:	2b80      	cmp	r3, #128	@ 0x80
 80024a2:	d123      	bne.n	80024ec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e014      	b.n	80024e0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d105      	bne.n	80024da <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fb0a 	bl	8002aee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	791b      	ldrb	r3, [r3, #4]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d3e4      	bcc.n	80024b6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 f871 	bl	80055d8 <USB_ReadInterrupts>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002500:	d13c      	bne.n	800257c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
 8002506:	e02b      	b.n	8002560 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3318      	adds	r3, #24
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800252e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002530:	2b00      	cmp	r3, #0
 8002532:	da12      	bge.n	800255a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3317      	adds	r3, #23
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	b2db      	uxtb	r3, r3
 800254c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 faca 	bl	8002aee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	3301      	adds	r3, #1
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	791b      	ldrb	r3, [r3, #4]
 8002564:	461a      	mov	r2, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002568:	4293      	cmp	r3, r2
 800256a:	d3cd      	bcc.n	8002508 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800257a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 f829 	bl	80055d8 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002590:	d156      	bne.n	8002640 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002592:	2301      	movs	r3, #1
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
 8002596:	e045      	b.n	8002624 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d12e      	bne.n	800261e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da2b      	bge.n	800261e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	0c1a      	lsrs	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80025d0:	4053      	eors	r3, r2
 80025d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d121      	bne.n	800261e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002616:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800261a:	6053      	str	r3, [r2, #4]
            break;
 800261c:	e008      	b.n	8002630 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	3301      	adds	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	791b      	ldrb	r3, [r3, #4]
 8002628:	461a      	mov	r2, r3
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	4293      	cmp	r3, r2
 800262e:	d3b3      	bcc.n	8002598 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800263e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f002 ffc7 	bl	80055d8 <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002654:	d10a      	bne.n	800266c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f005 fcc4 	bl	8007fe4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800266a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f002 ffb1 	bl	80055d8 <USB_ReadInterrupts>
 8002676:	4603      	mov	r3, r0
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d115      	bne.n	80026ac <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f005 fcb4 	bl	8008000 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e000      	b.n	80026ac <HAL_PCD_IRQHandler+0x996>
      return;
 80026aa:	bf00      	nop
    }
  }
}
 80026ac:	3734      	adds	r7, #52	@ 0x34
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}

080026b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_PCD_SetAddress+0x1a>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e012      	b.n	80026f2 <HAL_PCD_SetAddress+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4611      	mov	r1, r2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 ff10 	bl	8005508 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	4608      	mov	r0, r1
 8002704:	4611      	mov	r1, r2
 8002706:	461a      	mov	r2, r3
 8002708:	4603      	mov	r3, r0
 800270a:	70fb      	strb	r3, [r7, #3]
 800270c:	460b      	mov	r3, r1
 800270e:	803b      	strh	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da0f      	bge.n	8002740 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 020f 	and.w	r2, r3, #15
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	3310      	adds	r3, #16
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	705a      	strb	r2, [r3, #1]
 800273e:	e00f      	b.n	8002760 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 020f 	and.w	r2, r3, #15
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	3304      	adds	r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800276c:	883b      	ldrh	r3, [r7, #0]
 800276e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	78ba      	ldrb	r2, [r7, #2]
 800277a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800278e:	78bb      	ldrb	r3, [r7, #2]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d102      	bne.n	800279a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_PCD_EP_Open+0xae>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e00e      	b.n	80027c6 <HAL_PCD_EP_Open+0xcc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f002 f88a 	bl	80048d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80027c4:	7afb      	ldrb	r3, [r7, #11]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	da0f      	bge.n	8002802 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	f003 020f 	and.w	r2, r3, #15
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3310      	adds	r3, #16
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	3304      	adds	r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	705a      	strb	r2, [r3, #1]
 8002800:	e00f      	b.n	8002822 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_PCD_EP_Close+0x6e>
 8002838:	2302      	movs	r3, #2
 800283a:	e00e      	b.n	800285a <HAL_PCD_EP_Close+0x8c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 f8c8 	bl	80049e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b086      	sub	sp, #24
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	460b      	mov	r3, r1
 8002870:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002872:	7afb      	ldrb	r3, [r7, #11]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	799b      	ldrb	r3, [r3, #6]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6818      	ldr	r0, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	799b      	ldrb	r3, [r3, #6]
 80028c6:	461a      	mov	r2, r3
 80028c8:	6979      	ldr	r1, [r7, #20]
 80028ca:	f002 f965 	bl	8004b98 <USB_EPStartXfer>

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 020f 	and.w	r2, r3, #15
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80028fa:	681b      	ldr	r3, [r3, #0]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	460b      	mov	r3, r1
 8002916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	3310      	adds	r3, #16
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	3304      	adds	r3, #4
 800292e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2200      	movs	r2, #0
 8002940:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2201      	movs	r2, #1
 8002946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	799b      	ldrb	r3, [r3, #6]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	799b      	ldrb	r3, [r3, #6]
 800296a:	461a      	mov	r2, r3
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	f002 f913 	bl	8004b98 <USB_EPStartXfer>

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	7912      	ldrb	r2, [r2, #4]
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e04f      	b.n	8002a3a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800299a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	da0f      	bge.n	80029c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	3310      	adds	r3, #16
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	3304      	adds	r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	705a      	strb	r2, [r3, #1]
 80029c0:	e00d      	b.n	80029de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_PCD_EP_SetStall+0x82>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e01d      	b.n	8002a3a <HAL_PCD_EP_SetStall+0xbe>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68f9      	ldr	r1, [r7, #12]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f002 fca7 	bl	8005360 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7999      	ldrb	r1, [r3, #6]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f002 fe9a 	bl	8005764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	7912      	ldrb	r2, [r2, #4]
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e042      	b.n	8002ae6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da0f      	bge.n	8002a88 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	3310      	adds	r3, #16
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	705a      	strb	r2, [r3, #1]
 8002a86:	e00f      	b.n	8002aa8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	4613      	mov	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_PCD_EP_ClrStall+0x86>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e00e      	b.n	8002ae6 <HAL_PCD_EP_ClrStall+0xa4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fcb0 	bl	800543c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da0c      	bge.n	8002b1c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 020f 	and.w	r2, r3, #15
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	3310      	adds	r3, #16
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00c      	b.n	8002b36 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	3304      	adds	r3, #4
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 facf 	bl	80050e0 <USB_EPStopXfer>
 8002b42:	4603      	mov	r3, r0
 8002b44:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b46:	7afb      	ldrb	r3, [r7, #11]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	3310      	adds	r3, #16
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	4413      	add	r3, r2
 8002b74:	3304      	adds	r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d901      	bls.n	8002b88 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e06b      	b.n	8002c60 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d902      	bls.n	8002ba4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	3303      	adds	r3, #3
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bac:	e02a      	b.n	8002c04 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d902      	bls.n	8002bca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3303      	adds	r3, #3
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	68d9      	ldr	r1, [r3, #12]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4603      	mov	r3, r0
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f002 fb24 	bl	8005234 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	441a      	add	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d809      	bhi.n	8002c2e <PCD_WriteEmptyTxFifo+0xde>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d203      	bcs.n	8002c2e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1bf      	bne.n	8002bae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d811      	bhi.n	8002c5e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	2201      	movs	r2, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	6939      	ldr	r1, [r7, #16]
 8002c56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	333c      	adds	r3, #60	@ 0x3c
 8002c80:	3304      	adds	r3, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	799b      	ldrb	r3, [r3, #6]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d17b      	bne.n	8002d96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	4a61      	ldr	r2, [pc, #388]	@ (8002e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	f240 80b9 	bls.w	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80b3 	beq.w	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	e0a7      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cea:	461a      	mov	r2, r3
 8002cec:	2320      	movs	r3, #32
 8002cee:	6093      	str	r3, [r2, #8]
 8002cf0:	e098      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 8093 	bne.w	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	4a4b      	ldr	r2, [pc, #300]	@ (8002e30 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d90f      	bls.n	8002d26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d22:	6093      	str	r3, [r2, #8]
 8002d24:	e07e      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	0159      	lsls	r1, r3, #5
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	1ad2      	subs	r2, r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d114      	bne.n	8002d88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d70:	461a      	mov	r2, r3
 8002d72:	2101      	movs	r1, #1
 8002d74:	f002 fcf6 	bl	8005764 <USB_EP0_OutStart>
 8002d78:	e006      	b.n	8002d88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	441a      	add	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f005 f864 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
 8002d94:	e046      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4a26      	ldr	r2, [pc, #152]	@ (8002e34 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d124      	bne.n	8002de8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db4:	461a      	mov	r2, r3
 8002db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	e032      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f005 f83b 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
 8002de6:	e01d      	b.n	8002e24 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d114      	bne.n	8002e18 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d108      	bne.n	8002e18 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e10:	461a      	mov	r2, r3
 8002e12:	2100      	movs	r1, #0
 8002e14:	f002 fca6 	bl	8005764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f005 f81c 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	4f54300a 	.word	0x4f54300a
 8002e34:	4f54310a 	.word	0x4f54310a

08002e38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	333c      	adds	r3, #60	@ 0x3c
 8002e50:	3304      	adds	r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d90e      	bls.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f004 ffd3 	bl	8007e38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d90c      	bls.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eac:	461a      	mov	r2, r3
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f002 fc58 	bl	8005764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	4f54300a 	.word	0x4f54300a

08002ec4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d107      	bne.n	8002ef2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ee2:	883b      	ldrh	r3, [r7, #0]
 8002ee4:	0419      	lsls	r1, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ef0:	e028      	b.n	8002f44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	0c1b      	lsrs	r3, r3, #16
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e00d      	b.n	8002f22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3340      	adds	r3, #64	@ 0x40
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	4413      	add	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3ec      	bcc.n	8002f06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f2c:	883b      	ldrh	r3, [r7, #0]
 8002f2e:	0418      	lsls	r0, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	4302      	orrs	r2, r0
 8002f3c:	3340      	adds	r3, #64	@ 0x40
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fa2:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	10000003 	.word	0x10000003

08002fbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b23      	ldr	r3, [pc, #140]	@ (8003054 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	4a22      	ldr	r2, [pc, #136]	@ (8003054 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd2:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	603b      	str	r3, [r7, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fea:	f7fe fa55 	bl	8001498 <HAL_GetTick>
 8002fee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ff0:	e009      	b.n	8003006 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ff2:	f7fe fa51 	bl	8001498 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003000:	d901      	bls.n	8003006 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e022      	b.n	800304c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003012:	d1ee      	bne.n	8002ff2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003014:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0f      	ldr	r2, [pc, #60]	@ (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 800301a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800301e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003020:	f7fe fa3a 	bl	8001498 <HAL_GetTick>
 8003024:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003026:	e009      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003028:	f7fe fa36 	bl	8001498 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003036:	d901      	bls.n	800303c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e007      	b.n	800304c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_PWREx_EnableOverDrive+0x9c>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003044:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003048:	d1ee      	bne.n	8003028 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40023800 	.word	0x40023800
 8003058:	40007000 	.word	0x40007000

0800305c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003064:	2300      	movs	r3, #0
 8003066:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e29b      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8087 	beq.w	800318e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003080:	4b96      	ldr	r3, [pc, #600]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b04      	cmp	r3, #4
 800308a:	d00c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308c:	4b93      	ldr	r3, [pc, #588]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d112      	bne.n	80030be <HAL_RCC_OscConfig+0x62>
 8003098:	4b90      	ldr	r3, [pc, #576]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030a4:	d10b      	bne.n	80030be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a6:	4b8d      	ldr	r3, [pc, #564]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d06c      	beq.n	800318c <HAL_RCC_OscConfig+0x130>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d168      	bne.n	800318c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e275      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x7a>
 80030c8:	4b84      	ldr	r3, [pc, #528]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a83      	ldr	r2, [pc, #524]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e02e      	b.n	8003134 <HAL_RCC_OscConfig+0xd8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x9c>
 80030de:	4b7f      	ldr	r3, [pc, #508]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a7e      	ldr	r2, [pc, #504]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b7c      	ldr	r3, [pc, #496]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7b      	ldr	r2, [pc, #492]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80030f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e01d      	b.n	8003134 <HAL_RCC_OscConfig+0xd8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003100:	d10c      	bne.n	800311c <HAL_RCC_OscConfig+0xc0>
 8003102:	4b76      	ldr	r3, [pc, #472]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a75      	ldr	r2, [pc, #468]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b73      	ldr	r3, [pc, #460]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a72      	ldr	r2, [pc, #456]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0xd8>
 800311c:	4b6f      	ldr	r3, [pc, #444]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a6e      	ldr	r2, [pc, #440]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b6c      	ldr	r3, [pc, #432]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6b      	ldr	r2, [pc, #428]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800312e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d013      	beq.n	8003164 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe f9ac 	bl	8001498 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe f9a8 	bl	8001498 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	@ 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e229      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b61      	ldr	r3, [pc, #388]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xe8>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f998 	bl	8001498 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe f994 	bl	8001498 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e215      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	4b57      	ldr	r3, [pc, #348]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x110>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d069      	beq.n	800326e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800319a:	4b50      	ldr	r3, [pc, #320]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00b      	beq.n	80031be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a6:	4b4d      	ldr	r3, [pc, #308]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11c      	bne.n	80031ec <HAL_RCC_OscConfig+0x190>
 80031b2:	4b4a      	ldr	r3, [pc, #296]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	4b47      	ldr	r3, [pc, #284]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1e9      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b41      	ldr	r3, [pc, #260]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	493d      	ldr	r1, [pc, #244]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e040      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d023      	beq.n	800323c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	4b39      	ldr	r3, [pc, #228]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a38      	ldr	r2, [pc, #224]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe f94a 	bl	8001498 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe f946 	bl	8001498 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1c7      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b30      	ldr	r3, [pc, #192]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b2d      	ldr	r3, [pc, #180]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4929      	ldr	r1, [pc, #164]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
 800323a:	e018      	b.n	800326e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323c:	4b27      	ldr	r3, [pc, #156]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a26      	ldr	r2, [pc, #152]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003242:	f023 0301 	bic.w	r3, r3, #1
 8003246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fe f926 	bl	8001498 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fe f922 	bl	8001498 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1a3      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d038      	beq.n	80032ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003286:	4a15      	ldr	r2, [pc, #84]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe f903 	bl	8001498 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe f8ff 	bl	8001498 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e180      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a8:	4b0c      	ldr	r3, [pc, #48]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x23a>
 80032b4:	e01a      	b.n	80032ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ba:	4a08      	ldr	r2, [pc, #32]	@ (80032dc <HAL_RCC_OscConfig+0x280>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c2:	f7fe f8e9 	bl	8001498 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe f8e5 	bl	8001498 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d903      	bls.n	80032e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e166      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
 80032dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b92      	ldr	r3, [pc, #584]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a4 	beq.w	8003442 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b8c      	ldr	r3, [pc, #560]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b89      	ldr	r3, [pc, #548]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	4a88      	ldr	r2, [pc, #544]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003310:	6413      	str	r3, [r2, #64]	@ 0x40
 8003312:	4b86      	ldr	r3, [pc, #536]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003322:	4b83      	ldr	r3, [pc, #524]	@ (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d118      	bne.n	8003360 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800332e:	4b80      	ldr	r3, [pc, #512]	@ (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7f      	ldr	r2, [pc, #508]	@ (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7fe f8ad 	bl	8001498 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe f8a9 	bl	8001498 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	@ 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e12a      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003354:	4b76      	ldr	r3, [pc, #472]	@ (8003530 <HAL_RCC_OscConfig+0x4d4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x31a>
 8003368:	4b70      	ldr	r3, [pc, #448]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a6f      	ldr	r2, [pc, #444]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
 8003374:	e02d      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x33c>
 800337e:	4b6b      	ldr	r3, [pc, #428]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	4a6a      	ldr	r2, [pc, #424]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	@ 0x70
 800338a:	4b68      	ldr	r3, [pc, #416]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	4a67      	ldr	r2, [pc, #412]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	@ 0x70
 8003396:	e01c      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x35e>
 80033a0:	4b62      	ldr	r3, [pc, #392]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a4:	4a61      	ldr	r2, [pc, #388]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ac:	4b5f      	ldr	r3, [pc, #380]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b0:	4a5e      	ldr	r2, [pc, #376]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b8:	e00b      	b.n	80033d2 <HAL_RCC_OscConfig+0x376>
 80033ba:	4b5c      	ldr	r3, [pc, #368]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033be:	4a5b      	ldr	r2, [pc, #364]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c6:	4b59      	ldr	r3, [pc, #356]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	4a58      	ldr	r2, [pc, #352]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe f85d 	bl	8001498 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fe f859 	bl	8001498 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0d8      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	4b4c      	ldr	r3, [pc, #304]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ee      	beq.n	80033e2 <HAL_RCC_OscConfig+0x386>
 8003404:	e014      	b.n	8003430 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003406:	f7fe f847 	bl	8001498 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe f843 	bl	8001498 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0c2      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	4b41      	ldr	r3, [pc, #260]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b3d      	ldr	r3, [pc, #244]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	4a3c      	ldr	r2, [pc, #240]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 80ae 	beq.w	80035a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d06d      	beq.n	8003534 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d14b      	bne.n	80034f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b32      	ldr	r3, [pc, #200]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a31      	ldr	r2, [pc, #196]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800346a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe f814 	bl	8001498 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe f810 	bl	8001498 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e091      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003486:	4b29      	ldr	r3, [pc, #164]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	3b01      	subs	r3, #1
 80034ac:	041b      	lsls	r3, r3, #16
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	061b      	lsls	r3, r3, #24
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	071b      	lsls	r3, r3, #28
 80034be:	491b      	ldr	r1, [pc, #108]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a18      	ldr	r2, [pc, #96]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd ffe2 	bl	8001498 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fd ffde 	bl	8001498 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e05f      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x47c>
 80034f6:	e057      	b.n	80035a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd ffc8 	bl	8001498 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd ffc4 	bl	8001498 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e045      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_OscConfig+0x4d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x4b0>
 800352a:	e03d      	b.n	80035a8 <HAL_RCC_OscConfig+0x54c>
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003534:	4b1f      	ldr	r3, [pc, #124]	@ (80035b4 <HAL_RCC_OscConfig+0x558>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d030      	beq.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d129      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d122      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003564:	4013      	ands	r3, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800356a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800356c:	4293      	cmp	r3, r2
 800356e:	d119      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d10f      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0d0      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b6a      	ldr	r3, [pc, #424]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d910      	bls.n	8003600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b67      	ldr	r3, [pc, #412]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 020f 	bic.w	r2, r3, #15
 80035e6:	4965      	ldr	r1, [pc, #404]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b63      	ldr	r3, [pc, #396]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0b8      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d020      	beq.n	800364e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003618:	4b59      	ldr	r3, [pc, #356]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a58      	ldr	r2, [pc, #352]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003622:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003630:	4b53      	ldr	r3, [pc, #332]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003636:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800363c:	4b50      	ldr	r3, [pc, #320]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	494d      	ldr	r1, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d040      	beq.n	80036dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d115      	bne.n	800369a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e07f      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e073      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368a:	4b3d      	ldr	r3, [pc, #244]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06b      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b39      	ldr	r3, [pc, #228]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4936      	ldr	r1, [pc, #216]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f7fd fef4 	bl	8001498 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fd fef0 	bl	8001498 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e053      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b27      	ldr	r3, [pc, #156]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d210      	bcs.n	800370c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b24      	ldr	r3, [pc, #144]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 020f 	bic.w	r2, r3, #15
 80036f2:	4922      	ldr	r1, [pc, #136]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b20      	ldr	r3, [pc, #128]	@ (800377c <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e032      	b.n	8003772 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003718:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	4916      	ldr	r1, [pc, #88]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003736:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	490e      	ldr	r1, [pc, #56]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800374a:	f000 f821 	bl	8003790 <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_RCC_ClockConfig+0x1c8>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_RCC_ClockConfig+0x1cc>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	fa22 f303 	lsr.w	r3, r2, r3
 8003762:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <HAL_RCC_ClockConfig+0x1d0>)
 8003764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1d4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fe50 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023c00 	.word	0x40023c00
 8003780:	40023800 	.word	0x40023800
 8003784:	08008ecc 	.word	0x08008ecc
 8003788:	20000000 	.word	0x20000000
 800378c:	20000004 	.word	0x20000004

08003790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b094      	sub	sp, #80	@ 0x50
 8003796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003798:	2300      	movs	r3, #0
 800379a:	647b      	str	r3, [r7, #68]	@ 0x44
 800379c:	2300      	movs	r3, #0
 800379e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a0:	2300      	movs	r3, #0
 80037a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a8:	4b79      	ldr	r3, [pc, #484]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 030c 	and.w	r3, r3, #12
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d00d      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x40>
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	f200 80e1 	bhi.w	800397c <HAL_RCC_GetSysClockFreq+0x1ec>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x34>
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d003      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x3a>
 80037c2:	e0db      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b73      	ldr	r3, [pc, #460]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c8:	e0db      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ca:	4b73      	ldr	r3, [pc, #460]	@ (8003998 <HAL_RCC_GetSysClockFreq+0x208>)
 80037cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037ce:	e0d8      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037da:	4b6d      	ldr	r3, [pc, #436]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	2200      	movs	r2, #0
 80037ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037fa:	2300      	movs	r3, #0
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80037fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	f04f 0000 	mov.w	r0, #0
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	0159      	lsls	r1, r3, #5
 8003810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003814:	0150      	lsls	r0, r2, #5
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4621      	mov	r1, r4
 800381c:	1a51      	subs	r1, r2, r1
 800381e:	6139      	str	r1, [r7, #16]
 8003820:	4629      	mov	r1, r5
 8003822:	eb63 0301 	sbc.w	r3, r3, r1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003834:	4659      	mov	r1, fp
 8003836:	018b      	lsls	r3, r1, #6
 8003838:	4651      	mov	r1, sl
 800383a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800383e:	4651      	mov	r1, sl
 8003840:	018a      	lsls	r2, r1, #6
 8003842:	4651      	mov	r1, sl
 8003844:	ebb2 0801 	subs.w	r8, r2, r1
 8003848:	4659      	mov	r1, fp
 800384a:	eb63 0901 	sbc.w	r9, r3, r1
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003862:	4690      	mov	r8, r2
 8003864:	4699      	mov	r9, r3
 8003866:	4623      	mov	r3, r4
 8003868:	eb18 0303 	adds.w	r3, r8, r3
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	462b      	mov	r3, r5
 8003870:	eb49 0303 	adc.w	r3, r9, r3
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003882:	4629      	mov	r1, r5
 8003884:	024b      	lsls	r3, r1, #9
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800388c:	4621      	mov	r1, r4
 800388e:	024a      	lsls	r2, r1, #9
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800389a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800389c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038a0:	f7fc fd36 	bl	8000310 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ac:	e058      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b38      	ldr	r3, [pc, #224]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	4611      	mov	r1, r2
 80038ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	2300      	movs	r3, #0
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	f04f 0000 	mov.w	r0, #0
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	0159      	lsls	r1, r3, #5
 80038d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038da:	0150      	lsls	r0, r2, #5
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4641      	mov	r1, r8
 80038e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038e6:	4649      	mov	r1, r9
 80038e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003900:	ebb2 040a 	subs.w	r4, r2, sl
 8003904:	eb63 050b 	sbc.w	r5, r3, fp
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	464b      	mov	r3, r9
 8003924:	eb45 0303 	adc.w	r3, r5, r3
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003936:	4629      	mov	r1, r5
 8003938:	028b      	lsls	r3, r1, #10
 800393a:	4621      	mov	r1, r4
 800393c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003940:	4621      	mov	r1, r4
 8003942:	028a      	lsls	r2, r1, #10
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800394a:	2200      	movs	r2, #0
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	61fa      	str	r2, [r7, #28]
 8003950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003954:	f7fc fcdc 	bl	8000310 <__aeabi_uldivmod>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4613      	mov	r3, r2
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003960:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x200>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800397a:	e002      	b.n	8003982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCC_GetSysClockFreq+0x204>)
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003984:	4618      	mov	r0, r3
 8003986:	3750      	adds	r7, #80	@ 0x50
 8003988:	46bd      	mov	sp, r7
 800398a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800
 8003994:	00f42400 	.word	0x00f42400
 8003998:	007a1200 	.word	0x007a1200

0800399c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039a0:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039a2:	681b      	ldr	r3, [r3, #0]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000000 	.word	0x20000000

080039b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039dc:	4b69      	ldr	r3, [pc, #420]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a68      	ldr	r2, [pc, #416]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	4b66      	ldr	r3, [pc, #408]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	4964      	ldr	r1, [pc, #400]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d017      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a14:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	4959      	ldr	r1, [pc, #356]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d017      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	494a      	ldr	r1, [pc, #296]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a68:	d101      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 808b 	beq.w	8003bae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b3a      	ldr	r3, [pc, #232]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	4a39      	ldr	r2, [pc, #228]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aa4:	4b37      	ldr	r3, [pc, #220]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ab0:	4b35      	ldr	r3, [pc, #212]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a34      	ldr	r2, [pc, #208]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fcec 	bl	8001498 <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac4:	f7fd fce8 	bl	8001498 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e38f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ae2:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d035      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d02e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b00:	4b20      	ldr	r3, [pc, #128]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b16:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b20:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b22:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b28:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d114      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd fcb0 	bl	8001498 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fd fcac 	bl	8001498 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e351      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0ee      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6a:	d111      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b78:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b7a:	400b      	ands	r3, r1
 8003b7c:	4901      	ldr	r1, [pc, #4]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
 8003b82:	e00b      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	0ffffcff 	.word	0x0ffffcff
 8003b90:	4bac      	ldr	r3, [pc, #688]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4aab      	ldr	r2, [pc, #684]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b96:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	4ba9      	ldr	r3, [pc, #676]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	49a6      	ldr	r1, [pc, #664]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bba:	4ba2      	ldr	r3, [pc, #648]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc0:	4aa0      	ldr	r2, [pc, #640]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003bca:	4b9e      	ldr	r3, [pc, #632]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bcc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	499b      	ldr	r1, [pc, #620]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003be8:	4b96      	ldr	r3, [pc, #600]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf6:	4993      	ldr	r1, [pc, #588]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c18:	498a      	ldr	r1, [pc, #552]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c2c:	4b85      	ldr	r3, [pc, #532]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3a:	4982      	ldr	r1, [pc, #520]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5c:	4979      	ldr	r1, [pc, #484]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c70:	4b74      	ldr	r3, [pc, #464]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	4971      	ldr	r1, [pc, #452]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c92:	4b6c      	ldr	r3, [pc, #432]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f023 020c 	bic.w	r2, r3, #12
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca0:	4968      	ldr	r1, [pc, #416]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cb4:	4b63      	ldr	r3, [pc, #396]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cba:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc2:	4960      	ldr	r1, [pc, #384]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cdc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce4:	4957      	ldr	r1, [pc, #348]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cf8:	4b52      	ldr	r3, [pc, #328]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cfe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d06:	494f      	ldr	r1, [pc, #316]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d20:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	4946      	ldr	r1, [pc, #280]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d3c:	4b41      	ldr	r3, [pc, #260]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d42:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4a:	493e      	ldr	r1, [pc, #248]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d5e:	4b39      	ldr	r3, [pc, #228]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	4935      	ldr	r1, [pc, #212]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d80:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d8e:	492d      	ldr	r1, [pc, #180]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d011      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003da2:	4b28      	ldr	r3, [pc, #160]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003db0:	4924      	ldr	r1, [pc, #144]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dc0:	d101      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b18      	ldr	r3, [pc, #96]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df0:	4914      	ldr	r1, [pc, #80]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e04:	4b0f      	ldr	r3, [pc, #60]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e14:	490b      	ldr	r1, [pc, #44]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00f      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e38:	4902      	ldr	r1, [pc, #8]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e40:	e002      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e54:	4b8a      	ldr	r3, [pc, #552]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e64:	4986      	ldr	r1, [pc, #536]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e78:	4b81      	ldr	r3, [pc, #516]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e88:	497d      	ldr	r1, [pc, #500]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d006      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80d6 	beq.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ea4:	4b76      	ldr	r3, [pc, #472]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a75      	ldr	r2, [pc, #468]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fd faf2 	bl	8001498 <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003eb8:	f7fd faee 	bl	8001498 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	@ 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e195      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eca:	4b6d      	ldr	r3, [pc, #436]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11d      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003eea:	4b65      	ldr	r3, [pc, #404]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ef8:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003efe:	0e1b      	lsrs	r3, r3, #24
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	019a      	lsls	r2, r3, #6
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	4958      	ldr	r1, [pc, #352]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02e      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f50:	d129      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f52:	4b4b      	ldr	r3, [pc, #300]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f60:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f66:	0f1b      	lsrs	r3, r3, #28
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	019a      	lsls	r2, r3, #6
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	041b      	lsls	r3, r3, #16
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	493e      	ldr	r1, [pc, #248]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f94:	f023 021f 	bic.w	r2, r3, #31
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	4938      	ldr	r1, [pc, #224]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01d      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fb2:	4b33      	ldr	r3, [pc, #204]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb8:	0e1b      	lsrs	r3, r3, #24
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fc6:	0f1b      	lsrs	r3, r3, #28
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	019a      	lsls	r2, r3, #6
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	4926      	ldr	r1, [pc, #152]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	071b      	lsls	r3, r3, #28
 8004016:	491a      	ldr	r1, [pc, #104]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800401e:	4b18      	ldr	r3, [pc, #96]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a17      	ldr	r2, [pc, #92]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004024:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402a:	f7fd fa35 	bl	8001498 <HAL_GetTick>
 800402e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004032:	f7fd fa31 	bl	8001498 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b64      	cmp	r3, #100	@ 0x64
 800403e:	d901      	bls.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0d8      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004044:	4b0e      	ldr	r3, [pc, #56]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b01      	cmp	r3, #1
 8004054:	f040 80ce 	bne.w	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004058:	4b09      	ldr	r3, [pc, #36]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a08      	ldr	r2, [pc, #32]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004064:	f7fd fa18 	bl	8001498 <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800406a:	e00b      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800406c:	f7fd fa14 	bl	8001498 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b64      	cmp	r3, #100	@ 0x64
 8004078:	d904      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0bb      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004084:	4b5e      	ldr	r3, [pc, #376]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800408c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004090:	d0ec      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d02e      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d12a      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80040ba:	4b51      	ldr	r3, [pc, #324]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040c8:	4b4d      	ldr	r3, [pc, #308]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ce:	0f1b      	lsrs	r3, r3, #28
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	019a      	lsls	r2, r3, #6
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	071b      	lsls	r3, r3, #28
 80040ee:	4944      	ldr	r1, [pc, #272]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040f6:	4b42      	ldr	r3, [pc, #264]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	493d      	ldr	r1, [pc, #244]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004120:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004124:	d11d      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004126:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	0e1b      	lsrs	r3, r3, #24
 800412e:	f003 030f 	and.w	r3, r3, #15
 8004132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004134:	4b32      	ldr	r3, [pc, #200]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413a:	0f1b      	lsrs	r3, r3, #28
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	019a      	lsls	r2, r3, #6
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	041b      	lsls	r3, r3, #16
 800414e:	431a      	orrs	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	071b      	lsls	r3, r3, #28
 800415a:	4929      	ldr	r1, [pc, #164]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d028      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	0e1b      	lsrs	r3, r3, #24
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800417c:	4b20      	ldr	r3, [pc, #128]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	0c1b      	lsrs	r3, r3, #16
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	019a      	lsls	r2, r3, #6
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	431a      	orrs	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	061b      	lsls	r3, r3, #24
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	071b      	lsls	r3, r3, #28
 80041a2:	4917      	ldr	r1, [pc, #92]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041aa:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4911      	ldr	r1, [pc, #68]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80041c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041cc:	f7fd f964 	bl	8001498 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041d4:	f7fd f960 	bl	8001498 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	@ 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e007      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041e6:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f2:	d1ef      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3720      	adds	r7, #32
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023800 	.word	0x40023800

08004204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004204:	b084      	sub	sp, #16
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	f107 001c 	add.w	r0, r7, #28
 8004212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004216:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800421a:	2b01      	cmp	r3, #1
 800421c:	d121      	bne.n	8004262 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	4b21      	ldr	r3, [pc, #132]	@ (80042b4 <USB_CoreInit+0xb0>)
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f001 fae2 	bl	8005820 <USB_CoreReset>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	e010      	b.n	8004284 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f001 fad6 	bl	8005820 <USB_CoreReset>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004284:	7fbb      	ldrb	r3, [r7, #30]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10b      	bne.n	80042a2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f043 0206 	orr.w	r2, r3, #6
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f043 0220 	orr.w	r2, r3, #32
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ae:	b004      	add	sp, #16
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	ffbdffbf 	.word	0xffbdffbf

080042b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d165      	bne.n	8004398 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a41      	ldr	r2, [pc, #260]	@ (80043d4 <USB_SetTurnaroundTime+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d906      	bls.n	80042e2 <USB_SetTurnaroundTime+0x2a>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a40      	ldr	r2, [pc, #256]	@ (80043d8 <USB_SetTurnaroundTime+0x120>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d202      	bcs.n	80042e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042dc:	230f      	movs	r3, #15
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e062      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a3c      	ldr	r2, [pc, #240]	@ (80043d8 <USB_SetTurnaroundTime+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d306      	bcc.n	80042f8 <USB_SetTurnaroundTime+0x40>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a3b      	ldr	r2, [pc, #236]	@ (80043dc <USB_SetTurnaroundTime+0x124>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d202      	bcs.n	80042f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042f2:	230e      	movs	r3, #14
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e057      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a38      	ldr	r2, [pc, #224]	@ (80043dc <USB_SetTurnaroundTime+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d306      	bcc.n	800430e <USB_SetTurnaroundTime+0x56>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a37      	ldr	r2, [pc, #220]	@ (80043e0 <USB_SetTurnaroundTime+0x128>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d202      	bcs.n	800430e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004308:	230d      	movs	r3, #13
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e04c      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <USB_SetTurnaroundTime+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d306      	bcc.n	8004324 <USB_SetTurnaroundTime+0x6c>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <USB_SetTurnaroundTime+0x12c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800431e:	230c      	movs	r3, #12
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e041      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a2f      	ldr	r2, [pc, #188]	@ (80043e4 <USB_SetTurnaroundTime+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d906      	bls.n	800433a <USB_SetTurnaroundTime+0x82>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a2e      	ldr	r2, [pc, #184]	@ (80043e8 <USB_SetTurnaroundTime+0x130>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d802      	bhi.n	800433a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004334:	230b      	movs	r3, #11
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e036      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <USB_SetTurnaroundTime+0x130>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d906      	bls.n	8004350 <USB_SetTurnaroundTime+0x98>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <USB_SetTurnaroundTime+0x134>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d802      	bhi.n	8004350 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800434a:	230a      	movs	r3, #10
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e02b      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4a26      	ldr	r2, [pc, #152]	@ (80043ec <USB_SetTurnaroundTime+0x134>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d906      	bls.n	8004366 <USB_SetTurnaroundTime+0xae>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a25      	ldr	r2, [pc, #148]	@ (80043f0 <USB_SetTurnaroundTime+0x138>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d202      	bcs.n	8004366 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004360:	2309      	movs	r3, #9
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e020      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <USB_SetTurnaroundTime+0x138>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d306      	bcc.n	800437c <USB_SetTurnaroundTime+0xc4>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <USB_SetTurnaroundTime+0x13c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d802      	bhi.n	800437c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004376:	2308      	movs	r3, #8
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e015      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <USB_SetTurnaroundTime+0x13c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d906      	bls.n	8004392 <USB_SetTurnaroundTime+0xda>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a1c      	ldr	r2, [pc, #112]	@ (80043f8 <USB_SetTurnaroundTime+0x140>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d202      	bcs.n	8004392 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800438c:	2307      	movs	r3, #7
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e00a      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004392:	2306      	movs	r3, #6
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e007      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800439e:	2309      	movs	r3, #9
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e001      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043a4:	2309      	movs	r3, #9
 80043a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	00d8acbf 	.word	0x00d8acbf
 80043d8:	00e4e1c0 	.word	0x00e4e1c0
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	01067380 	.word	0x01067380
 80043e4:	011a499f 	.word	0x011a499f
 80043e8:	01312cff 	.word	0x01312cff
 80043ec:	014ca43f 	.word	0x014ca43f
 80043f0:	016e3600 	.word	0x016e3600
 80043f4:	01a6ab1f 	.word	0x01a6ab1f
 80043f8:	01e84800 	.word	0x01e84800

080043fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f043 0201 	orr.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d115      	bne.n	800448e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800446e:	200a      	movs	r0, #10
 8004470:	f7fd f81e 	bl	80014b0 <HAL_Delay>
      ms += 10U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	330a      	adds	r3, #10
 8004478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f001 f93f 	bl	80056fe <USB_GetMode>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d01e      	beq.n	80044c4 <USB_SetCurrentMode+0x84>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2bc7      	cmp	r3, #199	@ 0xc7
 800448a:	d9f0      	bls.n	800446e <USB_SetCurrentMode+0x2e>
 800448c:	e01a      	b.n	80044c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044a0:	200a      	movs	r0, #10
 80044a2:	f7fd f805 	bl	80014b0 <HAL_Delay>
      ms += 10U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	330a      	adds	r3, #10
 80044aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 f926 	bl	80056fe <USB_GetMode>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <USB_SetCurrentMode+0x84>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80044bc:	d9f0      	bls.n	80044a0 <USB_SetCurrentMode+0x60>
 80044be:	e001      	b.n	80044c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e005      	b.n	80044d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80044c8:	d101      	bne.n	80044ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d8:	b084      	sub	sp, #16
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e009      	b.n	800450c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3340      	adds	r3, #64	@ 0x40
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b0e      	cmp	r3, #14
 8004510:	d9f2      	bls.n	80044f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004512:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11c      	bne.n	8004554 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e005      	b.n	8004560 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800456c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004570:	2b01      	cmp	r3, #1
 8004572:	d10d      	bne.n	8004590 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800457c:	2100      	movs	r1, #0
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f968 	bl	8004854 <USB_SetDevSpeed>
 8004584:	e008      	b.n	8004598 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004586:	2101      	movs	r1, #1
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f963 	bl	8004854 <USB_SetDevSpeed>
 800458e:	e003      	b.n	8004598 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004590:	2103      	movs	r1, #3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f95e 	bl	8004854 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004598:	2110      	movs	r1, #16
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8fa 	bl	8004794 <USB_FlushTxFifo>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f924 	bl	80047f8 <USB_FlushRxFifo>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	461a      	mov	r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	e043      	b.n	800466c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045fa:	d118      	bne.n	800462e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460e:	461a      	mov	r2, r3
 8004610:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e013      	b.n	8004640 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004624:	461a      	mov	r2, r3
 8004626:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	e008      	b.n	8004640 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463a:	461a      	mov	r2, r3
 800463c:	2300      	movs	r3, #0
 800463e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800465e:	461a      	mov	r2, r3
 8004660:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	3301      	adds	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004670:	461a      	mov	r2, r3
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4293      	cmp	r3, r2
 8004676:	d3b5      	bcc.n	80045e4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	e043      	b.n	8004706 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004694:	d118      	bne.n	80046c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10a      	bne.n	80046b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e013      	b.n	80046da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	015a      	lsls	r2, r3, #5
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4413      	add	r3, r2
 80046ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046be:	461a      	mov	r2, r3
 80046c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e008      	b.n	80046da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	461a      	mov	r2, r3
 80046d6:	2300      	movs	r3, #0
 80046d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e6:	461a      	mov	r2, r3
 80046e8:	2300      	movs	r3, #0
 80046ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f8:	461a      	mov	r2, r3
 80046fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3301      	adds	r3, #1
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800470a:	461a      	mov	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4293      	cmp	r3, r2
 8004710:	d3b5      	bcc.n	800467e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004724:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004732:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004734:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	f043 0210 	orr.w	r2, r3, #16
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699a      	ldr	r2, [r3, #24]
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <USB_DevInit+0x2b4>)
 800474e:	4313      	orrs	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004754:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f043 0208 	orr.w	r2, r3, #8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004768:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800476c:	2b01      	cmp	r3, #1
 800476e:	d105      	bne.n	800477c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <USB_DevInit+0x2b8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800477c:	7dfb      	ldrb	r3, [r7, #23]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004788:	b004      	add	sp, #16
 800478a:	4770      	bx	lr
 800478c:	803c3800 	.word	0x803c3800
 8004790:	40000004 	.word	0x40000004

08004794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3301      	adds	r3, #1
 80047a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ae:	d901      	bls.n	80047b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e01b      	b.n	80047ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	daf2      	bge.n	80047a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	019b      	lsls	r3, r3, #6
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047d8:	d901      	bls.n	80047de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e006      	b.n	80047ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0320 	and.w	r3, r3, #32
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d0f0      	beq.n	80047cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004810:	d901      	bls.n	8004816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e018      	b.n	8004848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	daf2      	bge.n	8004804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2210      	movs	r2, #16
 8004826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
 800482c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004834:	d901      	bls.n	800483a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e006      	b.n	8004848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d0f0      	beq.n	8004828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0306 	and.w	r3, r3, #6
 800489e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
 80048aa:	e00a      	b.n	80048c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d002      	beq.n	80048b8 <USB_GetDevSpeed+0x32>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b06      	cmp	r3, #6
 80048b6:	d102      	bne.n	80048be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048b8:	2302      	movs	r3, #2
 80048ba:	75fb      	strb	r3, [r7, #23]
 80048bc:	e001      	b.n	80048c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048be:	230f      	movs	r3, #15
 80048c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d139      	bne.n	8004960 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	2101      	movs	r1, #1
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800490a:	4313      	orrs	r3, r2
 800490c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d153      	bne.n	80049cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	791b      	ldrb	r3, [r3, #4]
 800493e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004940:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	059b      	lsls	r3, r3, #22
 8004946:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004948:	431a      	orrs	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	0159      	lsls	r1, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	440b      	add	r3, r1
 8004952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004956:	4619      	mov	r1, r3
 8004958:	4b20      	ldr	r3, [pc, #128]	@ (80049dc <USB_ActivateEndpoint+0x10c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
 800495e:	e035      	b.n	80049cc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	2101      	movs	r1, #1
 8004972:	fa01 f303 	lsl.w	r3, r1, r3
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	68f9      	ldr	r1, [r7, #12]
 800497a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800497e:	4313      	orrs	r3, r2
 8004980:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d119      	bne.n	80049cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	791b      	ldrb	r3, [r3, #4]
 80049b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049b4:	430b      	orrs	r3, r1
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	0159      	lsls	r1, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	440b      	add	r3, r1
 80049c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c4:	4619      	mov	r1, r3
 80049c6:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <USB_ActivateEndpoint+0x10c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	10008000 	.word	0x10008000

080049e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d161      	bne.n	8004ac0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a12:	d11f      	bne.n	8004a54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a74:	4013      	ands	r3, r2
 8004a76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	2101      	movs	r1, #1
 8004a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	0159      	lsls	r1, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	440b      	add	r3, r1
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4b35      	ldr	r3, [pc, #212]	@ (8004b90 <USB_DeactivateEndpoint+0x1b0>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]
 8004abe:	e060      	b.n	8004b82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad6:	d11f      	bne.n	8004b18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004af2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004af6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	041b      	lsls	r3, r3, #16
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	43db      	mvns	r3, r3
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	440b      	add	r3, r1
 8004b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <USB_DeactivateEndpoint+0x1b4>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	ec337800 	.word	0xec337800
 8004b94:	eff37800 	.word	0xeff37800

08004b98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	@ 0x28
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 8185 	bne.w	8004ec4 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d132      	bne.n	8004c28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	0159      	lsls	r1, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	440b      	add	r3, r1
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4ba7      	ldr	r3, [pc, #668]	@ (8004e7c <USB_EPStartXfer+0x2e4>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004bfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	0159      	lsls	r1, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	440b      	add	r3, r1
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4b97      	ldr	r3, [pc, #604]	@ (8004e80 <USB_EPStartXfer+0x2e8>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	610b      	str	r3, [r1, #16]
 8004c26:	e097      	b.n	8004d58 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	0159      	lsls	r1, r3, #5
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c42:	4619      	mov	r1, r3
 8004c44:	4b8e      	ldr	r3, [pc, #568]	@ (8004e80 <USB_EPStartXfer+0x2e8>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c56:	691a      	ldr	r2, [r3, #16]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	440b      	add	r3, r1
 8004c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c64:	4619      	mov	r1, r3
 8004c66:	4b85      	ldr	r3, [pc, #532]	@ (8004e7c <USB_EPStartXfer+0x2e4>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d11a      	bne.n	8004ca8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d903      	bls.n	8004c86 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ca4:	6113      	str	r3, [r2, #16]
 8004ca6:	e044      	b.n	8004d32 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	8afb      	ldrh	r3, [r7, #22]
 8004cce:	04d9      	lsls	r1, r3, #19
 8004cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8004e84 <USB_EPStartXfer+0x2ec>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	0148      	lsls	r0, r1, #5
 8004cd8:	69f9      	ldr	r1, [r7, #28]
 8004cda:	4401      	add	r1, r0
 8004cdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	791b      	ldrb	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d122      	bne.n	8004d32 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d06:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d0a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	8afb      	ldrh	r3, [r7, #22]
 8004d1c:	075b      	lsls	r3, r3, #29
 8004d1e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004d22:	69b9      	ldr	r1, [r7, #24]
 8004d24:	0148      	lsls	r0, r1, #5
 8004d26:	69f9      	ldr	r1, [r7, #28]
 8004d28:	4401      	add	r1, r0
 8004d2a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	69b9      	ldr	r1, [r7, #24]
 8004d4a:	0148      	lsls	r0, r1, #5
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	4401      	add	r1, r0
 8004d50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d54:	4313      	orrs	r3, r2
 8004d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d14b      	bne.n	8004df6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	791b      	ldrb	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d128      	bne.n	8004dd4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00f      	b.n	8004dd4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	e169      	b.n	80050ca <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	0151      	lsls	r1, r2, #5
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	440a      	add	r2, r1
 8004e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e14:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	791b      	ldrb	r3, [r3, #4]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d015      	beq.n	8004e4a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8151 	beq.w	80050ca <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	69f9      	ldr	r1, [r7, #28]
 8004e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e44:	4313      	orrs	r3, r2
 8004e46:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e48:	e13f      	b.n	80050ca <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d116      	bne.n	8004e88 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	e015      	b.n	8004ea8 <USB_EPStartXfer+0x310>
 8004e7c:	e007ffff 	.word	0xe007ffff
 8004e80:	fff80000 	.word	0xfff80000
 8004e84:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	68d9      	ldr	r1, [r3, #12]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	b298      	uxth	r0, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4603      	mov	r3, r0
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f9b9 	bl	8005234 <USB_WritePacket>
 8004ec2:	e102      	b.n	80050ca <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	0159      	lsls	r1, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	440b      	add	r3, r1
 8004eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4b7c      	ldr	r3, [pc, #496]	@ (80050d4 <USB_EPStartXfer+0x53c>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	0159      	lsls	r1, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	440b      	add	r3, r1
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	4619      	mov	r1, r3
 8004f02:	4b75      	ldr	r3, [pc, #468]	@ (80050d8 <USB_EPStartXfer+0x540>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d12f      	bne.n	8004f6e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	0148      	lsls	r0, r1, #5
 8004f40:	69f9      	ldr	r1, [r7, #28]
 8004f42:	4401      	add	r1, r0
 8004f44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f6a:	6113      	str	r3, [r2, #16]
 8004f6c:	e05f      	b.n	800502e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d123      	bne.n	8004fbe <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	0148      	lsls	r0, r1, #5
 8004f90:	69f9      	ldr	r1, [r7, #28]
 8004f92:	4401      	add	r1, r0
 8004f94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	0151      	lsls	r1, r2, #5
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fba:	6113      	str	r3, [r2, #16]
 8004fbc:	e037      	b.n	800502e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	8afa      	ldrh	r2, [r7, #22]
 8004fda:	fb03 f202 	mul.w	r2, r3, r2
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fee:	691a      	ldr	r2, [r3, #16]
 8004ff0:	8afb      	ldrh	r3, [r7, #22]
 8004ff2:	04d9      	lsls	r1, r3, #19
 8004ff4:	4b39      	ldr	r3, [pc, #228]	@ (80050dc <USB_EPStartXfer+0x544>)
 8004ff6:	400b      	ands	r3, r1
 8004ff8:	69b9      	ldr	r1, [r7, #24]
 8004ffa:	0148      	lsls	r0, r1, #5
 8004ffc:	69f9      	ldr	r1, [r7, #28]
 8004ffe:	4401      	add	r1, r0
 8005000:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005004:	4313      	orrs	r3, r2
 8005006:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501e:	69b9      	ldr	r1, [r7, #24]
 8005020:	0148      	lsls	r0, r1, #5
 8005022:	69f9      	ldr	r1, [r7, #28]
 8005024:	4401      	add	r1, r0
 8005026:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800502a:	4313      	orrs	r3, r2
 800502c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10d      	bne.n	8005050 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d009      	beq.n	8005050 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	68d9      	ldr	r1, [r3, #12]
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504c:	460a      	mov	r2, r1
 800504e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	791b      	ldrb	r3, [r3, #4]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d128      	bne.n	80050aa <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005064:	2b00      	cmp	r3, #0
 8005066:	d110      	bne.n	800508a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	e00f      	b.n	80050aa <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	0151      	lsls	r1, r2, #5
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	440a      	add	r2, r1
 80050c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	fff80000 	.word	0xfff80000
 80050d8:	e007ffff 	.word	0xe007ffff
 80050dc:	1ff80000 	.word	0x1ff80000

080050e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d14a      	bne.n	8005194 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005116:	f040 8086 	bne.w	8005226 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005138:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800513c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	7812      	ldrb	r2, [r2, #0]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800515c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800516e:	4293      	cmp	r3, r2
 8005170:	d902      	bls.n	8005178 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
          break;
 8005176:	e056      	b.n	8005226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800518c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005190:	d0e7      	beq.n	8005162 <USB_EPStopXfer+0x82>
 8005192:	e048      	b.n	8005226 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ac:	d13b      	bne.n	8005226 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005202:	4293      	cmp	r3, r2
 8005204:	d902      	bls.n	800520c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
          break;
 800520a:	e00c      	b.n	8005226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005224:	d0e7      	beq.n	80051f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	@ 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4611      	mov	r1, r2
 8005240:	461a      	mov	r2, r3
 8005242:	460b      	mov	r3, r1
 8005244:	71fb      	strb	r3, [r7, #7]
 8005246:	4613      	mov	r3, r2
 8005248:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d123      	bne.n	80052a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800525a:	88bb      	ldrh	r3, [r7, #4]
 800525c:	3303      	adds	r3, #3
 800525e:	089b      	lsrs	r3, r3, #2
 8005260:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e018      	b.n	800529a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	031a      	lsls	r2, r3, #12
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005274:	461a      	mov	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	3301      	adds	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3e2      	bcc.n	8005268 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3724      	adds	r7, #36	@ 0x24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b08b      	sub	sp, #44	@ 0x2c
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	e014      	b.n	8005306 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	3301      	adds	r3, #1
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	3301      	adds	r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	3301      	adds	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	3301      	adds	r3, #1
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d3e6      	bcc.n	80052dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01e      	beq.n	8005352 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800531e:	461a      	mov	r2, r3
 8005320:	f107 0310 	add.w	r3, r7, #16
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	701a      	strb	r2, [r3, #0]
      i++;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	3301      	adds	r3, #1
 800533e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	3301      	adds	r3, #1
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005346:	8bfb      	ldrh	r3, [r7, #30]
 8005348:	3b01      	subs	r3, #1
 800534a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800534c:	8bfb      	ldrh	r3, [r7, #30]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ea      	bne.n	8005328 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005354:	4618      	mov	r0, r3
 8005356:	372c      	adds	r7, #44	@ 0x2c
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d12c      	bne.n	80053d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db12      	blt.n	80053b4 <USB_EPSetStall+0x54>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e02b      	b.n	800542e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	db12      	blt.n	800540e <USB_EPSetStall+0xae>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00f      	beq.n	800540e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005408:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800540c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800542c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d128      	bne.n	80054aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005472:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005476:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d003      	beq.n	8005488 <USB_EPClearStall+0x4c>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d138      	bne.n	80054fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e027      	b.n	80054fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	791b      	ldrb	r3, [r3, #4]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d003      	beq.n	80054da <USB_EPClearStall+0x9e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	791b      	ldrb	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d10f      	bne.n	80054fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005526:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800552a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005582:	f023 0302 	bic.w	r3, r3, #2
 8005586:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055b0:	f023 0303 	bic.w	r3, r3, #3
 80055b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f0:	68fb      	ldr	r3, [r7, #12]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0c1b      	lsrs	r3, r3, #16
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4013      	ands	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	b29b      	uxth	r3, r3
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005694:	68bb      	ldr	r3, [r7, #8]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	fa22 f303 	lsr.w	r3, r2, r3
 80056d2:	01db      	lsls	r3, r3, #7
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056f0:	68bb      	ldr	r3, [r7, #8]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005736:	4619      	mov	r1, r3
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <USB_ActivateSetup+0x44>)
 800573a:	4013      	ands	r3, r2
 800573c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	fffff800 	.word	0xfffff800

08005764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	333c      	adds	r3, #60	@ 0x3c
 800577a:	3304      	adds	r3, #4
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4a26      	ldr	r2, [pc, #152]	@ (800581c <USB_EP0_OutStart+0xb8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d90a      	bls.n	800579e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005798:	d101      	bne.n	800579e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e037      	b.n	800580e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	2300      	movs	r3, #0
 80057a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057cc:	f043 0318 	orr.w	r3, r3, #24
 80057d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80057e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057e6:	7afb      	ldrb	r3, [r7, #11]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d10f      	bne.n	800580c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005806:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800580a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	4f54300a 	.word	0x4f54300a

08005820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005838:	d901      	bls.n	800583e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e022      	b.n	8005884 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	daf2      	bge.n	800582c <USB_CoreReset+0xc>

  count = 10U;
 8005846:	230a      	movs	r3, #10
 8005848:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800584a:	e002      	b.n	8005852 <USB_CoreReset+0x32>
  {
    count--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3b01      	subs	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f9      	bne.n	800584c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f043 0201 	orr.w	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005870:	d901      	bls.n	8005876 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e006      	b.n	8005884 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d0f0      	beq.n	8005864 <USB_CoreReset+0x44>

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800589c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80058a0:	f002 fdc6 	bl	8008430 <malloc>
 80058a4:	4603      	mov	r3, r0
 80058a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	32b0      	adds	r2, #176	@ 0xb0
 80058b8:	2100      	movs	r1, #0
 80058ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058be:	2302      	movs	r3, #2
 80058c0:	e0d4      	b.n	8005a6c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80058c2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80058c6:	2100      	movs	r1, #0
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f002 fea3 	bl	8008614 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	32b0      	adds	r2, #176	@ 0xb0
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	32b0      	adds	r2, #176	@ 0xb0
 80058e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	7c1b      	ldrb	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d138      	bne.n	800596c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005a74 <USBD_CDC_Init+0x1e4>)
 80058fc:	7819      	ldrb	r1, [r3, #0]
 80058fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005902:	2202      	movs	r2, #2
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f002 fbf0 	bl	80080ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800590a:	4b5a      	ldr	r3, [pc, #360]	@ (8005a74 <USBD_CDC_Init+0x1e4>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 020f 	and.w	r2, r3, #15
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3323      	adds	r3, #35	@ 0x23
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005924:	4b54      	ldr	r3, [pc, #336]	@ (8005a78 <USBD_CDC_Init+0x1e8>)
 8005926:	7819      	ldrb	r1, [r3, #0]
 8005928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800592c:	2202      	movs	r2, #2
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fbdb 	bl	80080ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005934:	4b50      	ldr	r3, [pc, #320]	@ (8005a78 <USBD_CDC_Init+0x1e8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 020f 	and.w	r2, r3, #15
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800594c:	2201      	movs	r2, #1
 800594e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005950:	4b4a      	ldr	r3, [pc, #296]	@ (8005a7c <USBD_CDC_Init+0x1ec>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	331c      	adds	r3, #28
 8005966:	2210      	movs	r2, #16
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e035      	b.n	80059d8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800596c:	4b41      	ldr	r3, [pc, #260]	@ (8005a74 <USBD_CDC_Init+0x1e4>)
 800596e:	7819      	ldrb	r1, [r3, #0]
 8005970:	2340      	movs	r3, #64	@ 0x40
 8005972:	2202      	movs	r2, #2
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f002 fbb8 	bl	80080ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800597a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a74 <USBD_CDC_Init+0x1e4>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f003 020f 	and.w	r2, r3, #15
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	440b      	add	r3, r1
 800598e:	3323      	adds	r3, #35	@ 0x23
 8005990:	2201      	movs	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005994:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <USBD_CDC_Init+0x1e8>)
 8005996:	7819      	ldrb	r1, [r3, #0]
 8005998:	2340      	movs	r3, #64	@ 0x40
 800599a:	2202      	movs	r2, #2
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f002 fba4 	bl	80080ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059a2:	4b35      	ldr	r3, [pc, #212]	@ (8005a78 <USBD_CDC_Init+0x1e8>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f003 020f 	and.w	r2, r3, #15
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80059ba:	2201      	movs	r2, #1
 80059bc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80059be:	4b2f      	ldr	r3, [pc, #188]	@ (8005a7c <USBD_CDC_Init+0x1ec>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f003 020f 	and.w	r2, r3, #15
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	331c      	adds	r3, #28
 80059d4:	2210      	movs	r2, #16
 80059d6:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059d8:	4b28      	ldr	r3, [pc, #160]	@ (8005a7c <USBD_CDC_Init+0x1ec>)
 80059da:	7819      	ldrb	r1, [r3, #0]
 80059dc:	2308      	movs	r3, #8
 80059de:	2203      	movs	r2, #3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f002 fb82 	bl	80080ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059e6:	4b25      	ldr	r3, [pc, #148]	@ (8005a7c <USBD_CDC_Init+0x1ec>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3323      	adds	r3, #35	@ 0x23
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	33b0      	adds	r3, #176	@ 0xb0
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8005a36:	2302      	movs	r3, #2
 8005a38:	e018      	b.n	8005a6c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	7c1b      	ldrb	r3, [r3, #16]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <USBD_CDC_Init+0x1e8>)
 8005a44:	7819      	ldrb	r1, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f002 fc39 	bl	80082c8 <USBD_LL_PrepareReceive>
 8005a56:	e008      	b.n	8005a6a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a58:	4b07      	ldr	r3, [pc, #28]	@ (8005a78 <USBD_CDC_Init+0x1e8>)
 8005a5a:	7819      	ldrb	r1, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a62:	2340      	movs	r3, #64	@ 0x40
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fc2f 	bl	80082c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20000093 	.word	0x20000093
 8005a78:	20000094 	.word	0x20000094
 8005a7c:	20000095 	.word	0x20000095

08005a80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b78 <USBD_CDC_DeInit+0xf8>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f002 fb4f 	bl	8008136 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a98:	4b37      	ldr	r3, [pc, #220]	@ (8005b78 <USBD_CDC_DeInit+0xf8>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	f003 020f 	and.w	r2, r3, #15
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	3323      	adds	r3, #35	@ 0x23
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005ab2:	4b32      	ldr	r3, [pc, #200]	@ (8005b7c <USBD_CDC_DeInit+0xfc>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 fb3c 	bl	8008136 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005abe:	4b2f      	ldr	r3, [pc, #188]	@ (8005b7c <USBD_CDC_DeInit+0xfc>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 020f 	and.w	r2, r3, #15
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ada:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <USBD_CDC_DeInit+0x100>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f002 fb28 	bl	8008136 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ae6:	4b26      	ldr	r3, [pc, #152]	@ (8005b80 <USBD_CDC_DeInit+0x100>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	3323      	adds	r3, #35	@ 0x23
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b00:	4b1f      	ldr	r3, [pc, #124]	@ (8005b80 <USBD_CDC_DeInit+0x100>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	331c      	adds	r3, #28
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	32b0      	adds	r2, #176	@ 0xb0
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01f      	beq.n	8005b6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	33b0      	adds	r3, #176	@ 0xb0
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	32b0      	adds	r2, #176	@ 0xb0
 8005b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f002 fc76 	bl	8008440 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	32b0      	adds	r2, #176	@ 0xb0
 8005b5e:	2100      	movs	r1, #0
 8005b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000093 	.word	0x20000093
 8005b7c:	20000094 	.word	0x20000094
 8005b80:	20000095 	.word	0x20000095

08005b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	32b0      	adds	r2, #176	@ 0xb0
 8005b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e0bf      	b.n	8005d34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d050      	beq.n	8005c62 <USBD_CDC_Setup+0xde>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	f040 80af 	bne.w	8005d24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	88db      	ldrh	r3, [r3, #6]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d03a      	beq.n	8005c44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b25b      	sxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da1b      	bge.n	8005c10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	33b0      	adds	r3, #176	@ 0xb0
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	88d2      	ldrh	r2, [r2, #6]
 8005bf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	88db      	ldrh	r3, [r3, #6]
 8005bfa:	2b07      	cmp	r3, #7
 8005bfc:	bf28      	it	cs
 8005bfe:	2307      	movcs	r3, #7
 8005c00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	89fa      	ldrh	r2, [r7, #14]
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fdd1 	bl	80077b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c0e:	e090      	b.n	8005d32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	785a      	ldrb	r2, [r3, #1]
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	88db      	ldrh	r3, [r3, #6]
 8005c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c20:	d803      	bhi.n	8005c2a <USBD_CDC_Setup+0xa6>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	88db      	ldrh	r3, [r3, #6]
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	e000      	b.n	8005c2c <USBD_CDC_Setup+0xa8>
 8005c2a:	2240      	movs	r2, #64	@ 0x40
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c32:	6939      	ldr	r1, [r7, #16]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f001 fde6 	bl	800780e <USBD_CtlPrepareRx>
      break;
 8005c42:	e076      	b.n	8005d32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	33b0      	adds	r3, #176	@ 0xb0
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	7850      	ldrb	r0, [r2, #1]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	4798      	blx	r3
      break;
 8005c60:	e067      	b.n	8005d32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b0b      	cmp	r3, #11
 8005c68:	d851      	bhi.n	8005d0e <USBD_CDC_Setup+0x18a>
 8005c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <USBD_CDC_Setup+0xec>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005ca1 	.word	0x08005ca1
 8005c74:	08005d1d 	.word	0x08005d1d
 8005c78:	08005d0f 	.word	0x08005d0f
 8005c7c:	08005d0f 	.word	0x08005d0f
 8005c80:	08005d0f 	.word	0x08005d0f
 8005c84:	08005d0f 	.word	0x08005d0f
 8005c88:	08005d0f 	.word	0x08005d0f
 8005c8c:	08005d0f 	.word	0x08005d0f
 8005c90:	08005d0f 	.word	0x08005d0f
 8005c94:	08005d0f 	.word	0x08005d0f
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005cf5 	.word	0x08005cf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b03      	cmp	r3, #3
 8005caa:	d107      	bne.n	8005cbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005cac:	f107 030a 	add.w	r3, r7, #10
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fd7b 	bl	80077b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cba:	e032      	b.n	8005d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cbc:	6839      	ldr	r1, [r7, #0]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fcf9 	bl	80076b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc8:	e02b      	b.n	8005d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d107      	bne.n	8005ce6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005cd6:	f107 030d 	add.w	r3, r7, #13
 8005cda:	2201      	movs	r2, #1
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 fd66 	bl	80077b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ce4:	e01d      	b.n	8005d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f001 fce4 	bl	80076b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cf2:	e016      	b.n	8005d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d00f      	beq.n	8005d20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 fcd7 	bl	80076b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d0c:	e008      	b.n	8005d20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 fcd0 	bl	80076b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d16:	2303      	movs	r3, #3
 8005d18:	75fb      	strb	r3, [r7, #23]
          break;
 8005d1a:	e002      	b.n	8005d22 <USBD_CDC_Setup+0x19e>
          break;
 8005d1c:	bf00      	nop
 8005d1e:	e008      	b.n	8005d32 <USBD_CDC_Setup+0x1ae>
          break;
 8005d20:	bf00      	nop
      }
      break;
 8005d22:	e006      	b.n	8005d32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fcc5 	bl	80076b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d30:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	32b0      	adds	r2, #176	@ 0xb0
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e065      	b.n	8005e32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	32b0      	adds	r2, #176	@ 0xb0
 8005d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	3314      	adds	r3, #20
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d02f      	beq.n	8005df0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3314      	adds	r3, #20
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	78fb      	ldrb	r3, [r7, #3]
 8005da8:	f003 010f 	and.w	r1, r3, #15
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	460b      	mov	r3, r1
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	440b      	add	r3, r1
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4403      	add	r3, r0
 8005db8:	331c      	adds	r3, #28
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d112      	bne.n	8005df0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3314      	adds	r3, #20
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005de2:	78f9      	ldrb	r1, [r7, #3]
 8005de4:	2300      	movs	r3, #0
 8005de6:	2200      	movs	r2, #0
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f002 fa4c 	bl	8008286 <USBD_LL_Transmit>
 8005dee:	e01f      	b.n	8005e30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	33b0      	adds	r3, #176	@ 0xb0
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d010      	beq.n	8005e30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	33b0      	adds	r3, #176	@ 0xb0
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005e2c:	78fa      	ldrb	r2, [r7, #3]
 8005e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	32b0      	adds	r2, #176	@ 0xb0
 8005e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	32b0      	adds	r2, #176	@ 0xb0
 8005e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e01a      	b.n	8005ea2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f002 fa4a 	bl	800830a <USBD_LL_GetRxDataSize>
 8005e76:	4602      	mov	r2, r0
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	33b0      	adds	r3, #176	@ 0xb0
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	32b0      	adds	r2, #176	@ 0xb0
 8005ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e024      	b.n	8005f16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	33b0      	adds	r3, #176	@ 0xb0
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d019      	beq.n	8005f14 <USBD_CDC_EP0_RxReady+0x6a>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005ee6:	2bff      	cmp	r3, #255	@ 0xff
 8005ee8:	d014      	beq.n	8005f14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	33b0      	adds	r3, #176	@ 0xb0
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	22ff      	movs	r2, #255	@ 0xff
 8005f10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f28:	2182      	movs	r1, #130	@ 0x82
 8005f2a:	4818      	ldr	r0, [pc, #96]	@ (8005f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f2c:	f000 fd62 	bl	80069f4 <USBD_GetEpDesc>
 8005f30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f32:	2101      	movs	r1, #1
 8005f34:	4815      	ldr	r0, [pc, #84]	@ (8005f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f36:	f000 fd5d 	bl	80069f4 <USBD_GetEpDesc>
 8005f3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f3c:	2181      	movs	r1, #129	@ 0x81
 8005f3e:	4813      	ldr	r0, [pc, #76]	@ (8005f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f40:	f000 fd58 	bl	80069f4 <USBD_GetEpDesc>
 8005f44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f60:	711a      	strb	r2, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f74:	711a      	strb	r2, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2243      	movs	r2, #67	@ 0x43
 8005f7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f80:	4b02      	ldr	r3, [pc, #8]	@ (8005f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000050 	.word	0x20000050

08005f90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f98:	2182      	movs	r1, #130	@ 0x82
 8005f9a:	4818      	ldr	r0, [pc, #96]	@ (8005ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f9c:	f000 fd2a 	bl	80069f4 <USBD_GetEpDesc>
 8005fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4815      	ldr	r0, [pc, #84]	@ (8005ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fa6:	f000 fd25 	bl	80069f4 <USBD_GetEpDesc>
 8005faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fac:	2181      	movs	r1, #129	@ 0x81
 8005fae:	4813      	ldr	r0, [pc, #76]	@ (8005ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005fb0:	f000 fd20 	bl	80069f4 <USBD_GetEpDesc>
 8005fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	711a      	strb	r2, [r3, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f042 0202 	orr.w	r2, r2, #2
 8005fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d006      	beq.n	8005fea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	711a      	strb	r2, [r3, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f042 0202 	orr.w	r2, r2, #2
 8005fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2243      	movs	r2, #67	@ 0x43
 8005fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ff0:	4b02      	ldr	r3, [pc, #8]	@ (8005ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000050 	.word	0x20000050

08006000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006008:	2182      	movs	r1, #130	@ 0x82
 800600a:	4818      	ldr	r0, [pc, #96]	@ (800606c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800600c:	f000 fcf2 	bl	80069f4 <USBD_GetEpDesc>
 8006010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006012:	2101      	movs	r1, #1
 8006014:	4815      	ldr	r0, [pc, #84]	@ (800606c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006016:	f000 fced 	bl	80069f4 <USBD_GetEpDesc>
 800601a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800601c:	2181      	movs	r1, #129	@ 0x81
 800601e:	4813      	ldr	r0, [pc, #76]	@ (800606c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006020:	f000 fce8 	bl	80069f4 <USBD_GetEpDesc>
 8006024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2210      	movs	r2, #16
 8006030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	2200      	movs	r2, #0
 800603c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006040:	711a      	strb	r2, [r3, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d006      	beq.n	800605a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006054:	711a      	strb	r2, [r3, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2243      	movs	r2, #67	@ 0x43
 800605e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006060:	4b02      	ldr	r3, [pc, #8]	@ (800606c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000050 	.word	0x20000050

08006070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	220a      	movs	r2, #10
 800607c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800607e:	4b03      	ldr	r3, [pc, #12]	@ (800608c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	2000000c 	.word	0x2000000c

08006090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e009      	b.n	80060b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	33b0      	adds	r3, #176	@ 0xb0
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	32b0      	adds	r2, #176	@ 0xb0
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e008      	b.n	80060fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	371c      	adds	r7, #28
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	32b0      	adds	r2, #176	@ 0xb0
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	e004      	b.n	8006136 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	32b0      	adds	r2, #176	@ 0xb0
 8006156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006166:	2303      	movs	r3, #3
 8006168:	e025      	b.n	80061b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006170:	2b00      	cmp	r3, #0
 8006172:	d11f      	bne.n	80061b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2201      	movs	r2, #1
 8006178:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800617c:	4b10      	ldr	r3, [pc, #64]	@ (80061c0 <USBD_CDC_TransmitPacket+0x7c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4403      	add	r3, r0
 8006196:	3314      	adds	r3, #20
 8006198:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800619a:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <USBD_CDC_TransmitPacket+0x7c>)
 800619c:	7819      	ldrb	r1, [r3, #0]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f002 f86b 	bl	8008286 <USBD_LL_Transmit>

    ret = USBD_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000093 	.word	0x20000093

080061c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32b0      	adds	r2, #176	@ 0xb0
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	32b0      	adds	r2, #176	@ 0xb0
 80061e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e018      	b.n	8006224 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	7c1b      	ldrb	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10a      	bne.n	8006210 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061fa:	4b0c      	ldr	r3, [pc, #48]	@ (800622c <USBD_CDC_ReceivePacket+0x68>)
 80061fc:	7819      	ldrb	r1, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 f85d 	bl	80082c8 <USBD_LL_PrepareReceive>
 800620e:	e008      	b.n	8006222 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006210:	4b06      	ldr	r3, [pc, #24]	@ (800622c <USBD_CDC_ReceivePacket+0x68>)
 8006212:	7819      	ldrb	r1, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800621a:	2340      	movs	r3, #64	@ 0x40
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f002 f853 	bl	80082c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000094 	.word	0x20000094

08006230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	e01f      	b.n	8006288 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	79fa      	ldrb	r2, [r7, #7]
 800627a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f001 fecd 	bl	800801c <USBD_LL_Init>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e025      	b.n	80062f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	32ae      	adds	r2, #174	@ 0xae
 80062ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32ae      	adds	r2, #174	@ 0xae
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	f107 020e 	add.w	r2, r7, #14
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	4602      	mov	r2, r0
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fed5 	bl	80080b4 <USBD_LL_Start>
 800630a:	4603      	mov	r3, r0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	460b      	mov	r3, r1
 8006334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	78fa      	ldrb	r2, [r7, #3]
 800634e:	4611      	mov	r1, r2
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	4611      	mov	r1, r2
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 f94a 	bl	8007642 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d01a      	beq.n	8006408 <USBD_LL_SetupStage+0x72>
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d822      	bhi.n	800641c <USBD_LL_SetupStage+0x86>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <USBD_LL_SetupStage+0x4a>
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d00a      	beq.n	80063f4 <USBD_LL_SetupStage+0x5e>
 80063de:	e01d      	b.n	800641c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fb75 	bl	8006ad8 <USBD_StdDevReq>
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
      break;
 80063f2:	e020      	b.n	8006436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fbdd 	bl	8006bbc <USBD_StdItfReq>
 8006402:	4603      	mov	r3, r0
 8006404:	73fb      	strb	r3, [r7, #15]
      break;
 8006406:	e016      	b.n	8006436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fc3f 	bl	8006c94 <USBD_StdEPReq>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
      break;
 800641a:	e00c      	b.n	8006436 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4619      	mov	r1, r3
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 fea2 	bl	8008174 <USBD_LL_StallEP>
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	bf00      	nop
  }

  return ret;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	460b      	mov	r3, r1
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d177      	bne.n	8006548 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800645e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006466:	2b03      	cmp	r3, #3
 8006468:	f040 80a1 	bne.w	80065ae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	8992      	ldrh	r2, [r2, #12]
 8006474:	4293      	cmp	r3, r2
 8006476:	d91c      	bls.n	80064b2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	8992      	ldrh	r2, [r2, #12]
 8006480:	1a9a      	subs	r2, r3, r2
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	8992      	ldrh	r2, [r2, #12]
 800648e:	441a      	add	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6919      	ldr	r1, [r3, #16]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	899b      	ldrh	r3, [r3, #12]
 800649c:	461a      	mov	r2, r3
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	bf38      	it	cc
 80064a6:	4613      	movcc	r3, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f001 f9d0 	bl	8007850 <USBD_CtlContinueRx>
 80064b0:	e07d      	b.n	80065ae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d014      	beq.n	80064ea <USBD_LL_DataOutStage+0xaa>
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d81d      	bhi.n	8006500 <USBD_LL_DataOutStage+0xc0>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <USBD_LL_DataOutStage+0x8e>
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d003      	beq.n	80064d4 <USBD_LL_DataOutStage+0x94>
 80064cc:	e018      	b.n	8006500 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75bb      	strb	r3, [r7, #22]
            break;
 80064d2:	e018      	b.n	8006506 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fa6e 	bl	80069c0 <USBD_CoreFindIF>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75bb      	strb	r3, [r7, #22]
            break;
 80064e8:	e00d      	b.n	8006506 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fa70 	bl	80069da <USBD_CoreFindEP>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75bb      	strb	r3, [r7, #22]
            break;
 80064fe:	e002      	b.n	8006506 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	75bb      	strb	r3, [r7, #22]
            break;
 8006504:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006506:	7dbb      	ldrb	r3, [r7, #22]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d119      	bne.n	8006540 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b03      	cmp	r3, #3
 8006516:	d113      	bne.n	8006540 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006518:	7dba      	ldrb	r2, [r7, #22]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	32ae      	adds	r2, #174	@ 0xae
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006528:	7dba      	ldrb	r2, [r7, #22]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006530:	7dba      	ldrb	r2, [r7, #22]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	32ae      	adds	r2, #174	@ 0xae
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 f996 	bl	8007872 <USBD_CtlSendStatus>
 8006546:	e032      	b.n	80065ae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fa41 	bl	80069da <USBD_CoreFindEP>
 8006558:	4603      	mov	r3, r0
 800655a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800655c:	7dbb      	ldrb	r3, [r7, #22]
 800655e:	2bff      	cmp	r3, #255	@ 0xff
 8006560:	d025      	beq.n	80065ae <USBD_LL_DataOutStage+0x16e>
 8006562:	7dbb      	ldrb	r3, [r7, #22]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d122      	bne.n	80065ae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d117      	bne.n	80065a4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006574:	7dba      	ldrb	r2, [r7, #22]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	32ae      	adds	r2, #174	@ 0xae
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006584:	7dba      	ldrb	r2, [r7, #22]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800658c:	7dba      	ldrb	r2, [r7, #22]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	32ae      	adds	r2, #174	@ 0xae
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	7afa      	ldrb	r2, [r7, #11]
 800659a:	4611      	mov	r1, r2
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	4798      	blx	r3
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	e000      	b.n	80065b0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	460b      	mov	r3, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d178      	bne.n	80066be <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3314      	adds	r3, #20
 80065d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d163      	bne.n	80066a4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	8992      	ldrh	r2, [r2, #12]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d91c      	bls.n	8006622 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	8992      	ldrh	r2, [r2, #12]
 80065f0:	1a9a      	subs	r2, r3, r2
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	8992      	ldrh	r2, [r2, #12]
 80065fe:	441a      	add	r2, r3
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6919      	ldr	r1, [r3, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	461a      	mov	r2, r3
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f001 f8ec 	bl	80077ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	2100      	movs	r1, #0
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f001 fe54 	bl	80082c8 <USBD_LL_PrepareReceive>
 8006620:	e040      	b.n	80066a4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	899b      	ldrh	r3, [r3, #12]
 8006626:	461a      	mov	r2, r3
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d11c      	bne.n	800666a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006638:	4293      	cmp	r3, r2
 800663a:	d316      	bcc.n	800666a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006646:	429a      	cmp	r2, r3
 8006648:	d20f      	bcs.n	800666a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800664a:	2200      	movs	r2, #0
 800664c:	2100      	movs	r1, #0
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 f8cc 	bl	80077ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800665c:	2300      	movs	r3, #0
 800665e:	2200      	movs	r2, #0
 8006660:	2100      	movs	r1, #0
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 fe30 	bl	80082c8 <USBD_LL_PrepareReceive>
 8006668:	e01c      	b.n	80066a4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b03      	cmp	r3, #3
 8006674:	d10f      	bne.n	8006696 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006696:	2180      	movs	r1, #128	@ 0x80
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f001 fd6b 	bl	8008174 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 f8fa 	bl	8007898 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03a      	beq.n	8006724 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fe30 	bl	8006314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066bc:	e032      	b.n	8006724 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	4619      	mov	r1, r3
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f986 	bl	80069da <USBD_CoreFindEP>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2bff      	cmp	r3, #255	@ 0xff
 80066d6:	d025      	beq.n	8006724 <USBD_LL_DataInStage+0x16c>
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d122      	bne.n	8006724 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d11c      	bne.n	8006724 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066ea:	7dfa      	ldrb	r2, [r7, #23]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	32ae      	adds	r2, #174	@ 0xae
 80066f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d014      	beq.n	8006724 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80066fa:	7dfa      	ldrb	r2, [r7, #23]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006702:	7dfa      	ldrb	r2, [r7, #23]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	32ae      	adds	r2, #174	@ 0xae
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	7afa      	ldrb	r2, [r7, #11]
 8006710:	4611      	mov	r1, r2
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	4798      	blx	r3
 8006716:	4603      	mov	r3, r0
 8006718:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800671a:	7dbb      	ldrb	r3, [r7, #22]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006720:	7dbb      	ldrb	r3, [r7, #22]
 8006722:	e000      	b.n	8006726 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00e      	beq.n	8006794 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6852      	ldr	r2, [r2, #4]
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	4611      	mov	r1, r2
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	4798      	blx	r3
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006790:	2303      	movs	r3, #3
 8006792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006794:	2340      	movs	r3, #64	@ 0x40
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fca5 	bl	80080ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2240      	movs	r2, #64	@ 0x40
 80067ac:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b0:	2340      	movs	r3, #64	@ 0x40
 80067b2:	2200      	movs	r2, #0
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fc97 	bl	80080ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2240      	movs	r2, #64	@ 0x40
 80067c8:	841a      	strh	r2, [r3, #32]

  return ret;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b04      	cmp	r3, #4
 8006806:	d006      	beq.n	8006816 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2204      	movs	r2, #4
 800681a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b04      	cmp	r3, #4
 800683e:	d106      	bne.n	800684e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006846:	b2da      	uxtb	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b03      	cmp	r3, #3
 800686e:	d110      	bne.n	8006892 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	32ae      	adds	r2, #174	@ 0xae
 80068b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e01c      	b.n	80068f8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d115      	bne.n	80068f6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	32ae      	adds	r2, #174	@ 0xae
 80068d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32ae      	adds	r2, #174	@ 0xae
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32ae      	adds	r2, #174	@ 0xae
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800691e:	2303      	movs	r3, #3
 8006920:	e01c      	b.n	800695c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d115      	bne.n	800695a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	32ae      	adds	r2, #174	@ 0xae
 8006938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32ae      	adds	r2, #174	@ 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	4611      	mov	r1, r2
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6852      	ldr	r2, [r2, #4]
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	4611      	mov	r1, r2
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069b2:	2303      	movs	r3, #3
 80069b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	460b      	mov	r3, r1
 80069e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	7812      	ldrb	r2, [r2, #0]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d91f      	bls.n	8006a5a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a20:	e013      	b.n	8006a4a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a22:	f107 030a 	add.w	r3, r7, #10
 8006a26:	4619      	mov	r1, r3
 8006a28:	6978      	ldr	r0, [r7, #20]
 8006a2a:	f000 f81b 	bl	8006a64 <USBD_GetNextDesc>
 8006a2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b05      	cmp	r3, #5
 8006a36:	d108      	bne.n	8006a4a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	789b      	ldrb	r3, [r3, #2]
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d008      	beq.n	8006a58 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	885b      	ldrh	r3, [r3, #2]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	897b      	ldrh	r3, [r7, #10]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8e5      	bhi.n	8006a22 <USBD_GetEpDesc+0x2e>
 8006a56:	e000      	b.n	8006a5a <USBD_GetEpDesc+0x66>
          break;
 8006a58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a5a:	693b      	ldr	r3, [r7, #16]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006aba:	8a3b      	ldrh	r3, [r7, #16]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006aca:	89fb      	ldrh	r3, [r7, #14]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006aee:	2b40      	cmp	r3, #64	@ 0x40
 8006af0:	d005      	beq.n	8006afe <USBD_StdDevReq+0x26>
 8006af2:	2b40      	cmp	r3, #64	@ 0x40
 8006af4:	d857      	bhi.n	8006ba6 <USBD_StdDevReq+0xce>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00f      	beq.n	8006b1a <USBD_StdDevReq+0x42>
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d153      	bne.n	8006ba6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	32ae      	adds	r2, #174	@ 0xae
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
      break;
 8006b18:	e04a      	b.n	8006bb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b09      	cmp	r3, #9
 8006b20:	d83b      	bhi.n	8006b9a <USBD_StdDevReq+0xc2>
 8006b22:	a201      	add	r2, pc, #4	@ (adr r2, 8006b28 <USBD_StdDevReq+0x50>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006b91 	.word	0x08006b91
 8006b30:	08006b9b 	.word	0x08006b9b
 8006b34:	08006b87 	.word	0x08006b87
 8006b38:	08006b9b 	.word	0x08006b9b
 8006b3c:	08006b5b 	.word	0x08006b5b
 8006b40:	08006b51 	.word	0x08006b51
 8006b44:	08006b9b 	.word	0x08006b9b
 8006b48:	08006b73 	.word	0x08006b73
 8006b4c:	08006b65 	.word	0x08006b65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fa3e 	bl	8006fd4 <USBD_GetDescriptor>
          break;
 8006b58:	e024      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbcd 	bl	80072fc <USBD_SetAddress>
          break;
 8006b62:	e01f      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fc0c 	bl	8007384 <USBD_SetConfig>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]
          break;
 8006b70:	e018      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fcaf 	bl	80074d8 <USBD_GetConfig>
          break;
 8006b7a:	e013      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fce0 	bl	8007544 <USBD_GetStatus>
          break;
 8006b84:	e00e      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fd0f 	bl	80075ac <USBD_SetFeature>
          break;
 8006b8e:	e009      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fd33 	bl	80075fe <USBD_ClrFeature>
          break;
 8006b98:	e004      	b.n	8006ba4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fd8a 	bl	80076b6 <USBD_CtlError>
          break;
 8006ba2:	bf00      	nop
      }
      break;
 8006ba4:	e004      	b.n	8006bb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fd84 	bl	80076b6 <USBD_CtlError>
      break;
 8006bae:	bf00      	nop
  }

  return ret;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop

08006bbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d005      	beq.n	8006be2 <USBD_StdItfReq+0x26>
 8006bd6:	2b40      	cmp	r3, #64	@ 0x40
 8006bd8:	d852      	bhi.n	8006c80 <USBD_StdItfReq+0xc4>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <USBD_StdItfReq+0x26>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d14e      	bne.n	8006c80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d840      	bhi.n	8006c72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	889b      	ldrh	r3, [r3, #4]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d836      	bhi.n	8006c68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	889b      	ldrh	r3, [r3, #4]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff fedc 	bl	80069c0 <USBD_CoreFindIF>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2bff      	cmp	r3, #255	@ 0xff
 8006c10:	d01d      	beq.n	8006c4e <USBD_StdItfReq+0x92>
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11a      	bne.n	8006c4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c18:	7bba      	ldrb	r2, [r7, #14]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32ae      	adds	r2, #174	@ 0xae
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00f      	beq.n	8006c48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c28:	7bba      	ldrb	r2, [r7, #14]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c30:	7bba      	ldrb	r2, [r7, #14]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	@ 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c46:	e004      	b.n	8006c52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c4c:	e001      	b.n	8006c52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d110      	bne.n	8006c7c <USBD_StdItfReq+0xc0>
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10d      	bne.n	8006c7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fe06 	bl	8007872 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c66:	e009      	b.n	8006c7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fd23 	bl	80076b6 <USBD_CtlError>
          break;
 8006c70:	e004      	b.n	8006c7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fd1e 	bl	80076b6 <USBD_CtlError>
          break;
 8006c7a:	e000      	b.n	8006c7e <USBD_StdItfReq+0xc2>
          break;
 8006c7c:	bf00      	nop
      }
      break;
 8006c7e:	e004      	b.n	8006c8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fd17 	bl	80076b6 <USBD_CtlError>
      break;
 8006c88:	bf00      	nop
  }

  return ret;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	889b      	ldrh	r3, [r3, #4]
 8006ca6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cb0:	2b40      	cmp	r3, #64	@ 0x40
 8006cb2:	d007      	beq.n	8006cc4 <USBD_StdEPReq+0x30>
 8006cb4:	2b40      	cmp	r3, #64	@ 0x40
 8006cb6:	f200 8181 	bhi.w	8006fbc <USBD_StdEPReq+0x328>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d02a      	beq.n	8006d14 <USBD_StdEPReq+0x80>
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	f040 817c 	bne.w	8006fbc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fe86 	bl	80069da <USBD_CoreFindEP>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	2bff      	cmp	r3, #255	@ 0xff
 8006cd6:	f000 8176 	beq.w	8006fc6 <USBD_StdEPReq+0x332>
 8006cda:	7b7b      	ldrb	r3, [r7, #13]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 8172 	bne.w	8006fc6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006ce2:	7b7a      	ldrb	r2, [r7, #13]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cea:	7b7a      	ldrb	r2, [r7, #13]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	32ae      	adds	r2, #174	@ 0xae
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 8165 	beq.w	8006fc6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006cfc:	7b7a      	ldrb	r2, [r7, #13]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	32ae      	adds	r2, #174	@ 0xae
 8006d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d12:	e158      	b.n	8006fc6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	785b      	ldrb	r3, [r3, #1]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d008      	beq.n	8006d2e <USBD_StdEPReq+0x9a>
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	f300 8147 	bgt.w	8006fb0 <USBD_StdEPReq+0x31c>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 809b 	beq.w	8006e5e <USBD_StdEPReq+0x1ca>
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d03c      	beq.n	8006da6 <USBD_StdEPReq+0x112>
 8006d2c:	e140      	b.n	8006fb0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d002      	beq.n	8006d40 <USBD_StdEPReq+0xac>
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d016      	beq.n	8006d6c <USBD_StdEPReq+0xd8>
 8006d3e:	e02c      	b.n	8006d9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00d      	beq.n	8006d62 <USBD_StdEPReq+0xce>
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b80      	cmp	r3, #128	@ 0x80
 8006d4a:	d00a      	beq.n	8006d62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 fa0f 	bl	8008174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d56:	2180      	movs	r1, #128	@ 0x80
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fa0b 	bl	8008174 <USBD_LL_StallEP>
 8006d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d60:	e020      	b.n	8006da4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fca6 	bl	80076b6 <USBD_CtlError>
              break;
 8006d6a:	e01b      	b.n	8006da4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	885b      	ldrh	r3, [r3, #2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10e      	bne.n	8006d92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00b      	beq.n	8006d92 <USBD_StdEPReq+0xfe>
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	2b80      	cmp	r3, #128	@ 0x80
 8006d7e:	d008      	beq.n	8006d92 <USBD_StdEPReq+0xfe>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	88db      	ldrh	r3, [r3, #6]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 f9f1 	bl	8008174 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fd6d 	bl	8007872 <USBD_CtlSendStatus>

              break;
 8006d98:	e004      	b.n	8006da4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fc8a 	bl	80076b6 <USBD_CtlError>
              break;
 8006da2:	bf00      	nop
          }
          break;
 8006da4:	e109      	b.n	8006fba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d002      	beq.n	8006db8 <USBD_StdEPReq+0x124>
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d016      	beq.n	8006de4 <USBD_StdEPReq+0x150>
 8006db6:	e04b      	b.n	8006e50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <USBD_StdEPReq+0x146>
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	2b80      	cmp	r3, #128	@ 0x80
 8006dc2:	d00a      	beq.n	8006dda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f9d3 	bl	8008174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dce:	2180      	movs	r1, #128	@ 0x80
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f001 f9cf 	bl	8008174 <USBD_LL_StallEP>
 8006dd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd8:	e040      	b.n	8006e5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 fc6a 	bl	80076b6 <USBD_CtlError>
              break;
 8006de2:	e03b      	b.n	8006e5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	885b      	ldrh	r3, [r3, #2]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d136      	bne.n	8006e5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f9d9 	bl	80081b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fd36 	bl	8007872 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fde5 	bl	80069da <USBD_CoreFindEP>
 8006e10:	4603      	mov	r3, r0
 8006e12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e14:	7b7b      	ldrb	r3, [r7, #13]
 8006e16:	2bff      	cmp	r3, #255	@ 0xff
 8006e18:	d01f      	beq.n	8006e5a <USBD_StdEPReq+0x1c6>
 8006e1a:	7b7b      	ldrb	r3, [r7, #13]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d11c      	bne.n	8006e5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e20:	7b7a      	ldrb	r2, [r7, #13]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e28:	7b7a      	ldrb	r2, [r7, #13]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	32ae      	adds	r2, #174	@ 0xae
 8006e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d010      	beq.n	8006e5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e38:	7b7a      	ldrb	r2, [r7, #13]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	32ae      	adds	r2, #174	@ 0xae
 8006e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e4e:	e004      	b.n	8006e5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fc2f 	bl	80076b6 <USBD_CtlError>
              break;
 8006e58:	e000      	b.n	8006e5c <USBD_StdEPReq+0x1c8>
              break;
 8006e5a:	bf00      	nop
          }
          break;
 8006e5c:	e0ad      	b.n	8006fba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d002      	beq.n	8006e70 <USBD_StdEPReq+0x1dc>
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d033      	beq.n	8006ed6 <USBD_StdEPReq+0x242>
 8006e6e:	e099      	b.n	8006fa4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <USBD_StdEPReq+0x1f2>
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b80      	cmp	r3, #128	@ 0x80
 8006e7a:	d004      	beq.n	8006e86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fc19 	bl	80076b6 <USBD_CtlError>
                break;
 8006e84:	e093      	b.n	8006fae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da0b      	bge.n	8006ea6 <USBD_StdEPReq+0x212>
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	3310      	adds	r3, #16
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	e00b      	b.n	8006ebe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	330e      	adds	r3, #14
 8006eca:	2202      	movs	r2, #2
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc6e 	bl	80077b0 <USBD_CtlSendData>
              break;
 8006ed4:	e06b      	b.n	8006fae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da11      	bge.n	8006f02 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3323      	adds	r3, #35	@ 0x23
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d117      	bne.n	8006f28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fbdb 	bl	80076b6 <USBD_CtlError>
                  break;
 8006f00:	e055      	b.n	8006fae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	f003 020f 	and.w	r2, r3, #15
 8006f08:	6879      	ldr	r1, [r7, #4]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fbc8 	bl	80076b6 <USBD_CtlError>
                  break;
 8006f26:	e042      	b.n	8006fae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da0b      	bge.n	8006f48 <USBD_StdEPReq+0x2b4>
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	3310      	adds	r3, #16
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	e00b      	b.n	8006f60 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	3304      	adds	r3, #4
 8006f60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <USBD_StdEPReq+0x2da>
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	2b80      	cmp	r3, #128	@ 0x80
 8006f6c:	d103      	bne.n	8006f76 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2200      	movs	r2, #0
 8006f72:	739a      	strb	r2, [r3, #14]
 8006f74:	e00e      	b.n	8006f94 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 f938 	bl	80081f0 <USBD_LL_IsStallEP>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	739a      	strb	r2, [r3, #14]
 8006f8c:	e002      	b.n	8006f94 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	330e      	adds	r3, #14
 8006f98:	2202      	movs	r2, #2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fc07 	bl	80077b0 <USBD_CtlSendData>
              break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb85 	bl	80076b6 <USBD_CtlError>
              break;
 8006fac:	bf00      	nop
          }
          break;
 8006fae:	e004      	b.n	8006fba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb7f 	bl	80076b6 <USBD_CtlError>
          break;
 8006fb8:	bf00      	nop
      }
      break;
 8006fba:	e005      	b.n	8006fc8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fb79 	bl	80076b6 <USBD_CtlError>
      break;
 8006fc4:	e000      	b.n	8006fc8 <USBD_StdEPReq+0x334>
      break;
 8006fc6:	bf00      	nop
  }

  return ret;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	885b      	ldrh	r3, [r3, #2]
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	2b0e      	cmp	r3, #14
 8006ff6:	f200 8152 	bhi.w	800729e <USBD_GetDescriptor+0x2ca>
 8006ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <USBD_GetDescriptor+0x2c>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007071 	.word	0x08007071
 8007004:	08007089 	.word	0x08007089
 8007008:	080070c9 	.word	0x080070c9
 800700c:	0800729f 	.word	0x0800729f
 8007010:	0800729f 	.word	0x0800729f
 8007014:	0800723f 	.word	0x0800723f
 8007018:	0800726b 	.word	0x0800726b
 800701c:	0800729f 	.word	0x0800729f
 8007020:	0800729f 	.word	0x0800729f
 8007024:	0800729f 	.word	0x0800729f
 8007028:	0800729f 	.word	0x0800729f
 800702c:	0800729f 	.word	0x0800729f
 8007030:	0800729f 	.word	0x0800729f
 8007034:	0800729f 	.word	0x0800729f
 8007038:	0800703d 	.word	0x0800703d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00b      	beq.n	8007060 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	7c12      	ldrb	r2, [r2, #16]
 8007054:	f107 0108 	add.w	r1, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800705e:	e126      	b.n	80072ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fb27 	bl	80076b6 <USBD_CtlError>
        err++;
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	3301      	adds	r3, #1
 800706c:	72fb      	strb	r3, [r7, #11]
      break;
 800706e:	e11e      	b.n	80072ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	7c12      	ldrb	r2, [r2, #16]
 800707c:	f107 0108 	add.w	r1, r7, #8
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	60f8      	str	r0, [r7, #12]
      break;
 8007086:	e112      	b.n	80072ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7c1b      	ldrb	r3, [r3, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10d      	bne.n	80070ac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	f107 0208 	add.w	r2, r7, #8
 800709c:	4610      	mov	r0, r2
 800709e:	4798      	blx	r3
 80070a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	3301      	adds	r3, #1
 80070a6:	2202      	movs	r2, #2
 80070a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070aa:	e100      	b.n	80072ae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	f107 0208 	add.w	r2, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	2202      	movs	r2, #2
 80070c4:	701a      	strb	r2, [r3, #0]
      break;
 80070c6:	e0f2      	b.n	80072ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	885b      	ldrh	r3, [r3, #2]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	f200 80ac 	bhi.w	800722c <USBD_GetDescriptor+0x258>
 80070d4:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <USBD_GetDescriptor+0x108>)
 80070d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070da:	bf00      	nop
 80070dc:	080070f5 	.word	0x080070f5
 80070e0:	08007129 	.word	0x08007129
 80070e4:	0800715d 	.word	0x0800715d
 80070e8:	08007191 	.word	0x08007191
 80070ec:	080071c5 	.word	0x080071c5
 80070f0:	080071f9 	.word	0x080071f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	7c12      	ldrb	r2, [r2, #16]
 800710c:	f107 0108 	add.w	r1, r7, #8
 8007110:	4610      	mov	r0, r2
 8007112:	4798      	blx	r3
 8007114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007116:	e091      	b.n	800723c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 facb 	bl	80076b6 <USBD_CtlError>
            err++;
 8007120:	7afb      	ldrb	r3, [r7, #11]
 8007122:	3301      	adds	r3, #1
 8007124:	72fb      	strb	r3, [r7, #11]
          break;
 8007126:	e089      	b.n	800723c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	7c12      	ldrb	r2, [r2, #16]
 8007140:	f107 0108 	add.w	r1, r7, #8
 8007144:	4610      	mov	r0, r2
 8007146:	4798      	blx	r3
 8007148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714a:	e077      	b.n	800723c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fab1 	bl	80076b6 <USBD_CtlError>
            err++;
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	3301      	adds	r3, #1
 8007158:	72fb      	strb	r3, [r7, #11]
          break;
 800715a:	e06f      	b.n	800723c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00b      	beq.n	8007180 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7c12      	ldrb	r2, [r2, #16]
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800717e:	e05d      	b.n	800723c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa97 	bl	80076b6 <USBD_CtlError>
            err++;
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	3301      	adds	r3, #1
 800718c:	72fb      	strb	r3, [r7, #11]
          break;
 800718e:	e055      	b.n	800723c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	7c12      	ldrb	r2, [r2, #16]
 80071a8:	f107 0108 	add.w	r1, r7, #8
 80071ac:	4610      	mov	r0, r2
 80071ae:	4798      	blx	r3
 80071b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071b2:	e043      	b.n	800723c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa7d 	bl	80076b6 <USBD_CtlError>
            err++;
 80071bc:	7afb      	ldrb	r3, [r7, #11]
 80071be:	3301      	adds	r3, #1
 80071c0:	72fb      	strb	r3, [r7, #11]
          break;
 80071c2:	e03b      	b.n	800723c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7c12      	ldrb	r2, [r2, #16]
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e6:	e029      	b.n	800723c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa63 	bl	80076b6 <USBD_CtlError>
            err++;
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	3301      	adds	r3, #1
 80071f4:	72fb      	strb	r3, [r7, #11]
          break;
 80071f6:	e021      	b.n	800723c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c12      	ldrb	r2, [r2, #16]
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721a:	e00f      	b.n	800723c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa49 	bl	80076b6 <USBD_CtlError>
            err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
          break;
 800722a:	e007      	b.n	800723c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fa41 	bl	80076b6 <USBD_CtlError>
          err++;
 8007234:	7afb      	ldrb	r3, [r7, #11]
 8007236:	3301      	adds	r3, #1
 8007238:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800723a:	bf00      	nop
      }
      break;
 800723c:	e037      	b.n	80072ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	7c1b      	ldrb	r3, [r3, #16]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d109      	bne.n	800725a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800724c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724e:	f107 0208 	add.w	r2, r7, #8
 8007252:	4610      	mov	r0, r2
 8007254:	4798      	blx	r3
 8007256:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007258:	e029      	b.n	80072ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa2a 	bl	80076b6 <USBD_CtlError>
        err++;
 8007262:	7afb      	ldrb	r3, [r7, #11]
 8007264:	3301      	adds	r3, #1
 8007266:	72fb      	strb	r3, [r7, #11]
      break;
 8007268:	e021      	b.n	80072ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7c1b      	ldrb	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10d      	bne.n	800728e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727a:	f107 0208 	add.w	r2, r7, #8
 800727e:	4610      	mov	r0, r2
 8007280:	4798      	blx	r3
 8007282:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	2207      	movs	r2, #7
 800728a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800728c:	e00f      	b.n	80072ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa10 	bl	80076b6 <USBD_CtlError>
        err++;
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	3301      	adds	r3, #1
 800729a:	72fb      	strb	r3, [r7, #11]
      break;
 800729c:	e007      	b.n	80072ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa08 	bl	80076b6 <USBD_CtlError>
      err++;
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	3301      	adds	r3, #1
 80072aa:	72fb      	strb	r3, [r7, #11]
      break;
 80072ac:	bf00      	nop
  }

  if (err != 0U)
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d11e      	bne.n	80072f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d016      	beq.n	80072ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80072bc:	893b      	ldrh	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00e      	beq.n	80072e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	88da      	ldrh	r2, [r3, #6]
 80072c6:	893b      	ldrh	r3, [r7, #8]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	bf28      	it	cs
 80072cc:	4613      	movcs	r3, r2
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072d2:	893b      	ldrh	r3, [r7, #8]
 80072d4:	461a      	mov	r2, r3
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fa69 	bl	80077b0 <USBD_CtlSendData>
 80072de:	e009      	b.n	80072f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9e7 	bl	80076b6 <USBD_CtlError>
 80072e8:	e004      	b.n	80072f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fac1 	bl	8007872 <USBD_CtlSendStatus>
 80072f0:	e000      	b.n	80072f4 <USBD_GetDescriptor+0x320>
    return;
 80072f2:	bf00      	nop
  }
}
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop

080072fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	889b      	ldrh	r3, [r3, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d131      	bne.n	8007372 <USBD_SetAddress+0x76>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	88db      	ldrh	r3, [r3, #6]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d12d      	bne.n	8007372 <USBD_SetAddress+0x76>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	885b      	ldrh	r3, [r3, #2]
 800731a:	2b7f      	cmp	r3, #127	@ 0x7f
 800731c:	d829      	bhi.n	8007372 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	885b      	ldrh	r3, [r3, #2]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007328:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b03      	cmp	r3, #3
 8007334:	d104      	bne.n	8007340 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f9bc 	bl	80076b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800733e:	e01d      	b.n	800737c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7bfa      	ldrb	r2, [r7, #15]
 8007344:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 ff7b 	bl	8008248 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa8d 	bl	8007872 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007366:	e009      	b.n	800737c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007370:	e004      	b.n	800737c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f99e 	bl	80076b6 <USBD_CtlError>
  }
}
 800737a:	bf00      	nop
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	885b      	ldrh	r3, [r3, #2]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	4b4e      	ldr	r3, [pc, #312]	@ (80074d4 <USBD_SetConfig+0x150>)
 800739a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800739c:	4b4d      	ldr	r3, [pc, #308]	@ (80074d4 <USBD_SetConfig+0x150>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d905      	bls.n	80073b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f985 	bl	80076b6 <USBD_CtlError>
    return USBD_FAIL;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e08c      	b.n	80074ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d002      	beq.n	80073c2 <USBD_SetConfig+0x3e>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d029      	beq.n	8007414 <USBD_SetConfig+0x90>
 80073c0:	e075      	b.n	80074ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073c2:	4b44      	ldr	r3, [pc, #272]	@ (80074d4 <USBD_SetConfig+0x150>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d020      	beq.n	800740c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073ca:	4b42      	ldr	r3, [pc, #264]	@ (80074d4 <USBD_SetConfig+0x150>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073d4:	4b3f      	ldr	r3, [pc, #252]	@ (80074d4 <USBD_SetConfig+0x150>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fe ffa5 	bl	800632a <USBD_SetClassConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d008      	beq.n	80073fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f962 	bl	80076b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2202      	movs	r2, #2
 80073f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073fa:	e065      	b.n	80074c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fa38 	bl	8007872 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2203      	movs	r2, #3
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800740a:	e05d      	b.n	80074c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa30 	bl	8007872 <USBD_CtlSendStatus>
      break;
 8007412:	e059      	b.n	80074c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007414:	4b2f      	ldr	r3, [pc, #188]	@ (80074d4 <USBD_SetConfig+0x150>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d112      	bne.n	8007442 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007424:	4b2b      	ldr	r3, [pc, #172]	@ (80074d4 <USBD_SetConfig+0x150>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800742e:	4b29      	ldr	r3, [pc, #164]	@ (80074d4 <USBD_SetConfig+0x150>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fe ff94 	bl	8006362 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fa19 	bl	8007872 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007440:	e042      	b.n	80074c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007442:	4b24      	ldr	r3, [pc, #144]	@ (80074d4 <USBD_SetConfig+0x150>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d02a      	beq.n	80074a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7fe ff82 	bl	8006362 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800745e:	4b1d      	ldr	r3, [pc, #116]	@ (80074d4 <USBD_SetConfig+0x150>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007468:	4b1a      	ldr	r3, [pc, #104]	@ (80074d4 <USBD_SetConfig+0x150>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fe ff5b 	bl	800632a <USBD_SetClassConfig>
 8007474:	4603      	mov	r3, r0
 8007476:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00f      	beq.n	800749e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f918 	bl	80076b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fe ff67 	bl	8006362 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800749c:	e014      	b.n	80074c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9e7 	bl	8007872 <USBD_CtlSendStatus>
      break;
 80074a4:	e010      	b.n	80074c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9e3 	bl	8007872 <USBD_CtlSendStatus>
      break;
 80074ac:	e00c      	b.n	80074c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f900 	bl	80076b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074b6:	4b07      	ldr	r3, [pc, #28]	@ (80074d4 <USBD_SetConfig+0x150>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fe ff50 	bl	8006362 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	73fb      	strb	r3, [r7, #15]
      break;
 80074c6:	bf00      	nop
  }

  return ret;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000b9c 	.word	0x20000b9c

080074d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	88db      	ldrh	r3, [r3, #6]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d004      	beq.n	80074f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f8e2 	bl	80076b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074f2:	e023      	b.n	800753c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	dc02      	bgt.n	8007506 <USBD_GetConfig+0x2e>
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc03      	bgt.n	800750c <USBD_GetConfig+0x34>
 8007504:	e015      	b.n	8007532 <USBD_GetConfig+0x5a>
 8007506:	2b03      	cmp	r3, #3
 8007508:	d00b      	beq.n	8007522 <USBD_GetConfig+0x4a>
 800750a:	e012      	b.n	8007532 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3308      	adds	r3, #8
 8007516:	2201      	movs	r2, #1
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f948 	bl	80077b0 <USBD_CtlSendData>
        break;
 8007520:	e00c      	b.n	800753c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	2201      	movs	r2, #1
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f940 	bl	80077b0 <USBD_CtlSendData>
        break;
 8007530:	e004      	b.n	800753c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f8be 	bl	80076b6 <USBD_CtlError>
        break;
 800753a:	bf00      	nop
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007554:	b2db      	uxtb	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	2b02      	cmp	r3, #2
 800755a:	d81e      	bhi.n	800759a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d004      	beq.n	800756e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007564:	6839      	ldr	r1, [r7, #0]
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f8a5 	bl	80076b6 <USBD_CtlError>
        break;
 800756c:	e01a      	b.n	80075a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f043 0202 	orr.w	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	330c      	adds	r3, #12
 800758e:	2202      	movs	r2, #2
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f90c 	bl	80077b0 <USBD_CtlSendData>
      break;
 8007598:	e004      	b.n	80075a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f88a 	bl	80076b6 <USBD_CtlError>
      break;
 80075a2:	bf00      	nop
  }
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d107      	bne.n	80075ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f953 	bl	8007872 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075cc:	e013      	b.n	80075f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d10b      	bne.n	80075ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	889b      	ldrh	r3, [r3, #4]
 80075da:	0a1b      	lsrs	r3, r3, #8
 80075dc:	b29b      	uxth	r3, r3
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f943 	bl	8007872 <USBD_CtlSendStatus>
}
 80075ec:	e003      	b.n	80075f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f860 	bl	80076b6 <USBD_CtlError>
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800760e:	b2db      	uxtb	r3, r3
 8007610:	3b01      	subs	r3, #1
 8007612:	2b02      	cmp	r3, #2
 8007614:	d80b      	bhi.n	800762e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	885b      	ldrh	r3, [r3, #2]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d10c      	bne.n	8007638 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f923 	bl	8007872 <USBD_CtlSendStatus>
      }
      break;
 800762c:	e004      	b.n	8007638 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f840 	bl	80076b6 <USBD_CtlError>
      break;
 8007636:	e000      	b.n	800763a <USBD_ClrFeature+0x3c>
      break;
 8007638:	bf00      	nop
  }
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	781a      	ldrb	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fa15 	bl	8006a9c <SWAPBYTE>
 8007672:	4603      	mov	r3, r0
 8007674:	461a      	mov	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3301      	adds	r3, #1
 800767e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fa08 	bl	8006a9c <SWAPBYTE>
 800768c:	4603      	mov	r3, r0
 800768e:	461a      	mov	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3301      	adds	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff f9fb 	bl	8006a9c <SWAPBYTE>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	80da      	strh	r2, [r3, #6]
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076c0:	2180      	movs	r1, #128	@ 0x80
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fd56 	bl	8008174 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076c8:	2100      	movs	r1, #0
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fd52 	bl	8008174 <USBD_LL_StallEP>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d042      	beq.n	8007774 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80076f2:	6938      	ldr	r0, [r7, #16]
 80076f4:	f000 f842 	bl	800777c <USBD_GetLen>
 80076f8:	4603      	mov	r3, r0
 80076fa:	3301      	adds	r3, #1
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007702:	d808      	bhi.n	8007716 <USBD_GetString+0x3e>
 8007704:	6938      	ldr	r0, [r7, #16]
 8007706:	f000 f839 	bl	800777c <USBD_GetLen>
 800770a:	4603      	mov	r3, r0
 800770c:	3301      	adds	r3, #1
 800770e:	b29b      	uxth	r3, r3
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	e001      	b.n	800771a <USBD_GetString+0x42>
 8007716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
  idx++;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	3301      	adds	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	2203      	movs	r2, #3
 8007738:	701a      	strb	r2, [r3, #0]
  idx++;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	3301      	adds	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007740:	e013      	b.n	800776a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3301      	adds	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
    idx++;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	3301      	adds	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4413      	add	r3, r2
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
    idx++;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	3301      	adds	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e7      	bne.n	8007742 <USBD_GetString+0x6a>
 8007772:	e000      	b.n	8007776 <USBD_GetString+0x9e>
    return;
 8007774:	bf00      	nop
  }
}
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800778c:	e005      	b.n	800779a <USBD_GetLen+0x1e>
  {
    len++;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	3301      	adds	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3301      	adds	r3, #1
 8007798:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f5      	bne.n	800778e <USBD_GetLen+0x12>
  }

  return len;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2202      	movs	r2, #2
 80077c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	2100      	movs	r1, #0
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 fd52 	bl	8008286 <USBD_LL_Transmit>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f000 fd41 	bl	8008286 <USBD_LL_Transmit>

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2203      	movs	r2, #3
 800781e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	2100      	movs	r1, #0
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f000 fd41 	bl	80082c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fd30 	bl	80082c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2204      	movs	r2, #4
 800787e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007882:	2300      	movs	r3, #0
 8007884:	2200      	movs	r2, #0
 8007886:	2100      	movs	r1, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fcfc 	bl	8008286 <USBD_LL_Transmit>

  return USBD_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2205      	movs	r2, #5
 80078a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a8:	2300      	movs	r3, #0
 80078aa:	2200      	movs	r2, #0
 80078ac:	2100      	movs	r1, #0
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd0a 	bl	80082c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
	...

080078c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078c4:	2200      	movs	r2, #0
 80078c6:	4912      	ldr	r1, [pc, #72]	@ (8007910 <MX_USB_DEVICE_Init+0x50>)
 80078c8:	4812      	ldr	r0, [pc, #72]	@ (8007914 <MX_USB_DEVICE_Init+0x54>)
 80078ca:	f7fe fcb1 	bl	8006230 <USBD_Init>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078d4:	f7f9 fc36 	bl	8001144 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078d8:	490f      	ldr	r1, [pc, #60]	@ (8007918 <MX_USB_DEVICE_Init+0x58>)
 80078da:	480e      	ldr	r0, [pc, #56]	@ (8007914 <MX_USB_DEVICE_Init+0x54>)
 80078dc:	f7fe fcd8 	bl	8006290 <USBD_RegisterClass>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078e6:	f7f9 fc2d 	bl	8001144 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078ea:	490c      	ldr	r1, [pc, #48]	@ (800791c <MX_USB_DEVICE_Init+0x5c>)
 80078ec:	4809      	ldr	r0, [pc, #36]	@ (8007914 <MX_USB_DEVICE_Init+0x54>)
 80078ee:	f7fe fbcf 	bl	8006090 <USBD_CDC_RegisterInterface>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078f8:	f7f9 fc24 	bl	8001144 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078fc:	4805      	ldr	r0, [pc, #20]	@ (8007914 <MX_USB_DEVICE_Init+0x54>)
 80078fe:	f7fe fcfd 	bl	80062fc <USBD_Start>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007908:	f7f9 fc1c 	bl	8001144 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800790c:	bf00      	nop
 800790e:	bd80      	pop	{r7, pc}
 8007910:	200000ac 	.word	0x200000ac
 8007914:	20000ba0 	.word	0x20000ba0
 8007918:	20000018 	.word	0x20000018
 800791c:	20000098 	.word	0x20000098

08007920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007924:	2200      	movs	r2, #0
 8007926:	4905      	ldr	r1, [pc, #20]	@ (800793c <CDC_Init_FS+0x1c>)
 8007928:	4805      	ldr	r0, [pc, #20]	@ (8007940 <CDC_Init_FS+0x20>)
 800792a:	f7fe fbcb 	bl	80060c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800792e:	4905      	ldr	r1, [pc, #20]	@ (8007944 <CDC_Init_FS+0x24>)
 8007930:	4803      	ldr	r0, [pc, #12]	@ (8007940 <CDC_Init_FS+0x20>)
 8007932:	f7fe fbe9 	bl	8006108 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007936:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007938:	4618      	mov	r0, r3
 800793a:	bd80      	pop	{r7, pc}
 800793c:	2000167c 	.word	0x2000167c
 8007940:	20000ba0 	.word	0x20000ba0
 8007944:	20000e7c 	.word	0x20000e7c

08007948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800794c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
 8007964:	4613      	mov	r3, r2
 8007966:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b23      	cmp	r3, #35	@ 0x23
 800796c:	d858      	bhi.n	8007a20 <CDC_Control_FS+0xc8>
 800796e:	a201      	add	r2, pc, #4	@ (adr r2, 8007974 <CDC_Control_FS+0x1c>)
 8007970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007974:	08007a21 	.word	0x08007a21
 8007978:	08007a21 	.word	0x08007a21
 800797c:	08007a21 	.word	0x08007a21
 8007980:	08007a21 	.word	0x08007a21
 8007984:	08007a21 	.word	0x08007a21
 8007988:	08007a21 	.word	0x08007a21
 800798c:	08007a21 	.word	0x08007a21
 8007990:	08007a21 	.word	0x08007a21
 8007994:	08007a21 	.word	0x08007a21
 8007998:	08007a21 	.word	0x08007a21
 800799c:	08007a21 	.word	0x08007a21
 80079a0:	08007a21 	.word	0x08007a21
 80079a4:	08007a21 	.word	0x08007a21
 80079a8:	08007a21 	.word	0x08007a21
 80079ac:	08007a21 	.word	0x08007a21
 80079b0:	08007a21 	.word	0x08007a21
 80079b4:	08007a21 	.word	0x08007a21
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	08007a21 	.word	0x08007a21
 80079c0:	08007a21 	.word	0x08007a21
 80079c4:	08007a21 	.word	0x08007a21
 80079c8:	08007a21 	.word	0x08007a21
 80079cc:	08007a21 	.word	0x08007a21
 80079d0:	08007a21 	.word	0x08007a21
 80079d4:	08007a21 	.word	0x08007a21
 80079d8:	08007a21 	.word	0x08007a21
 80079dc:	08007a21 	.word	0x08007a21
 80079e0:	08007a21 	.word	0x08007a21
 80079e4:	08007a21 	.word	0x08007a21
 80079e8:	08007a21 	.word	0x08007a21
 80079ec:	08007a21 	.word	0x08007a21
 80079f0:	08007a21 	.word	0x08007a21
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	08007a21 	.word	0x08007a21
 80079fc:	08007a05 	.word	0x08007a05
 8007a00:	08007a21 	.word	0x08007a21

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  		// bit 0 = DTR (Data Terminal Ready), bit 1 = RTS
		if (pbuf[0] & 0x01)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <CDC_Control_FS+0xc0>
		{
			vcpConnected = 1;  // DTR gesetzt – Verbindung aktiv
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <CDC_Control_FS+0xd8>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			vcpConnected = 0;  // DTR gelöscht – Verbindung geschlossen
		}
		break;
 8007a16:	e004      	b.n	8007a22 <CDC_Control_FS+0xca>
			vcpConnected = 0;  // DTR gelöscht – Verbindung geschlossen
 8007a18:	4b05      	ldr	r3, [pc, #20]	@ (8007a30 <CDC_Control_FS+0xd8>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]
		break;
 8007a1e:	e000      	b.n	8007a22 <CDC_Control_FS+0xca>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a20:	bf00      	nop
  }

  return (USBD_OK);
 8007a22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	20001e7c 	.word	0x20001e7c

08007a34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usbRxCallback(Buf, Len);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7f8 fe9f 	bl	8000784 <usbRxCallback>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4805      	ldr	r0, [pc, #20]	@ (8007a60 <CDC_Receive_FS+0x2c>)
 8007a4a:	f7fe fb5d 	bl	8006108 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a4e:	4804      	ldr	r0, [pc, #16]	@ (8007a60 <CDC_Receive_FS+0x2c>)
 8007a50:	f7fe fbb8 	bl	80061c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000ba0 	.word	0x20000ba0

08007a64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a74:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <CDC_Transmit_FS+0x48>)
 8007a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e00b      	b.n	8007aa2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a8a:	887b      	ldrh	r3, [r7, #2]
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	4806      	ldr	r0, [pc, #24]	@ (8007aac <CDC_Transmit_FS+0x48>)
 8007a92:	f7fe fb17 	bl	80060c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a96:	4805      	ldr	r0, [pc, #20]	@ (8007aac <CDC_Transmit_FS+0x48>)
 8007a98:	f7fe fb54 	bl	8006144 <USBD_CDC_TransmitPacket>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000ba0 	.word	0x20000ba0

08007ab0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4603      	mov	r3, r0
 8007adc:	6039      	str	r1, [r7, #0]
 8007ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2212      	movs	r2, #18
 8007ae4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ae6:	4b03      	ldr	r3, [pc, #12]	@ (8007af4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	200000cc 	.word	0x200000cc

08007af8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2204      	movs	r2, #4
 8007b08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b0a:	4b03      	ldr	r3, [pc, #12]	@ (8007b18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	200000ec 	.word	0x200000ec

08007b1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d105      	bne.n	8007b3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	4907      	ldr	r1, [pc, #28]	@ (8007b50 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b32:	4808      	ldr	r0, [pc, #32]	@ (8007b54 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b34:	f7ff fdd0 	bl	80076d8 <USBD_GetString>
 8007b38:	e004      	b.n	8007b44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	4904      	ldr	r1, [pc, #16]	@ (8007b50 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b3e:	4805      	ldr	r0, [pc, #20]	@ (8007b54 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b40:	f7ff fdca 	bl	80076d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b44:	4b02      	ldr	r3, [pc, #8]	@ (8007b50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	20001e80 	.word	0x20001e80
 8007b54:	08008e84 	.word	0x08008e84

08007b58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	4904      	ldr	r1, [pc, #16]	@ (8007b78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b68:	4804      	ldr	r0, [pc, #16]	@ (8007b7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b6a:	f7ff fdb5 	bl	80076d8 <USBD_GetString>
  return USBD_StrDesc;
 8007b6e:	4b02      	ldr	r3, [pc, #8]	@ (8007b78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20001e80 	.word	0x20001e80
 8007b7c:	08008e9c 	.word	0x08008e9c

08007b80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	221a      	movs	r2, #26
 8007b90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b92:	f000 f855 	bl	8007c40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b96:	4b02      	ldr	r3, [pc, #8]	@ (8007ba0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	200000f0 	.word	0x200000f0

08007ba4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d105      	bne.n	8007bc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4907      	ldr	r1, [pc, #28]	@ (8007bd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bba:	4808      	ldr	r0, [pc, #32]	@ (8007bdc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bbc:	f7ff fd8c 	bl	80076d8 <USBD_GetString>
 8007bc0:	e004      	b.n	8007bcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4904      	ldr	r1, [pc, #16]	@ (8007bd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bc6:	4805      	ldr	r0, [pc, #20]	@ (8007bdc <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc8:	f7ff fd86 	bl	80076d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bcc:	4b02      	ldr	r3, [pc, #8]	@ (8007bd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20001e80 	.word	0x20001e80
 8007bdc:	08008eb0 	.word	0x08008eb0

08007be0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	6039      	str	r1, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d105      	bne.n	8007bfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	4907      	ldr	r1, [pc, #28]	@ (8007c14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bf6:	4808      	ldr	r0, [pc, #32]	@ (8007c18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bf8:	f7ff fd6e 	bl	80076d8 <USBD_GetString>
 8007bfc:	e004      	b.n	8007c08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	4904      	ldr	r1, [pc, #16]	@ (8007c14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c02:	4805      	ldr	r0, [pc, #20]	@ (8007c18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c04:	f7ff fd68 	bl	80076d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c08:	4b02      	ldr	r3, [pc, #8]	@ (8007c14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20001e80 	.word	0x20001e80
 8007c18:	08008ebc 	.word	0x08008ebc

08007c1c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	6039      	str	r1, [r7, #0]
 8007c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	220c      	movs	r2, #12
 8007c2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007c2e:	4b03      	ldr	r3, [pc, #12]	@ (8007c3c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	200000e0 	.word	0x200000e0

08007c40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c46:	4b0f      	ldr	r3, [pc, #60]	@ (8007c84 <Get_SerialNum+0x44>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c88 <Get_SerialNum+0x48>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c52:	4b0e      	ldr	r3, [pc, #56]	@ (8007c8c <Get_SerialNum+0x4c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c66:	2208      	movs	r2, #8
 8007c68:	4909      	ldr	r1, [pc, #36]	@ (8007c90 <Get_SerialNum+0x50>)
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f814 	bl	8007c98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c70:	2204      	movs	r2, #4
 8007c72:	4908      	ldr	r1, [pc, #32]	@ (8007c94 <Get_SerialNum+0x54>)
 8007c74:	68b8      	ldr	r0, [r7, #8]
 8007c76:	f000 f80f 	bl	8007c98 <IntToUnicode>
  }
}
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	1ff0f420 	.word	0x1ff0f420
 8007c88:	1ff0f424 	.word	0x1ff0f424
 8007c8c:	1ff0f428 	.word	0x1ff0f428
 8007c90:	200000f2 	.word	0x200000f2
 8007c94:	20000102 	.word	0x20000102

08007c98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007caa:	2300      	movs	r3, #0
 8007cac:	75fb      	strb	r3, [r7, #23]
 8007cae:	e027      	b.n	8007d00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	0f1b      	lsrs	r3, r3, #28
 8007cb4:	2b09      	cmp	r3, #9
 8007cb6:	d80b      	bhi.n	8007cd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	0f1b      	lsrs	r3, r3, #28
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	440b      	add	r3, r1
 8007cc8:	3230      	adds	r2, #48	@ 0x30
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	e00a      	b.n	8007ce6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	0f1b      	lsrs	r3, r3, #28
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	440b      	add	r3, r1
 8007ce0:	3237      	adds	r2, #55	@ 0x37
 8007ce2:	b2d2      	uxtb	r2, r2
 8007ce4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	75fb      	strb	r3, [r7, #23]
 8007d00:	7dfa      	ldrb	r2, [r7, #23]
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d3d3      	bcc.n	8007cb0 <IntToUnicode+0x18>
  }
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b0ae      	sub	sp, #184	@ 0xb8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	605a      	str	r2, [r3, #4]
 8007d2a:	609a      	str	r2, [r3, #8]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d30:	f107 0314 	add.w	r3, r7, #20
 8007d34:	2290      	movs	r2, #144	@ 0x90
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fc6b 	bl	8008614 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d46:	d16e      	bne.n	8007e26 <HAL_PCD_MspInit+0x10e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007d48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007d4c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8007d4e:	2360      	movs	r3, #96	@ 0x60
 8007d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007d52:	2302      	movs	r3, #2
 8007d54:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8007d56:	2302      	movs	r3, #2
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007d62:	2300      	movs	r3, #0
 8007d64:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8007d66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007d6e:	f107 0314 	add.w	r3, r7, #20
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fb fe1e 	bl	80039b4 <HAL_RCCEx_PeriphCLKConfig>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8007d7e:	f7f9 f9e1 	bl	8001144 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d82:	4b2b      	ldr	r3, [pc, #172]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d86:	4a2a      	ldr	r2, [pc, #168]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007d88:	f043 0301 	orr.w	r3, r3, #1
 8007d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d8e:	4b28      	ldr	r3, [pc, #160]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007d9a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8007d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007da2:	2302      	movs	r3, #2
 8007da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da8:	2300      	movs	r3, #0
 8007daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dae:	2303      	movs	r3, #3
 8007db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007db4:	230a      	movs	r3, #10
 8007db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	481c      	ldr	r0, [pc, #112]	@ (8007e34 <HAL_PCD_MspInit+0x11c>)
 8007dc2:	f7f9 fcab 	bl	800171c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007dda:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8007dde:	4619      	mov	r1, r3
 8007de0:	4814      	ldr	r0, [pc, #80]	@ (8007e34 <HAL_PCD_MspInit+0x11c>)
 8007de2:	f7f9 fc9b 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007de6:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dea:	4a11      	ldr	r2, [pc, #68]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df0:	6353      	str	r3, [r2, #52]	@ 0x34
 8007df2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e02:	4a0b      	ldr	r2, [pc, #44]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8007e0a:	4b09      	ldr	r3, [pc, #36]	@ (8007e30 <HAL_PCD_MspInit+0x118>)
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e12:	60bb      	str	r3, [r7, #8]
 8007e14:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2100      	movs	r1, #0
 8007e1a:	2043      	movs	r0, #67	@ 0x43
 8007e1c:	f7f9 fc47 	bl	80016ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e20:	2043      	movs	r0, #67	@ 0x43
 8007e22:	f7f9 fc60 	bl	80016e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e26:	bf00      	nop
 8007e28:	37b8      	adds	r7, #184	@ 0xb8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40023800 	.word	0x40023800
 8007e34:	40020000 	.word	0x40020000

08007e38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f7fe faa1 	bl	8006396 <USBD_LL_SetupStage>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	4619      	mov	r1, r3
 8007e86:	f7fe fadb 	bl	8006440 <USBD_LL_DataOutStage>
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	3320      	adds	r3, #32
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7fe fb7d 	bl	80065b8 <USBD_LL_DataInStage>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fcc1 	bl	800685c <USBD_LL_SOF>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007eea:	2301      	movs	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	79db      	ldrb	r3, [r3, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	73fb      	strb	r3, [r7, #15]
 8007efa:	e008      	b.n	8007f0e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	79db      	ldrb	r3, [r3, #7]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d102      	bne.n	8007f0a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007f04:	2301      	movs	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	e001      	b.n	8007f0e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007f0a:	f7f9 f91b 	bl	8001144 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007f14:	7bfa      	ldrb	r2, [r7, #15]
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fc5b 	bl	80067d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe fc02 	bl	800672e <USBD_LL_Reset>
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fc56 	bl	80067f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7adb      	ldrb	r3, [r3, #11]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f68:	4b04      	ldr	r3, [pc, #16]	@ (8007f7c <HAL_PCD_SuspendCallback+0x48>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	4a03      	ldr	r2, [pc, #12]	@ (8007f7c <HAL_PCD_SuspendCallback+0x48>)
 8007f6e:	f043 0306 	orr.w	r3, r3, #6
 8007f72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	e000ed00 	.word	0xe000ed00

08007f80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fe fc4c 	bl	800682c <USBD_LL_Resume>
}
 8007f94:	bf00      	nop
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007fae:	78fa      	ldrb	r2, [r7, #3]
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fca4 	bl	8006900 <USBD_LL_IsoOUTIncomplete>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fc60 	bl	800689c <USBD_LL_IsoINIncomplete>
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fcb6 	bl	8006964 <USBD_LL_DevConnected>
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe fcb3 	bl	800697a <USBD_LL_DevDisconnected>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d13c      	bne.n	80080a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800802c:	4a20      	ldr	r2, [pc, #128]	@ (80080b0 <USBD_LL_Init+0x94>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a1e      	ldr	r2, [pc, #120]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008038:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800803c:	4b1c      	ldr	r3, [pc, #112]	@ (80080b0 <USBD_LL_Init+0x94>)
 800803e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008042:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008044:	4b1a      	ldr	r3, [pc, #104]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008046:	2206      	movs	r2, #6
 8008048:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800804a:	4b19      	ldr	r3, [pc, #100]	@ (80080b0 <USBD_LL_Init+0x94>)
 800804c:	2202      	movs	r2, #2
 800804e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008050:	4b17      	ldr	r3, [pc, #92]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008052:	2200      	movs	r2, #0
 8008054:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008056:	4b16      	ldr	r3, [pc, #88]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008058:	2202      	movs	r2, #2
 800805a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800805c:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <USBD_LL_Init+0x94>)
 800805e:	2200      	movs	r2, #0
 8008060:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008062:	4b13      	ldr	r3, [pc, #76]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008064:	2200      	movs	r2, #0
 8008066:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008068:	4b11      	ldr	r3, [pc, #68]	@ (80080b0 <USBD_LL_Init+0x94>)
 800806a:	2200      	movs	r2, #0
 800806c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800806e:	4b10      	ldr	r3, [pc, #64]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008070:	2201      	movs	r2, #1
 8008072:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008074:	4b0e      	ldr	r3, [pc, #56]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008076:	2200      	movs	r2, #0
 8008078:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800807a:	480d      	ldr	r0, [pc, #52]	@ (80080b0 <USBD_LL_Init+0x94>)
 800807c:	f7f9 fd13 	bl	8001aa6 <HAL_PCD_Init>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008086:	f7f9 f85d 	bl	8001144 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800808a:	2180      	movs	r1, #128	@ 0x80
 800808c:	4808      	ldr	r0, [pc, #32]	@ (80080b0 <USBD_LL_Init+0x94>)
 800808e:	f7fa ff60 	bl	8002f52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008092:	2240      	movs	r2, #64	@ 0x40
 8008094:	2100      	movs	r1, #0
 8008096:	4806      	ldr	r0, [pc, #24]	@ (80080b0 <USBD_LL_Init+0x94>)
 8008098:	f7fa ff14 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800809c:	2280      	movs	r2, #128	@ 0x80
 800809e:	2101      	movs	r1, #1
 80080a0:	4803      	ldr	r0, [pc, #12]	@ (80080b0 <USBD_LL_Init+0x94>)
 80080a2:	f7fa ff0f 	bl	8002ec4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20002080 	.word	0x20002080

080080b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7f9 fe01 	bl	8001cd2 <HAL_PCD_Start>
 80080d0:	4603      	mov	r3, r0
 80080d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f97e 	bl	80083d8 <USBD_Get_USB_Status>
 80080dc:	4603      	mov	r3, r0
 80080de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	4608      	mov	r0, r1
 80080f4:	4611      	mov	r1, r2
 80080f6:	461a      	mov	r2, r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	70fb      	strb	r3, [r7, #3]
 80080fc:	460b      	mov	r3, r1
 80080fe:	70bb      	strb	r3, [r7, #2]
 8008100:	4613      	mov	r3, r2
 8008102:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008112:	78bb      	ldrb	r3, [r7, #2]
 8008114:	883a      	ldrh	r2, [r7, #0]
 8008116:	78f9      	ldrb	r1, [r7, #3]
 8008118:	f7fa faef 	bl	80026fa <HAL_PCD_EP_Open>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f958 	bl	80083d8 <USBD_Get_USB_Status>
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812c:	7bbb      	ldrb	r3, [r7, #14]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	460b      	mov	r3, r1
 8008140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f7fa fb3a 	bl	80027ce <HAL_PCD_EP_Close>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f939 	bl	80083d8 <USBD_Get_USB_Status>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800816a:	7bbb      	ldrb	r3, [r7, #14]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7fa fbf2 	bl	800297c <HAL_PCD_EP_SetStall>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f91a 	bl	80083d8 <USBD_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	460b      	mov	r3, r1
 80081bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081cc:	78fa      	ldrb	r2, [r7, #3]
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fa fc36 	bl	8002a42 <HAL_PCD_EP_ClrStall>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f8fb 	bl	80083d8 <USBD_Get_USB_Status>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008202:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da0b      	bge.n	8008224 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	3316      	adds	r3, #22
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	e00b      	b.n	800823c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	4613      	mov	r3, r2
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	440b      	add	r3, r1
 8008236:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800823a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800823c:	4618      	mov	r0, r3
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	4611      	mov	r1, r2
 8008266:	4618      	mov	r0, r3
 8008268:	f7fa fa23 	bl	80026b2 <HAL_PCD_SetAddress>
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f8b0 	bl	80083d8 <USBD_Get_USB_Status>
 8008278:	4603      	mov	r3, r0
 800827a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800827c:	7bbb      	ldrb	r3, [r7, #14]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	460b      	mov	r3, r1
 8008294:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80082a4:	7af9      	ldrb	r1, [r7, #11]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	f7fa fb2d 	bl	8002908 <HAL_PCD_EP_Transmit>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f000 f88f 	bl	80083d8 <USBD_Get_USB_Status>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082be:	7dbb      	ldrb	r3, [r7, #22]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	460b      	mov	r3, r1
 80082d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082d8:	2300      	movs	r3, #0
 80082da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80082e6:	7af9      	ldrb	r1, [r7, #11]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	f7fa fab9 	bl	8002862 <HAL_PCD_EP_Receive>
 80082f0:	4603      	mov	r3, r0
 80082f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 f86e 	bl	80083d8 <USBD_Get_USB_Status>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008300:	7dbb      	ldrb	r3, [r7, #22]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800831c:	78fa      	ldrb	r2, [r7, #3]
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f7fa fad9 	bl	80028d8 <HAL_PCD_EP_GetRxCount>
 8008326:	4603      	mov	r3, r0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800833c:	78fb      	ldrb	r3, [r7, #3]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_PCDEx_LPM_Callback+0x18>
 8008342:	2b01      	cmp	r3, #1
 8008344:	d01f      	beq.n	8008386 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008346:	e03b      	b.n	80083c0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	7adb      	ldrb	r3, [r3, #11]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008350:	f000 f83c 	bl	80083cc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008354:	4b1c      	ldr	r3, [pc, #112]	@ (80083c8 <HAL_PCDEx_LPM_Callback+0x98>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	4a1b      	ldr	r2, [pc, #108]	@ (80083c8 <HAL_PCDEx_LPM_Callback+0x98>)
 800835a:	f023 0306 	bic.w	r3, r3, #6
 800835e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	6812      	ldr	r2, [r2, #0]
 800836e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fa54 	bl	800682c <USBD_LL_Resume>
    break;
 8008384:	e01c      	b.n	80083c0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008398:	f043 0301 	orr.w	r3, r3, #1
 800839c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fa25 	bl	80067f4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7adb      	ldrb	r3, [r3, #11]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083b2:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	4a04      	ldr	r2, [pc, #16]	@ (80083c8 <HAL_PCDEx_LPM_Callback+0x98>)
 80083b8:	f043 0306 	orr.w	r3, r3, #6
 80083bc:	6113      	str	r3, [r2, #16]
    break;
 80083be:	bf00      	nop
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed00 	.word	0xe000ed00

080083cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80083d0:	f7f8 fd50 	bl	8000e74 <SystemClock_Config>
}
 80083d4:	bf00      	nop
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d817      	bhi.n	800841c <USBD_Get_USB_Status+0x44>
 80083ec:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <USBD_Get_USB_Status+0x1c>)
 80083ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f2:	bf00      	nop
 80083f4:	08008405 	.word	0x08008405
 80083f8:	0800840b 	.word	0x0800840b
 80083fc:	08008411 	.word	0x08008411
 8008400:	08008417 	.word	0x08008417
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
    break;
 8008408:	e00b      	b.n	8008422 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	73fb      	strb	r3, [r7, #15]
    break;
 800840e:	e008      	b.n	8008422 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008410:	2301      	movs	r3, #1
 8008412:	73fb      	strb	r3, [r7, #15]
    break;
 8008414:	e005      	b.n	8008422 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008416:	2303      	movs	r3, #3
 8008418:	73fb      	strb	r3, [r7, #15]
    break;
 800841a:	e002      	b.n	8008422 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800841c:	2303      	movs	r3, #3
 800841e:	73fb      	strb	r3, [r7, #15]
    break;
 8008420:	bf00      	nop
  }
  return usb_status;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <malloc>:
 8008430:	4b02      	ldr	r3, [pc, #8]	@ (800843c <malloc+0xc>)
 8008432:	4601      	mov	r1, r0
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f000 b82d 	b.w	8008494 <_malloc_r>
 800843a:	bf00      	nop
 800843c:	2000010c 	.word	0x2000010c

08008440 <free>:
 8008440:	4b02      	ldr	r3, [pc, #8]	@ (800844c <free+0xc>)
 8008442:	4601      	mov	r1, r0
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f000 b937 	b.w	80086b8 <_free_r>
 800844a:	bf00      	nop
 800844c:	2000010c 	.word	0x2000010c

08008450 <sbrk_aligned>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4e0f      	ldr	r6, [pc, #60]	@ (8008490 <sbrk_aligned+0x40>)
 8008454:	460c      	mov	r4, r1
 8008456:	6831      	ldr	r1, [r6, #0]
 8008458:	4605      	mov	r5, r0
 800845a:	b911      	cbnz	r1, 8008462 <sbrk_aligned+0x12>
 800845c:	f000 f8e2 	bl	8008624 <_sbrk_r>
 8008460:	6030      	str	r0, [r6, #0]
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f000 f8dd 	bl	8008624 <_sbrk_r>
 800846a:	1c43      	adds	r3, r0, #1
 800846c:	d103      	bne.n	8008476 <sbrk_aligned+0x26>
 800846e:	f04f 34ff 	mov.w	r4, #4294967295
 8008472:	4620      	mov	r0, r4
 8008474:	bd70      	pop	{r4, r5, r6, pc}
 8008476:	1cc4      	adds	r4, r0, #3
 8008478:	f024 0403 	bic.w	r4, r4, #3
 800847c:	42a0      	cmp	r0, r4
 800847e:	d0f8      	beq.n	8008472 <sbrk_aligned+0x22>
 8008480:	1a21      	subs	r1, r4, r0
 8008482:	4628      	mov	r0, r5
 8008484:	f000 f8ce 	bl	8008624 <_sbrk_r>
 8008488:	3001      	adds	r0, #1
 800848a:	d1f2      	bne.n	8008472 <sbrk_aligned+0x22>
 800848c:	e7ef      	b.n	800846e <sbrk_aligned+0x1e>
 800848e:	bf00      	nop
 8008490:	20002560 	.word	0x20002560

08008494 <_malloc_r>:
 8008494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008498:	1ccd      	adds	r5, r1, #3
 800849a:	f025 0503 	bic.w	r5, r5, #3
 800849e:	3508      	adds	r5, #8
 80084a0:	2d0c      	cmp	r5, #12
 80084a2:	bf38      	it	cc
 80084a4:	250c      	movcc	r5, #12
 80084a6:	2d00      	cmp	r5, #0
 80084a8:	4606      	mov	r6, r0
 80084aa:	db01      	blt.n	80084b0 <_malloc_r+0x1c>
 80084ac:	42a9      	cmp	r1, r5
 80084ae:	d904      	bls.n	80084ba <_malloc_r+0x26>
 80084b0:	230c      	movs	r3, #12
 80084b2:	6033      	str	r3, [r6, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008590 <_malloc_r+0xfc>
 80084be:	f000 f869 	bl	8008594 <__malloc_lock>
 80084c2:	f8d8 3000 	ldr.w	r3, [r8]
 80084c6:	461c      	mov	r4, r3
 80084c8:	bb44      	cbnz	r4, 800851c <_malloc_r+0x88>
 80084ca:	4629      	mov	r1, r5
 80084cc:	4630      	mov	r0, r6
 80084ce:	f7ff ffbf 	bl	8008450 <sbrk_aligned>
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	4604      	mov	r4, r0
 80084d6:	d158      	bne.n	800858a <_malloc_r+0xf6>
 80084d8:	f8d8 4000 	ldr.w	r4, [r8]
 80084dc:	4627      	mov	r7, r4
 80084de:	2f00      	cmp	r7, #0
 80084e0:	d143      	bne.n	800856a <_malloc_r+0xd6>
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	d04b      	beq.n	800857e <_malloc_r+0xea>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	4639      	mov	r1, r7
 80084ea:	4630      	mov	r0, r6
 80084ec:	eb04 0903 	add.w	r9, r4, r3
 80084f0:	f000 f898 	bl	8008624 <_sbrk_r>
 80084f4:	4581      	cmp	r9, r0
 80084f6:	d142      	bne.n	800857e <_malloc_r+0xea>
 80084f8:	6821      	ldr	r1, [r4, #0]
 80084fa:	1a6d      	subs	r5, r5, r1
 80084fc:	4629      	mov	r1, r5
 80084fe:	4630      	mov	r0, r6
 8008500:	f7ff ffa6 	bl	8008450 <sbrk_aligned>
 8008504:	3001      	adds	r0, #1
 8008506:	d03a      	beq.n	800857e <_malloc_r+0xea>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	442b      	add	r3, r5
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	f8d8 3000 	ldr.w	r3, [r8]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	bb62      	cbnz	r2, 8008570 <_malloc_r+0xdc>
 8008516:	f8c8 7000 	str.w	r7, [r8]
 800851a:	e00f      	b.n	800853c <_malloc_r+0xa8>
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	1b52      	subs	r2, r2, r5
 8008520:	d420      	bmi.n	8008564 <_malloc_r+0xd0>
 8008522:	2a0b      	cmp	r2, #11
 8008524:	d917      	bls.n	8008556 <_malloc_r+0xc2>
 8008526:	1961      	adds	r1, r4, r5
 8008528:	42a3      	cmp	r3, r4
 800852a:	6025      	str	r5, [r4, #0]
 800852c:	bf18      	it	ne
 800852e:	6059      	strne	r1, [r3, #4]
 8008530:	6863      	ldr	r3, [r4, #4]
 8008532:	bf08      	it	eq
 8008534:	f8c8 1000 	streq.w	r1, [r8]
 8008538:	5162      	str	r2, [r4, r5]
 800853a:	604b      	str	r3, [r1, #4]
 800853c:	4630      	mov	r0, r6
 800853e:	f000 f82f 	bl	80085a0 <__malloc_unlock>
 8008542:	f104 000b 	add.w	r0, r4, #11
 8008546:	1d23      	adds	r3, r4, #4
 8008548:	f020 0007 	bic.w	r0, r0, #7
 800854c:	1ac2      	subs	r2, r0, r3
 800854e:	bf1c      	itt	ne
 8008550:	1a1b      	subne	r3, r3, r0
 8008552:	50a3      	strne	r3, [r4, r2]
 8008554:	e7af      	b.n	80084b6 <_malloc_r+0x22>
 8008556:	6862      	ldr	r2, [r4, #4]
 8008558:	42a3      	cmp	r3, r4
 800855a:	bf0c      	ite	eq
 800855c:	f8c8 2000 	streq.w	r2, [r8]
 8008560:	605a      	strne	r2, [r3, #4]
 8008562:	e7eb      	b.n	800853c <_malloc_r+0xa8>
 8008564:	4623      	mov	r3, r4
 8008566:	6864      	ldr	r4, [r4, #4]
 8008568:	e7ae      	b.n	80084c8 <_malloc_r+0x34>
 800856a:	463c      	mov	r4, r7
 800856c:	687f      	ldr	r7, [r7, #4]
 800856e:	e7b6      	b.n	80084de <_malloc_r+0x4a>
 8008570:	461a      	mov	r2, r3
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	42a3      	cmp	r3, r4
 8008576:	d1fb      	bne.n	8008570 <_malloc_r+0xdc>
 8008578:	2300      	movs	r3, #0
 800857a:	6053      	str	r3, [r2, #4]
 800857c:	e7de      	b.n	800853c <_malloc_r+0xa8>
 800857e:	230c      	movs	r3, #12
 8008580:	6033      	str	r3, [r6, #0]
 8008582:	4630      	mov	r0, r6
 8008584:	f000 f80c 	bl	80085a0 <__malloc_unlock>
 8008588:	e794      	b.n	80084b4 <_malloc_r+0x20>
 800858a:	6005      	str	r5, [r0, #0]
 800858c:	e7d6      	b.n	800853c <_malloc_r+0xa8>
 800858e:	bf00      	nop
 8008590:	20002564 	.word	0x20002564

08008594 <__malloc_lock>:
 8008594:	4801      	ldr	r0, [pc, #4]	@ (800859c <__malloc_lock+0x8>)
 8008596:	f000 b87f 	b.w	8008698 <__retarget_lock_acquire_recursive>
 800859a:	bf00      	nop
 800859c:	200026a4 	.word	0x200026a4

080085a0 <__malloc_unlock>:
 80085a0:	4801      	ldr	r0, [pc, #4]	@ (80085a8 <__malloc_unlock+0x8>)
 80085a2:	f000 b87a 	b.w	800869a <__retarget_lock_release_recursive>
 80085a6:	bf00      	nop
 80085a8:	200026a4 	.word	0x200026a4

080085ac <sniprintf>:
 80085ac:	b40c      	push	{r2, r3}
 80085ae:	b530      	push	{r4, r5, lr}
 80085b0:	4b17      	ldr	r3, [pc, #92]	@ (8008610 <sniprintf+0x64>)
 80085b2:	1e0c      	subs	r4, r1, #0
 80085b4:	681d      	ldr	r5, [r3, #0]
 80085b6:	b09d      	sub	sp, #116	@ 0x74
 80085b8:	da08      	bge.n	80085cc <sniprintf+0x20>
 80085ba:	238b      	movs	r3, #139	@ 0x8b
 80085bc:	602b      	str	r3, [r5, #0]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	b01d      	add	sp, #116	@ 0x74
 80085c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c8:	b002      	add	sp, #8
 80085ca:	4770      	bx	lr
 80085cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80085d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80085d4:	bf14      	ite	ne
 80085d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80085da:	4623      	moveq	r3, r4
 80085dc:	9304      	str	r3, [sp, #16]
 80085de:	9307      	str	r3, [sp, #28]
 80085e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80085e4:	9002      	str	r0, [sp, #8]
 80085e6:	9006      	str	r0, [sp, #24]
 80085e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80085ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085ee:	ab21      	add	r3, sp, #132	@ 0x84
 80085f0:	a902      	add	r1, sp, #8
 80085f2:	4628      	mov	r0, r5
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	f000 f905 	bl	8008804 <_svfiprintf_r>
 80085fa:	1c43      	adds	r3, r0, #1
 80085fc:	bfbc      	itt	lt
 80085fe:	238b      	movlt	r3, #139	@ 0x8b
 8008600:	602b      	strlt	r3, [r5, #0]
 8008602:	2c00      	cmp	r4, #0
 8008604:	d0dd      	beq.n	80085c2 <sniprintf+0x16>
 8008606:	9b02      	ldr	r3, [sp, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
 800860c:	e7d9      	b.n	80085c2 <sniprintf+0x16>
 800860e:	bf00      	nop
 8008610:	2000010c 	.word	0x2000010c

08008614 <memset>:
 8008614:	4402      	add	r2, r0
 8008616:	4603      	mov	r3, r0
 8008618:	4293      	cmp	r3, r2
 800861a:	d100      	bne.n	800861e <memset+0xa>
 800861c:	4770      	bx	lr
 800861e:	f803 1b01 	strb.w	r1, [r3], #1
 8008622:	e7f9      	b.n	8008618 <memset+0x4>

08008624 <_sbrk_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d06      	ldr	r5, [pc, #24]	@ (8008640 <_sbrk_r+0x1c>)
 8008628:	2300      	movs	r3, #0
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	602b      	str	r3, [r5, #0]
 8008630:	f7f8 fe70 	bl	8001314 <_sbrk>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_sbrk_r+0x1a>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_sbrk_r+0x1a>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	200026a0 	.word	0x200026a0

08008644 <__errno>:
 8008644:	4b01      	ldr	r3, [pc, #4]	@ (800864c <__errno+0x8>)
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	2000010c 	.word	0x2000010c

08008650 <__libc_init_array>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	4d0d      	ldr	r5, [pc, #52]	@ (8008688 <__libc_init_array+0x38>)
 8008654:	4c0d      	ldr	r4, [pc, #52]	@ (800868c <__libc_init_array+0x3c>)
 8008656:	1b64      	subs	r4, r4, r5
 8008658:	10a4      	asrs	r4, r4, #2
 800865a:	2600      	movs	r6, #0
 800865c:	42a6      	cmp	r6, r4
 800865e:	d109      	bne.n	8008674 <__libc_init_array+0x24>
 8008660:	4d0b      	ldr	r5, [pc, #44]	@ (8008690 <__libc_init_array+0x40>)
 8008662:	4c0c      	ldr	r4, [pc, #48]	@ (8008694 <__libc_init_array+0x44>)
 8008664:	f000 fba8 	bl	8008db8 <_init>
 8008668:	1b64      	subs	r4, r4, r5
 800866a:	10a4      	asrs	r4, r4, #2
 800866c:	2600      	movs	r6, #0
 800866e:	42a6      	cmp	r6, r4
 8008670:	d105      	bne.n	800867e <__libc_init_array+0x2e>
 8008672:	bd70      	pop	{r4, r5, r6, pc}
 8008674:	f855 3b04 	ldr.w	r3, [r5], #4
 8008678:	4798      	blx	r3
 800867a:	3601      	adds	r6, #1
 800867c:	e7ee      	b.n	800865c <__libc_init_array+0xc>
 800867e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008682:	4798      	blx	r3
 8008684:	3601      	adds	r6, #1
 8008686:	e7f2      	b.n	800866e <__libc_init_array+0x1e>
 8008688:	08008f18 	.word	0x08008f18
 800868c:	08008f18 	.word	0x08008f18
 8008690:	08008f18 	.word	0x08008f18
 8008694:	08008f1c 	.word	0x08008f1c

08008698 <__retarget_lock_acquire_recursive>:
 8008698:	4770      	bx	lr

0800869a <__retarget_lock_release_recursive>:
 800869a:	4770      	bx	lr

0800869c <memcpy>:
 800869c:	440a      	add	r2, r1
 800869e:	4291      	cmp	r1, r2
 80086a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a4:	d100      	bne.n	80086a8 <memcpy+0xc>
 80086a6:	4770      	bx	lr
 80086a8:	b510      	push	{r4, lr}
 80086aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b2:	4291      	cmp	r1, r2
 80086b4:	d1f9      	bne.n	80086aa <memcpy+0xe>
 80086b6:	bd10      	pop	{r4, pc}

080086b8 <_free_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4605      	mov	r5, r0
 80086bc:	2900      	cmp	r1, #0
 80086be:	d041      	beq.n	8008744 <_free_r+0x8c>
 80086c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086c4:	1f0c      	subs	r4, r1, #4
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bfb8      	it	lt
 80086ca:	18e4      	addlt	r4, r4, r3
 80086cc:	f7ff ff62 	bl	8008594 <__malloc_lock>
 80086d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008748 <_free_r+0x90>)
 80086d2:	6813      	ldr	r3, [r2, #0]
 80086d4:	b933      	cbnz	r3, 80086e4 <_free_r+0x2c>
 80086d6:	6063      	str	r3, [r4, #4]
 80086d8:	6014      	str	r4, [r2, #0]
 80086da:	4628      	mov	r0, r5
 80086dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086e0:	f7ff bf5e 	b.w	80085a0 <__malloc_unlock>
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	d908      	bls.n	80086fa <_free_r+0x42>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	1821      	adds	r1, r4, r0
 80086ec:	428b      	cmp	r3, r1
 80086ee:	bf01      	itttt	eq
 80086f0:	6819      	ldreq	r1, [r3, #0]
 80086f2:	685b      	ldreq	r3, [r3, #4]
 80086f4:	1809      	addeq	r1, r1, r0
 80086f6:	6021      	streq	r1, [r4, #0]
 80086f8:	e7ed      	b.n	80086d6 <_free_r+0x1e>
 80086fa:	461a      	mov	r2, r3
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	b10b      	cbz	r3, 8008704 <_free_r+0x4c>
 8008700:	42a3      	cmp	r3, r4
 8008702:	d9fa      	bls.n	80086fa <_free_r+0x42>
 8008704:	6811      	ldr	r1, [r2, #0]
 8008706:	1850      	adds	r0, r2, r1
 8008708:	42a0      	cmp	r0, r4
 800870a:	d10b      	bne.n	8008724 <_free_r+0x6c>
 800870c:	6820      	ldr	r0, [r4, #0]
 800870e:	4401      	add	r1, r0
 8008710:	1850      	adds	r0, r2, r1
 8008712:	4283      	cmp	r3, r0
 8008714:	6011      	str	r1, [r2, #0]
 8008716:	d1e0      	bne.n	80086da <_free_r+0x22>
 8008718:	6818      	ldr	r0, [r3, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	6053      	str	r3, [r2, #4]
 800871e:	4408      	add	r0, r1
 8008720:	6010      	str	r0, [r2, #0]
 8008722:	e7da      	b.n	80086da <_free_r+0x22>
 8008724:	d902      	bls.n	800872c <_free_r+0x74>
 8008726:	230c      	movs	r3, #12
 8008728:	602b      	str	r3, [r5, #0]
 800872a:	e7d6      	b.n	80086da <_free_r+0x22>
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	1821      	adds	r1, r4, r0
 8008730:	428b      	cmp	r3, r1
 8008732:	bf04      	itt	eq
 8008734:	6819      	ldreq	r1, [r3, #0]
 8008736:	685b      	ldreq	r3, [r3, #4]
 8008738:	6063      	str	r3, [r4, #4]
 800873a:	bf04      	itt	eq
 800873c:	1809      	addeq	r1, r1, r0
 800873e:	6021      	streq	r1, [r4, #0]
 8008740:	6054      	str	r4, [r2, #4]
 8008742:	e7ca      	b.n	80086da <_free_r+0x22>
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	bf00      	nop
 8008748:	20002564 	.word	0x20002564

0800874c <__ssputs_r>:
 800874c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	688e      	ldr	r6, [r1, #8]
 8008752:	461f      	mov	r7, r3
 8008754:	42be      	cmp	r6, r7
 8008756:	680b      	ldr	r3, [r1, #0]
 8008758:	4682      	mov	sl, r0
 800875a:	460c      	mov	r4, r1
 800875c:	4690      	mov	r8, r2
 800875e:	d82d      	bhi.n	80087bc <__ssputs_r+0x70>
 8008760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008768:	d026      	beq.n	80087b8 <__ssputs_r+0x6c>
 800876a:	6965      	ldr	r5, [r4, #20]
 800876c:	6909      	ldr	r1, [r1, #16]
 800876e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008772:	eba3 0901 	sub.w	r9, r3, r1
 8008776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800877a:	1c7b      	adds	r3, r7, #1
 800877c:	444b      	add	r3, r9
 800877e:	106d      	asrs	r5, r5, #1
 8008780:	429d      	cmp	r5, r3
 8008782:	bf38      	it	cc
 8008784:	461d      	movcc	r5, r3
 8008786:	0553      	lsls	r3, r2, #21
 8008788:	d527      	bpl.n	80087da <__ssputs_r+0x8e>
 800878a:	4629      	mov	r1, r5
 800878c:	f7ff fe82 	bl	8008494 <_malloc_r>
 8008790:	4606      	mov	r6, r0
 8008792:	b360      	cbz	r0, 80087ee <__ssputs_r+0xa2>
 8008794:	6921      	ldr	r1, [r4, #16]
 8008796:	464a      	mov	r2, r9
 8008798:	f7ff ff80 	bl	800869c <memcpy>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	6126      	str	r6, [r4, #16]
 80087aa:	6165      	str	r5, [r4, #20]
 80087ac:	444e      	add	r6, r9
 80087ae:	eba5 0509 	sub.w	r5, r5, r9
 80087b2:	6026      	str	r6, [r4, #0]
 80087b4:	60a5      	str	r5, [r4, #8]
 80087b6:	463e      	mov	r6, r7
 80087b8:	42be      	cmp	r6, r7
 80087ba:	d900      	bls.n	80087be <__ssputs_r+0x72>
 80087bc:	463e      	mov	r6, r7
 80087be:	6820      	ldr	r0, [r4, #0]
 80087c0:	4632      	mov	r2, r6
 80087c2:	4641      	mov	r1, r8
 80087c4:	f000 faa8 	bl	8008d18 <memmove>
 80087c8:	68a3      	ldr	r3, [r4, #8]
 80087ca:	1b9b      	subs	r3, r3, r6
 80087cc:	60a3      	str	r3, [r4, #8]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	4433      	add	r3, r6
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	2000      	movs	r0, #0
 80087d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087da:	462a      	mov	r2, r5
 80087dc:	f000 fab6 	bl	8008d4c <_realloc_r>
 80087e0:	4606      	mov	r6, r0
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1e0      	bne.n	80087a8 <__ssputs_r+0x5c>
 80087e6:	6921      	ldr	r1, [r4, #16]
 80087e8:	4650      	mov	r0, sl
 80087ea:	f7ff ff65 	bl	80086b8 <_free_r>
 80087ee:	230c      	movs	r3, #12
 80087f0:	f8ca 3000 	str.w	r3, [sl]
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	e7e9      	b.n	80087d6 <__ssputs_r+0x8a>
	...

08008804 <_svfiprintf_r>:
 8008804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	4698      	mov	r8, r3
 800880a:	898b      	ldrh	r3, [r1, #12]
 800880c:	061b      	lsls	r3, r3, #24
 800880e:	b09d      	sub	sp, #116	@ 0x74
 8008810:	4607      	mov	r7, r0
 8008812:	460d      	mov	r5, r1
 8008814:	4614      	mov	r4, r2
 8008816:	d510      	bpl.n	800883a <_svfiprintf_r+0x36>
 8008818:	690b      	ldr	r3, [r1, #16]
 800881a:	b973      	cbnz	r3, 800883a <_svfiprintf_r+0x36>
 800881c:	2140      	movs	r1, #64	@ 0x40
 800881e:	f7ff fe39 	bl	8008494 <_malloc_r>
 8008822:	6028      	str	r0, [r5, #0]
 8008824:	6128      	str	r0, [r5, #16]
 8008826:	b930      	cbnz	r0, 8008836 <_svfiprintf_r+0x32>
 8008828:	230c      	movs	r3, #12
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b01d      	add	sp, #116	@ 0x74
 8008832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008836:	2340      	movs	r3, #64	@ 0x40
 8008838:	616b      	str	r3, [r5, #20]
 800883a:	2300      	movs	r3, #0
 800883c:	9309      	str	r3, [sp, #36]	@ 0x24
 800883e:	2320      	movs	r3, #32
 8008840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008844:	f8cd 800c 	str.w	r8, [sp, #12]
 8008848:	2330      	movs	r3, #48	@ 0x30
 800884a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089e8 <_svfiprintf_r+0x1e4>
 800884e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008852:	f04f 0901 	mov.w	r9, #1
 8008856:	4623      	mov	r3, r4
 8008858:	469a      	mov	sl, r3
 800885a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885e:	b10a      	cbz	r2, 8008864 <_svfiprintf_r+0x60>
 8008860:	2a25      	cmp	r2, #37	@ 0x25
 8008862:	d1f9      	bne.n	8008858 <_svfiprintf_r+0x54>
 8008864:	ebba 0b04 	subs.w	fp, sl, r4
 8008868:	d00b      	beq.n	8008882 <_svfiprintf_r+0x7e>
 800886a:	465b      	mov	r3, fp
 800886c:	4622      	mov	r2, r4
 800886e:	4629      	mov	r1, r5
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff ff6b 	bl	800874c <__ssputs_r>
 8008876:	3001      	adds	r0, #1
 8008878:	f000 80a7 	beq.w	80089ca <_svfiprintf_r+0x1c6>
 800887c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800887e:	445a      	add	r2, fp
 8008880:	9209      	str	r2, [sp, #36]	@ 0x24
 8008882:	f89a 3000 	ldrb.w	r3, [sl]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 809f 	beq.w	80089ca <_svfiprintf_r+0x1c6>
 800888c:	2300      	movs	r3, #0
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008896:	f10a 0a01 	add.w	sl, sl, #1
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	9307      	str	r3, [sp, #28]
 800889e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088a4:	4654      	mov	r4, sl
 80088a6:	2205      	movs	r2, #5
 80088a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ac:	484e      	ldr	r0, [pc, #312]	@ (80089e8 <_svfiprintf_r+0x1e4>)
 80088ae:	f7f7 fcdf 	bl	8000270 <memchr>
 80088b2:	9a04      	ldr	r2, [sp, #16]
 80088b4:	b9d8      	cbnz	r0, 80088ee <_svfiprintf_r+0xea>
 80088b6:	06d0      	lsls	r0, r2, #27
 80088b8:	bf44      	itt	mi
 80088ba:	2320      	movmi	r3, #32
 80088bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c0:	0711      	lsls	r1, r2, #28
 80088c2:	bf44      	itt	mi
 80088c4:	232b      	movmi	r3, #43	@ 0x2b
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ca:	f89a 3000 	ldrb.w	r3, [sl]
 80088ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80088d0:	d015      	beq.n	80088fe <_svfiprintf_r+0xfa>
 80088d2:	9a07      	ldr	r2, [sp, #28]
 80088d4:	4654      	mov	r4, sl
 80088d6:	2000      	movs	r0, #0
 80088d8:	f04f 0c0a 	mov.w	ip, #10
 80088dc:	4621      	mov	r1, r4
 80088de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e2:	3b30      	subs	r3, #48	@ 0x30
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d94b      	bls.n	8008980 <_svfiprintf_r+0x17c>
 80088e8:	b1b0      	cbz	r0, 8008918 <_svfiprintf_r+0x114>
 80088ea:	9207      	str	r2, [sp, #28]
 80088ec:	e014      	b.n	8008918 <_svfiprintf_r+0x114>
 80088ee:	eba0 0308 	sub.w	r3, r0, r8
 80088f2:	fa09 f303 	lsl.w	r3, r9, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	46a2      	mov	sl, r4
 80088fc:	e7d2      	b.n	80088a4 <_svfiprintf_r+0xa0>
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	1d19      	adds	r1, r3, #4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	9103      	str	r1, [sp, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfbb      	ittet	lt
 800890a:	425b      	neglt	r3, r3
 800890c:	f042 0202 	orrlt.w	r2, r2, #2
 8008910:	9307      	strge	r3, [sp, #28]
 8008912:	9307      	strlt	r3, [sp, #28]
 8008914:	bfb8      	it	lt
 8008916:	9204      	strlt	r2, [sp, #16]
 8008918:	7823      	ldrb	r3, [r4, #0]
 800891a:	2b2e      	cmp	r3, #46	@ 0x2e
 800891c:	d10a      	bne.n	8008934 <_svfiprintf_r+0x130>
 800891e:	7863      	ldrb	r3, [r4, #1]
 8008920:	2b2a      	cmp	r3, #42	@ 0x2a
 8008922:	d132      	bne.n	800898a <_svfiprintf_r+0x186>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	1d1a      	adds	r2, r3, #4
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	9203      	str	r2, [sp, #12]
 800892c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008930:	3402      	adds	r4, #2
 8008932:	9305      	str	r3, [sp, #20]
 8008934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089f8 <_svfiprintf_r+0x1f4>
 8008938:	7821      	ldrb	r1, [r4, #0]
 800893a:	2203      	movs	r2, #3
 800893c:	4650      	mov	r0, sl
 800893e:	f7f7 fc97 	bl	8000270 <memchr>
 8008942:	b138      	cbz	r0, 8008954 <_svfiprintf_r+0x150>
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	eba0 000a 	sub.w	r0, r0, sl
 800894a:	2240      	movs	r2, #64	@ 0x40
 800894c:	4082      	lsls	r2, r0
 800894e:	4313      	orrs	r3, r2
 8008950:	3401      	adds	r4, #1
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008958:	4824      	ldr	r0, [pc, #144]	@ (80089ec <_svfiprintf_r+0x1e8>)
 800895a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800895e:	2206      	movs	r2, #6
 8008960:	f7f7 fc86 	bl	8000270 <memchr>
 8008964:	2800      	cmp	r0, #0
 8008966:	d036      	beq.n	80089d6 <_svfiprintf_r+0x1d2>
 8008968:	4b21      	ldr	r3, [pc, #132]	@ (80089f0 <_svfiprintf_r+0x1ec>)
 800896a:	bb1b      	cbnz	r3, 80089b4 <_svfiprintf_r+0x1b0>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	3307      	adds	r3, #7
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	3308      	adds	r3, #8
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897a:	4433      	add	r3, r6
 800897c:	9309      	str	r3, [sp, #36]	@ 0x24
 800897e:	e76a      	b.n	8008856 <_svfiprintf_r+0x52>
 8008980:	fb0c 3202 	mla	r2, ip, r2, r3
 8008984:	460c      	mov	r4, r1
 8008986:	2001      	movs	r0, #1
 8008988:	e7a8      	b.n	80088dc <_svfiprintf_r+0xd8>
 800898a:	2300      	movs	r3, #0
 800898c:	3401      	adds	r4, #1
 800898e:	9305      	str	r3, [sp, #20]
 8008990:	4619      	mov	r1, r3
 8008992:	f04f 0c0a 	mov.w	ip, #10
 8008996:	4620      	mov	r0, r4
 8008998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800899c:	3a30      	subs	r2, #48	@ 0x30
 800899e:	2a09      	cmp	r2, #9
 80089a0:	d903      	bls.n	80089aa <_svfiprintf_r+0x1a6>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0c6      	beq.n	8008934 <_svfiprintf_r+0x130>
 80089a6:	9105      	str	r1, [sp, #20]
 80089a8:	e7c4      	b.n	8008934 <_svfiprintf_r+0x130>
 80089aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80089ae:	4604      	mov	r4, r0
 80089b0:	2301      	movs	r3, #1
 80089b2:	e7f0      	b.n	8008996 <_svfiprintf_r+0x192>
 80089b4:	ab03      	add	r3, sp, #12
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	462a      	mov	r2, r5
 80089ba:	4b0e      	ldr	r3, [pc, #56]	@ (80089f4 <_svfiprintf_r+0x1f0>)
 80089bc:	a904      	add	r1, sp, #16
 80089be:	4638      	mov	r0, r7
 80089c0:	f3af 8000 	nop.w
 80089c4:	1c42      	adds	r2, r0, #1
 80089c6:	4606      	mov	r6, r0
 80089c8:	d1d6      	bne.n	8008978 <_svfiprintf_r+0x174>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	065b      	lsls	r3, r3, #25
 80089ce:	f53f af2d 	bmi.w	800882c <_svfiprintf_r+0x28>
 80089d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d4:	e72c      	b.n	8008830 <_svfiprintf_r+0x2c>
 80089d6:	ab03      	add	r3, sp, #12
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	462a      	mov	r2, r5
 80089dc:	4b05      	ldr	r3, [pc, #20]	@ (80089f4 <_svfiprintf_r+0x1f0>)
 80089de:	a904      	add	r1, sp, #16
 80089e0:	4638      	mov	r0, r7
 80089e2:	f000 f879 	bl	8008ad8 <_printf_i>
 80089e6:	e7ed      	b.n	80089c4 <_svfiprintf_r+0x1c0>
 80089e8:	08008edc 	.word	0x08008edc
 80089ec:	08008ee6 	.word	0x08008ee6
 80089f0:	00000000 	.word	0x00000000
 80089f4:	0800874d 	.word	0x0800874d
 80089f8:	08008ee2 	.word	0x08008ee2

080089fc <_printf_common>:
 80089fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a00:	4616      	mov	r6, r2
 8008a02:	4698      	mov	r8, r3
 8008a04:	688a      	ldr	r2, [r1, #8]
 8008a06:	690b      	ldr	r3, [r1, #16]
 8008a08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bfb8      	it	lt
 8008a10:	4613      	movlt	r3, r2
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a18:	4607      	mov	r7, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	b10a      	cbz	r2, 8008a22 <_printf_common+0x26>
 8008a1e:	3301      	adds	r3, #1
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	0699      	lsls	r1, r3, #26
 8008a26:	bf42      	ittt	mi
 8008a28:	6833      	ldrmi	r3, [r6, #0]
 8008a2a:	3302      	addmi	r3, #2
 8008a2c:	6033      	strmi	r3, [r6, #0]
 8008a2e:	6825      	ldr	r5, [r4, #0]
 8008a30:	f015 0506 	ands.w	r5, r5, #6
 8008a34:	d106      	bne.n	8008a44 <_printf_common+0x48>
 8008a36:	f104 0a19 	add.w	sl, r4, #25
 8008a3a:	68e3      	ldr	r3, [r4, #12]
 8008a3c:	6832      	ldr	r2, [r6, #0]
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	42ab      	cmp	r3, r5
 8008a42:	dc26      	bgt.n	8008a92 <_printf_common+0x96>
 8008a44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	3b00      	subs	r3, #0
 8008a4c:	bf18      	it	ne
 8008a4e:	2301      	movne	r3, #1
 8008a50:	0692      	lsls	r2, r2, #26
 8008a52:	d42b      	bmi.n	8008aac <_printf_common+0xb0>
 8008a54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	47c8      	blx	r9
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d01e      	beq.n	8008aa0 <_printf_common+0xa4>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	f003 0306 	and.w	r3, r3, #6
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	bf02      	ittt	eq
 8008a6e:	68e5      	ldreq	r5, [r4, #12]
 8008a70:	6833      	ldreq	r3, [r6, #0]
 8008a72:	1aed      	subeq	r5, r5, r3
 8008a74:	68a3      	ldr	r3, [r4, #8]
 8008a76:	bf0c      	ite	eq
 8008a78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a7c:	2500      	movne	r5, #0
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	bfc4      	itt	gt
 8008a82:	1a9b      	subgt	r3, r3, r2
 8008a84:	18ed      	addgt	r5, r5, r3
 8008a86:	2600      	movs	r6, #0
 8008a88:	341a      	adds	r4, #26
 8008a8a:	42b5      	cmp	r5, r6
 8008a8c:	d11a      	bne.n	8008ac4 <_printf_common+0xc8>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e008      	b.n	8008aa4 <_printf_common+0xa8>
 8008a92:	2301      	movs	r3, #1
 8008a94:	4652      	mov	r2, sl
 8008a96:	4641      	mov	r1, r8
 8008a98:	4638      	mov	r0, r7
 8008a9a:	47c8      	blx	r9
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d103      	bne.n	8008aa8 <_printf_common+0xac>
 8008aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	3501      	adds	r5, #1
 8008aaa:	e7c6      	b.n	8008a3a <_printf_common+0x3e>
 8008aac:	18e1      	adds	r1, r4, r3
 8008aae:	1c5a      	adds	r2, r3, #1
 8008ab0:	2030      	movs	r0, #48	@ 0x30
 8008ab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ab6:	4422      	add	r2, r4
 8008ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	e7c7      	b.n	8008a54 <_printf_common+0x58>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	4641      	mov	r1, r8
 8008aca:	4638      	mov	r0, r7
 8008acc:	47c8      	blx	r9
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d0e6      	beq.n	8008aa0 <_printf_common+0xa4>
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	e7d9      	b.n	8008a8a <_printf_common+0x8e>
	...

08008ad8 <_printf_i>:
 8008ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	7e0f      	ldrb	r7, [r1, #24]
 8008ade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae0:	2f78      	cmp	r7, #120	@ 0x78
 8008ae2:	4691      	mov	r9, r2
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	469a      	mov	sl, r3
 8008aea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aee:	d807      	bhi.n	8008b00 <_printf_i+0x28>
 8008af0:	2f62      	cmp	r7, #98	@ 0x62
 8008af2:	d80a      	bhi.n	8008b0a <_printf_i+0x32>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	f000 80d2 	beq.w	8008c9e <_printf_i+0x1c6>
 8008afa:	2f58      	cmp	r7, #88	@ 0x58
 8008afc:	f000 80b9 	beq.w	8008c72 <_printf_i+0x19a>
 8008b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b08:	e03a      	b.n	8008b80 <_printf_i+0xa8>
 8008b0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b0e:	2b15      	cmp	r3, #21
 8008b10:	d8f6      	bhi.n	8008b00 <_printf_i+0x28>
 8008b12:	a101      	add	r1, pc, #4	@ (adr r1, 8008b18 <_printf_i+0x40>)
 8008b14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b18:	08008b71 	.word	0x08008b71
 8008b1c:	08008b85 	.word	0x08008b85
 8008b20:	08008b01 	.word	0x08008b01
 8008b24:	08008b01 	.word	0x08008b01
 8008b28:	08008b01 	.word	0x08008b01
 8008b2c:	08008b01 	.word	0x08008b01
 8008b30:	08008b85 	.word	0x08008b85
 8008b34:	08008b01 	.word	0x08008b01
 8008b38:	08008b01 	.word	0x08008b01
 8008b3c:	08008b01 	.word	0x08008b01
 8008b40:	08008b01 	.word	0x08008b01
 8008b44:	08008c85 	.word	0x08008c85
 8008b48:	08008baf 	.word	0x08008baf
 8008b4c:	08008c3f 	.word	0x08008c3f
 8008b50:	08008b01 	.word	0x08008b01
 8008b54:	08008b01 	.word	0x08008b01
 8008b58:	08008ca7 	.word	0x08008ca7
 8008b5c:	08008b01 	.word	0x08008b01
 8008b60:	08008baf 	.word	0x08008baf
 8008b64:	08008b01 	.word	0x08008b01
 8008b68:	08008b01 	.word	0x08008b01
 8008b6c:	08008c47 	.word	0x08008c47
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	1d1a      	adds	r2, r3, #4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6032      	str	r2, [r6, #0]
 8008b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b80:	2301      	movs	r3, #1
 8008b82:	e09d      	b.n	8008cc0 <_printf_i+0x1e8>
 8008b84:	6833      	ldr	r3, [r6, #0]
 8008b86:	6820      	ldr	r0, [r4, #0]
 8008b88:	1d19      	adds	r1, r3, #4
 8008b8a:	6031      	str	r1, [r6, #0]
 8008b8c:	0606      	lsls	r6, r0, #24
 8008b8e:	d501      	bpl.n	8008b94 <_printf_i+0xbc>
 8008b90:	681d      	ldr	r5, [r3, #0]
 8008b92:	e003      	b.n	8008b9c <_printf_i+0xc4>
 8008b94:	0645      	lsls	r5, r0, #25
 8008b96:	d5fb      	bpl.n	8008b90 <_printf_i+0xb8>
 8008b98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b9c:	2d00      	cmp	r5, #0
 8008b9e:	da03      	bge.n	8008ba8 <_printf_i+0xd0>
 8008ba0:	232d      	movs	r3, #45	@ 0x2d
 8008ba2:	426d      	negs	r5, r5
 8008ba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba8:	4859      	ldr	r0, [pc, #356]	@ (8008d10 <_printf_i+0x238>)
 8008baa:	230a      	movs	r3, #10
 8008bac:	e011      	b.n	8008bd2 <_printf_i+0xfa>
 8008bae:	6821      	ldr	r1, [r4, #0]
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	0608      	lsls	r0, r1, #24
 8008bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bb8:	d402      	bmi.n	8008bc0 <_printf_i+0xe8>
 8008bba:	0649      	lsls	r1, r1, #25
 8008bbc:	bf48      	it	mi
 8008bbe:	b2ad      	uxthmi	r5, r5
 8008bc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bc2:	4853      	ldr	r0, [pc, #332]	@ (8008d10 <_printf_i+0x238>)
 8008bc4:	6033      	str	r3, [r6, #0]
 8008bc6:	bf14      	ite	ne
 8008bc8:	230a      	movne	r3, #10
 8008bca:	2308      	moveq	r3, #8
 8008bcc:	2100      	movs	r1, #0
 8008bce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bd2:	6866      	ldr	r6, [r4, #4]
 8008bd4:	60a6      	str	r6, [r4, #8]
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	bfa2      	ittt	ge
 8008bda:	6821      	ldrge	r1, [r4, #0]
 8008bdc:	f021 0104 	bicge.w	r1, r1, #4
 8008be0:	6021      	strge	r1, [r4, #0]
 8008be2:	b90d      	cbnz	r5, 8008be8 <_printf_i+0x110>
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	d04b      	beq.n	8008c80 <_printf_i+0x1a8>
 8008be8:	4616      	mov	r6, r2
 8008bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bee:	fb03 5711 	mls	r7, r3, r1, r5
 8008bf2:	5dc7      	ldrb	r7, [r0, r7]
 8008bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bf8:	462f      	mov	r7, r5
 8008bfa:	42bb      	cmp	r3, r7
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	d9f4      	bls.n	8008bea <_printf_i+0x112>
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d10b      	bne.n	8008c1c <_printf_i+0x144>
 8008c04:	6823      	ldr	r3, [r4, #0]
 8008c06:	07df      	lsls	r7, r3, #31
 8008c08:	d508      	bpl.n	8008c1c <_printf_i+0x144>
 8008c0a:	6923      	ldr	r3, [r4, #16]
 8008c0c:	6861      	ldr	r1, [r4, #4]
 8008c0e:	4299      	cmp	r1, r3
 8008c10:	bfde      	ittt	le
 8008c12:	2330      	movle	r3, #48	@ 0x30
 8008c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c1c:	1b92      	subs	r2, r2, r6
 8008c1e:	6122      	str	r2, [r4, #16]
 8008c20:	f8cd a000 	str.w	sl, [sp]
 8008c24:	464b      	mov	r3, r9
 8008c26:	aa03      	add	r2, sp, #12
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f7ff fee6 	bl	80089fc <_printf_common>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d14a      	bne.n	8008cca <_printf_i+0x1f2>
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	b004      	add	sp, #16
 8008c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	f043 0320 	orr.w	r3, r3, #32
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	4833      	ldr	r0, [pc, #204]	@ (8008d14 <_printf_i+0x23c>)
 8008c48:	2778      	movs	r7, #120	@ 0x78
 8008c4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	6831      	ldr	r1, [r6, #0]
 8008c52:	061f      	lsls	r7, r3, #24
 8008c54:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c58:	d402      	bmi.n	8008c60 <_printf_i+0x188>
 8008c5a:	065f      	lsls	r7, r3, #25
 8008c5c:	bf48      	it	mi
 8008c5e:	b2ad      	uxthmi	r5, r5
 8008c60:	6031      	str	r1, [r6, #0]
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	bf44      	itt	mi
 8008c66:	f043 0320 	orrmi.w	r3, r3, #32
 8008c6a:	6023      	strmi	r3, [r4, #0]
 8008c6c:	b11d      	cbz	r5, 8008c76 <_printf_i+0x19e>
 8008c6e:	2310      	movs	r3, #16
 8008c70:	e7ac      	b.n	8008bcc <_printf_i+0xf4>
 8008c72:	4827      	ldr	r0, [pc, #156]	@ (8008d10 <_printf_i+0x238>)
 8008c74:	e7e9      	b.n	8008c4a <_printf_i+0x172>
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	f023 0320 	bic.w	r3, r3, #32
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	e7f6      	b.n	8008c6e <_printf_i+0x196>
 8008c80:	4616      	mov	r6, r2
 8008c82:	e7bd      	b.n	8008c00 <_printf_i+0x128>
 8008c84:	6833      	ldr	r3, [r6, #0]
 8008c86:	6825      	ldr	r5, [r4, #0]
 8008c88:	6961      	ldr	r1, [r4, #20]
 8008c8a:	1d18      	adds	r0, r3, #4
 8008c8c:	6030      	str	r0, [r6, #0]
 8008c8e:	062e      	lsls	r6, r5, #24
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	d501      	bpl.n	8008c98 <_printf_i+0x1c0>
 8008c94:	6019      	str	r1, [r3, #0]
 8008c96:	e002      	b.n	8008c9e <_printf_i+0x1c6>
 8008c98:	0668      	lsls	r0, r5, #25
 8008c9a:	d5fb      	bpl.n	8008c94 <_printf_i+0x1bc>
 8008c9c:	8019      	strh	r1, [r3, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6123      	str	r3, [r4, #16]
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	e7bc      	b.n	8008c20 <_printf_i+0x148>
 8008ca6:	6833      	ldr	r3, [r6, #0]
 8008ca8:	1d1a      	adds	r2, r3, #4
 8008caa:	6032      	str	r2, [r6, #0]
 8008cac:	681e      	ldr	r6, [r3, #0]
 8008cae:	6862      	ldr	r2, [r4, #4]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7f7 fadc 	bl	8000270 <memchr>
 8008cb8:	b108      	cbz	r0, 8008cbe <_printf_i+0x1e6>
 8008cba:	1b80      	subs	r0, r0, r6
 8008cbc:	6060      	str	r0, [r4, #4]
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc8:	e7aa      	b.n	8008c20 <_printf_i+0x148>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	4632      	mov	r2, r6
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	47d0      	blx	sl
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d0ad      	beq.n	8008c34 <_printf_i+0x15c>
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	079b      	lsls	r3, r3, #30
 8008cdc:	d413      	bmi.n	8008d06 <_printf_i+0x22e>
 8008cde:	68e0      	ldr	r0, [r4, #12]
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	4298      	cmp	r0, r3
 8008ce4:	bfb8      	it	lt
 8008ce6:	4618      	movlt	r0, r3
 8008ce8:	e7a6      	b.n	8008c38 <_printf_i+0x160>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4632      	mov	r2, r6
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	47d0      	blx	sl
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d09d      	beq.n	8008c34 <_printf_i+0x15c>
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	9903      	ldr	r1, [sp, #12]
 8008cfe:	1a5b      	subs	r3, r3, r1
 8008d00:	42ab      	cmp	r3, r5
 8008d02:	dcf2      	bgt.n	8008cea <_printf_i+0x212>
 8008d04:	e7eb      	b.n	8008cde <_printf_i+0x206>
 8008d06:	2500      	movs	r5, #0
 8008d08:	f104 0619 	add.w	r6, r4, #25
 8008d0c:	e7f5      	b.n	8008cfa <_printf_i+0x222>
 8008d0e:	bf00      	nop
 8008d10:	08008eed 	.word	0x08008eed
 8008d14:	08008efe 	.word	0x08008efe

08008d18 <memmove>:
 8008d18:	4288      	cmp	r0, r1
 8008d1a:	b510      	push	{r4, lr}
 8008d1c:	eb01 0402 	add.w	r4, r1, r2
 8008d20:	d902      	bls.n	8008d28 <memmove+0x10>
 8008d22:	4284      	cmp	r4, r0
 8008d24:	4623      	mov	r3, r4
 8008d26:	d807      	bhi.n	8008d38 <memmove+0x20>
 8008d28:	1e43      	subs	r3, r0, #1
 8008d2a:	42a1      	cmp	r1, r4
 8008d2c:	d008      	beq.n	8008d40 <memmove+0x28>
 8008d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d36:	e7f8      	b.n	8008d2a <memmove+0x12>
 8008d38:	4402      	add	r2, r0
 8008d3a:	4601      	mov	r1, r0
 8008d3c:	428a      	cmp	r2, r1
 8008d3e:	d100      	bne.n	8008d42 <memmove+0x2a>
 8008d40:	bd10      	pop	{r4, pc}
 8008d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d4a:	e7f7      	b.n	8008d3c <memmove+0x24>

08008d4c <_realloc_r>:
 8008d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	4680      	mov	r8, r0
 8008d52:	4615      	mov	r5, r2
 8008d54:	460c      	mov	r4, r1
 8008d56:	b921      	cbnz	r1, 8008d62 <_realloc_r+0x16>
 8008d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	f7ff bb99 	b.w	8008494 <_malloc_r>
 8008d62:	b92a      	cbnz	r2, 8008d70 <_realloc_r+0x24>
 8008d64:	f7ff fca8 	bl	80086b8 <_free_r>
 8008d68:	2400      	movs	r4, #0
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d70:	f000 f81a 	bl	8008da8 <_malloc_usable_size_r>
 8008d74:	4285      	cmp	r5, r0
 8008d76:	4606      	mov	r6, r0
 8008d78:	d802      	bhi.n	8008d80 <_realloc_r+0x34>
 8008d7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d7e:	d8f4      	bhi.n	8008d6a <_realloc_r+0x1e>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4640      	mov	r0, r8
 8008d84:	f7ff fb86 	bl	8008494 <_malloc_r>
 8008d88:	4607      	mov	r7, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0ec      	beq.n	8008d68 <_realloc_r+0x1c>
 8008d8e:	42b5      	cmp	r5, r6
 8008d90:	462a      	mov	r2, r5
 8008d92:	4621      	mov	r1, r4
 8008d94:	bf28      	it	cs
 8008d96:	4632      	movcs	r2, r6
 8008d98:	f7ff fc80 	bl	800869c <memcpy>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4640      	mov	r0, r8
 8008da0:	f7ff fc8a 	bl	80086b8 <_free_r>
 8008da4:	463c      	mov	r4, r7
 8008da6:	e7e0      	b.n	8008d6a <_realloc_r+0x1e>

08008da8 <_malloc_usable_size_r>:
 8008da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dac:	1f18      	subs	r0, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bfbc      	itt	lt
 8008db2:	580b      	ldrlt	r3, [r1, r0]
 8008db4:	18c0      	addlt	r0, r0, r3
 8008db6:	4770      	bx	lr

08008db8 <_init>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr

08008dc4 <_fini>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr
