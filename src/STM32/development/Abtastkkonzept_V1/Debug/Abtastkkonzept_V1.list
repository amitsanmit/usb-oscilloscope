
Abtastkkonzept_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e4  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  0000614c  2**0
                  CONTENTS
  4 .ARM          00000008  080046f4  080046f4  000056f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046fc  080046fc  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004704  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004710  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080047b0  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000314bc  2000014c  08004850  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20031608  08004850  00006608  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000129b6  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002665  00000000  00000000  00018b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d88  00000000  00000000  0001b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a6a  00000000  00000000  0001bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028486  00000000  00000000  0001c98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010960  00000000  00000000  00044e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8fd8  00000000  00000000  00055770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014e748  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003864  00000000  00000000  0014e78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  00151ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	080046c4 	.word	0x080046c4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	080046c4 	.word	0x080046c4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	2b00      	cmp	r3, #0
 8000538:	db0b      	blt.n	8000552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	f003 021f 	and.w	r2, r3, #31
 8000540:	4907      	ldr	r1, [pc, #28]	@ (8000560 <__NVIC_EnableIRQ+0x38>)
 8000542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000546:	095b      	lsrs	r3, r3, #5
 8000548:	2001      	movs	r0, #1
 800054a:	fa00 f202 	lsl.w	r2, r0, r2
 800054e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000e100 	.word	0xe000e100

08000564 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db0c      	blt.n	8000590 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	f003 021f 	and.w	r2, r3, #31
 800057c:	4907      	ldr	r1, [pc, #28]	@ (800059c <__NVIC_ClearPendingIRQ+0x38>)
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	095b      	lsrs	r3, r3, #5
 8000584:	2001      	movs	r0, #1
 8000586:	fa00 f202 	lsl.w	r2, r0, r2
 800058a:	3360      	adds	r3, #96	@ 0x60
 800058c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000e100 	.word	0xe000e100

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	@ (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 ff68 	bl	80014ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f85d 	bl	80006bc <SystemClock_Config>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000602:	b672      	cpsid	i
}
 8000604:	bf00      	nop
  /* USER CODE BEGIN SysInit */

  // disable Interrupts globally
  __disable_irq();

  ClockInit();
 8000606:	f000 fa19 	bl	8000a3c <ClockInit>
  GPIO_Init();
 800060a:	f000 fa2b 	bl	8000a64 <GPIO_Init>
  EXTI_Init();
 800060e:	f000 faa3 	bl	8000b58 <EXTI_Init>
  TIM3_Init();
 8000612:	f000 facd 	bl	8000bb0 <TIM3_Init>
  TIM1_Init();
 8000616:	f000 fb09 	bl	8000c2c <TIM1_Init>

  // set the buffersize
  bufferSize = sizeof(samplingDataBuffer)/sizeof(samplingDataBuffer[0]);
 800061a:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <main+0xb0>)
 800061c:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <main+0xb4>)
 800061e:	601a      	str	r2, [r3, #0]
  // calculate the number of rows of the addressArray
  numOfRows = sizeof(addressArray)/sizeof(addressArray[0]);
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <main+0xb8>)
 8000622:	2205      	movs	r2, #5
 8000624:	601a      	str	r2, [r3, #0]
  // fill the buffer (and overflow buffer) with ones
  for(int i = 0; i < bufferSize; i++)
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e008      	b.n	800063e <main+0x4a>
	  samplingDataBuffer[i] = 0xFFFF;
 800062c:	4a20      	ldr	r2, [pc, #128]	@ (80006b0 <main+0xbc>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000634:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < bufferSize; i++)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <main+0xb0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3f1      	bcc.n	800062c <main+0x38>
  for(int i = 0; i < 100; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	e008      	b.n	8000660 <main+0x6c>
	  overflowBuffer[i] = 0xFFFF;
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <main+0xc0>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000656:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < 100; i++)
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2b63      	cmp	r3, #99	@ 0x63
 8000664:	ddf3      	ble.n	800064e <main+0x5a>
  // determine all values for the addressArray
  determineBufferAdresses(samplingDataBuffer, bufferSize, numOfRows, addressArray);
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <main+0xb0>)
 8000668:	6819      	ldr	r1, [r3, #0]
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <main+0xb8>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <main+0xc4>)
 8000670:	480f      	ldr	r0, [pc, #60]	@ (80006b0 <main+0xbc>)
 8000672:	f000 fb3b 	bl	8000cec <determineBufferAdresses>

  // Initialize the DMA
  DMA_Init(bufferSize/(numOfRows*2));
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <main+0xb0>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <main+0xb8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fbb2 f3f3 	udiv	r3, r2, r3
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fb77 	bl	8000d78 <DMA_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800068a:	b662      	cpsie	i
}
 800068c:	bf00      	nop
  // enable Interrupts globally
  __enable_irq();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f933 	bl	80008f8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000692:	f000 f885 	bl	80007a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000696:	f000 f8d1 	bl	800083c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069a:	f000 f8ff 	bl	800089c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <main+0xaa>
 80006a2:	bf00      	nop
 80006a4:	200314f8 	.word	0x200314f8
 80006a8:	000186a0 	.word	0x000186a0
 80006ac:	200315ec 	.word	0x200315ec
 80006b0:	200007b8 	.word	0x200007b8
 80006b4:	200314fc 	.word	0x200314fc
 80006b8:	200315c4 	.word	0x200315c4

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 ffcd 	bl	800466a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e0:	f001 feaa 	bl	8002438 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <SystemClock_Config+0xdc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	4a2b      	ldr	r2, [pc, #172]	@ (8000798 <SystemClock_Config+0xdc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <SystemClock_Config+0xdc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	4b27      	ldr	r3, [pc, #156]	@ (800079c <SystemClock_Config+0xe0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000704:	4a25      	ldr	r2, [pc, #148]	@ (800079c <SystemClock_Config+0xe0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800071c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000720:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000730:	2364      	movs	r3, #100	@ 0x64
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fed7 	bl	80024f8 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000750:	f000 fbbe 	bl	8000ed0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f001 fe80 	bl	8002458 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800075e:	f000 fbb7 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	2103      	movs	r1, #3
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f968 	bl	8002a54 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800078a:	f000 fba1 	bl	8000ed0 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <MX_ETH_Init+0x84>)
 80007a6:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <MX_ETH_Init+0x88>)
 80007a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_ETH_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_ETH_Init+0x8c>)
 80007b2:	2280      	movs	r2, #128	@ 0x80
 80007b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_ETH_Init+0x8c>)
 80007b8:	22e1      	movs	r2, #225	@ 0xe1
 80007ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_ETH_Init+0x8c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_ETH_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_ETH_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <MX_ETH_Init+0x84>)
 80007d0:	4a16      	ldr	r2, [pc, #88]	@ (800082c <MX_ETH_Init+0x8c>)
 80007d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d4:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_ETH_Init+0x84>)
 80007d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007da:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_ETH_Init+0x84>)
 80007de:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <MX_ETH_Init+0x90>)
 80007e0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_ETH_Init+0x84>)
 80007e4:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_ETH_Init+0x94>)
 80007e6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_ETH_Init+0x84>)
 80007ea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007ee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <MX_ETH_Init+0x84>)
 80007f2:	f000 ffd3 	bl	800179c <HAL_ETH_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 fb68 	bl	8000ed0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000800:	2238      	movs	r2, #56	@ 0x38
 8000802:	2100      	movs	r1, #0
 8000804:	480c      	ldr	r0, [pc, #48]	@ (8000838 <MX_ETH_Init+0x98>)
 8000806:	f003 ff30 	bl	800466a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_ETH_Init+0x98>)
 800080c:	2221      	movs	r2, #33	@ 0x21
 800080e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_ETH_Init+0x98>)
 8000812:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000816:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_ETH_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001a0 	.word	0x200001a0
 8000828:	40028000 	.word	0x40028000
 800082c:	200315f4 	.word	0x200315f4
 8000830:	200000ac 	.word	0x200000ac
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000168 	.word	0x20000168

0800083c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000842:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <MX_USART3_UART_Init+0x5c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART3_UART_Init+0x58>)
 8000880:	f002 ff36 	bl	80036f0 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 fb21 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000250 	.word	0x20000250
 8000898:	40004800 	.word	0x40004800

0800089c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2206      	movs	r2, #6
 80008ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2202      	movs	r2, #2
 80008b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	f001 fc6f 	bl	80021c2 <HAL_PCD_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 faf1 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200002d8 	.word	0x200002d8

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	@ 0x30
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b47      	ldr	r3, [pc, #284]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a46      	ldr	r2, [pc, #280]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b44      	ldr	r3, [pc, #272]	@ (8000a2c <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	4b41      	ldr	r3, [pc, #260]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a40      	ldr	r2, [pc, #256]	@ (8000a2c <MX_GPIO_Init+0x134>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b3e      	ldr	r3, [pc, #248]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a3a      	ldr	r2, [pc, #232]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b38      	ldr	r3, [pc, #224]	@ (8000a2c <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b35      	ldr	r3, [pc, #212]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a34      	ldr	r2, [pc, #208]	@ (8000a2c <MX_GPIO_Init+0x134>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b32      	ldr	r3, [pc, #200]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a2e      	ldr	r2, [pc, #184]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a28      	ldr	r2, [pc, #160]	@ (8000a2c <MX_GPIO_Init+0x134>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009a4:	4822      	ldr	r0, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0x138>)
 80009a6:	f001 fbf3 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	@ 0x40
 80009ae:	4821      	ldr	r0, [pc, #132]	@ (8000a34 <MX_GPIO_Init+0x13c>)
 80009b0:	f001 fbee 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481b      	ldr	r0, [pc, #108]	@ (8000a38 <MX_GPIO_Init+0x140>)
 80009cc:	f001 fa34 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_GPIO_Init+0x138>)
 80009ea:	f001 fa25 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ee:	2340      	movs	r3, #64	@ 0x40
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <MX_GPIO_Init+0x13c>)
 8000a06:	f001 fa17 	bl	8001e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_GPIO_Init+0x13c>)
 8000a1e:	f001 fa0b 	bl	8001e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	@ 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020400 	.word	0x40020400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	40020800 	.word	0x40020800

08000a3c <ClockInit>:

/* USER CODE BEGIN 4 */

void ClockInit()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
	uint32_t SysClockFreq = HAL_RCC_GetSysClockFreq();
 8000a42:	f002 f8f3 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8000a46:	60f8      	str	r0, [r7, #12]
	uint32_t APB1Freq = HAL_RCC_GetPCLK1Freq();
 8000a48:	f002 fa02 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8000a4c:	60b8      	str	r0, [r7, #8]
	uint32_t APB2Freq = HAL_RCC_GetPCLK2Freq();
 8000a4e:	f002 fa13 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8000a52:	6078      	str	r0, [r7, #4]
	uint32_t AHBFreq = HAL_RCC_GetHCLKFreq();
 8000a54:	f002 f9f0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8000a58:	6038      	str	r0, [r7, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <GPIO_Init>:

/* function: inititalization of the used GPIOs */
void GPIO_Init()
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	/* GPIO for TIMer output compare event
	 * PE9: TIM1_CH1 (AF1)*/
	/* enable clock for GPIOE */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000a68:	4b32      	ldr	r3, [pc, #200]	@ (8000b34 <GPIO_Init+0xd0>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	4a31      	ldr	r2, [pc, #196]	@ (8000b34 <GPIO_Init+0xd0>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6313      	str	r3, [r2, #48]	@ 0x30
	// PE9->alternate function (MODE: 0b10)
	GPIOE->MODER &= ~GPIO_MODER_MODER9_Msk;
 8000a74:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a7a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000a7e:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= GPIO_MODER_MODER9_1;
 8000a80:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2c      	ldr	r2, [pc, #176]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a8a:	6013      	str	r3, [r2, #0]
	// output speed (very high speed: 0b11)
	GPIOE->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR9_1|GPIO_OSPEEDR_OSPEEDR9_0);
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a29      	ldr	r2, [pc, #164]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a92:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000a96:	6093      	str	r3, [r2, #8]
	// select alternate function AF1 of PE9 (TIM1_CH1)
	GPIOE->AFR[1] &= ~(GPIO_AFRH_AFRH1);
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9c:	4a26      	ldr	r2, [pc, #152]	@ (8000b38 <GPIO_Init+0xd4>)
 8000a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000aa2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOE->AFR[1] |= GPIO_AFRH_AFRH1_0;
 8000aa4:	4b24      	ldr	r3, [pc, #144]	@ (8000b38 <GPIO_Init+0xd4>)
 8000aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aa8:	4a23      	ldr	r2, [pc, #140]	@ (8000b38 <GPIO_Init+0xd4>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6253      	str	r3, [r2, #36]	@ 0x24


	/* GPIO for parallel interface (only input data!)
	 * Port G (PG0..15)*/
	/* enable clock for GPIOG */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <GPIO_Init+0xd0>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b34 <GPIO_Init+0xd0>)
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aba:	6313      	str	r3, [r2, #48]	@ 0x30
	// all GPIOG-Pins except PG6 and PG7 -> input (MODE: 0b00)
	// PG6 and PG7 are used for the USB OTG FS interface
	GPIOG->MODER &= ~(0xFFFF0FFF);
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <GPIO_Init+0xd8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <GPIO_Init+0xd8>)
 8000ac2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000ac6:	6013      	str	r3, [r2, #0]
	// assign pull-downs for defined value of pins
	GPIOG->PUPDR &= ~(0xFFFF0FFF);
 8000ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <GPIO_Init+0xd8>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <GPIO_Init+0xd8>)
 8000ace:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000ad2:	60d3      	str	r3, [r2, #12]
	GPIOG->PUPDR |= GPIO_PUPDR_PUPDR15_1|GPIO_PUPDR_PUPDR14_1|GPIO_PUPDR_PUPDR13_1|
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <GPIO_Init+0xd8>)
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	4918      	ldr	r1, [pc, #96]	@ (8000b3c <GPIO_Init+0xd8>)
 8000ada:	4b19      	ldr	r3, [pc, #100]	@ (8000b40 <GPIO_Init+0xdc>)
 8000adc:	4313      	orrs	r3, r2
 8000ade:	60cb      	str	r3, [r1, #12]


	/* GPIO for button to manually starting sampling
	 * PC13: USR_Btn (NUCLEO-F767)*/
	/* enable clock for GPIOC */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <GPIO_Init+0xd0>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4a13      	ldr	r2, [pc, #76]	@ (8000b34 <GPIO_Init+0xd0>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	@ 0x30
	// USR_Btn->input (MODE: 0b00)
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <GPIO_Init+0xe0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <GPIO_Init+0xe0>)
 8000af2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000af6:	6013      	str	r3, [r2, #0]
	/* GPIO for onboard status LEDs (LD1..3 of NUCLEO-F767)
	 * PB0:  LD1 (green)
	 * PB7:  LD2 (blue)
	 * PB14: LD3 (red) */
	/* enable clock for GPIOB */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <GPIO_Init+0xd0>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <GPIO_Init+0xd0>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	6313      	str	r3, [r2, #48]	@ 0x30
	// turn LD1..3 off
	GPIOB->ODR &= ~(LD1_Pin|LD2_Pin|LD3_Pin);
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <GPIO_Init+0xe4>)
 8000b06:	695a      	ldr	r2, [r3, #20]
 8000b08:	490f      	ldr	r1, [pc, #60]	@ (8000b48 <GPIO_Init+0xe4>)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <GPIO_Init+0xe8>)
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	614b      	str	r3, [r1, #20]
	// LD1..3->output (MODE: 0b01)
	GPIOB->MODER &= ~(GPIO_MODER_MODER0_Msk|GPIO_MODER_MODER7_Msk|GPIO_MODER_MODER14_Msk);
 8000b10:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <GPIO_Init+0xe4>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <GPIO_Init+0xe4>)
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <GPIO_Init+0xec>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	600b      	str	r3, [r1, #0]
	GPIOB->MODER |= (GPIO_MODER_MODER0_0|GPIO_MODER_MODER7_0|GPIO_MODER_MODER14_0);
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <GPIO_Init+0xe4>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4909      	ldr	r1, [pc, #36]	@ (8000b48 <GPIO_Init+0xe4>)
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <GPIO_Init+0xf0>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	600b      	str	r3, [r1, #0]

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	aaaa0aaa 	.word	0xaaaa0aaa
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	ffffbf7e 	.word	0xffffbf7e
 8000b50:	cfff3ffc 	.word	0xcfff3ffc
 8000b54:	10004001 	.word	0x10004001

08000b58 <EXTI_Init>:

// initialization and configuration of EXTI-modules
void EXTI_Init()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	// enable SYSCFG-clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <EXTI_Init+0x4c>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b60:	4a10      	ldr	r2, [pc, #64]	@ (8000ba4 <EXTI_Init+0x4c>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b66:	6453      	str	r3, [r2, #68]	@ 0x44

	/* EXTI13 Configuration for USR_Btn (PC13) */
	// SysCfg configuration EXTI13->PC13
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <EXTI_Init+0x50>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <EXTI_Init+0x50>)
 8000b6e:	f043 0320 	orr.w	r3, r3, #32
 8000b72:	6153      	str	r3, [r2, #20]
	// unmask EXTI13
	EXTI->IMR |= EXTI_IMR_MR13;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <EXTI_Init+0x54>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <EXTI_Init+0x54>)
 8000b7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b7e:	6013      	str	r3, [r2, #0]
	// enable rising edge detection for EXTI13 (USR_Btn is high-active)
	EXTI->RTSR |= EXTI_RTSR_TR13;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <EXTI_Init+0x54>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	4a09      	ldr	r2, [pc, #36]	@ (8000bac <EXTI_Init+0x54>)
 8000b86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b8a:	6093      	str	r3, [r2, #8]
	// NVIC IRQ config for EXTI 10-15
	NVIC_SetPriority(EXTI15_10_IRQn, 15);
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	2028      	movs	r0, #40	@ 0x28
 8000b90:	f7ff fd06 	bl	80005a0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000b94:	2028      	movs	r0, #40	@ 0x28
 8000b96:	f7ff fce5 	bl	8000564 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b9a:	2028      	movs	r0, #40	@ 0x28
 8000b9c:	f7ff fcc4 	bl	8000528 <__NVIC_EnableIRQ>

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40013c00 	.word	0x40013c00

08000bb0 <TIM3_Init>:
}

/* function: initalization of TIM3
 * TIM3 for debouncing USR-Btn */
void TIM3_Init()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	// enable TIM3-clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <TIM3_Init+0x74>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a1a      	ldr	r2, [pc, #104]	@ (8000c24 <TIM3_Init+0x74>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40

	// set clock with prescaler to clock_cnt=clock_in/(PSC+1)
	uint16_t prescaleValueTIM3 = 49999;
 8000bc2:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8000bc6:	80fb      	strh	r3, [r7, #6]
	TIM3->PSC |= prescaleValueTIM3;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <TIM3_Init+0x78>)
 8000bca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	4916      	ldr	r1, [pc, #88]	@ (8000c28 <TIM3_Init+0x78>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	628b      	str	r3, [r1, #40]	@ 0x28
	// APB1-TimerClk is 100MHz -> 100MHz/(49999+1)=2kHz-> Timer-Clock is 2kHz

	// set auto-reload value
	TIM3->ARR &= ~(0xFFFFFFFF);
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <TIM3_Init+0x78>)
 8000bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <TIM3_Init+0x78>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	uint16_t TIM3_ticks = 10;
 8000bde:	230a      	movs	r3, #10
 8000be0:	80bb      	strh	r3, [r7, #4]
	TIM3->ARR |= TIM3_ticks;      // count time: 5ms
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <TIM3_Init+0x78>)
 8000be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	490f      	ldr	r1, [pc, #60]	@ (8000c28 <TIM3_Init+0x78>)
 8000bea:	4313      	orrs	r3, r2
 8000bec:	62cb      	str	r3, [r1, #44]	@ 0x2c

	// enable update interrupt-flag
	TIM3->DIER |= (TIM_DIER_UIE);
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <TIM3_Init+0x78>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <TIM3_Init+0x78>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	60d3      	str	r3, [r2, #12]

	// activate upward counter (default) and one-pulse mode
	TIM3->CR1 |= (TIM_CR1_OPM);
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <TIM3_Init+0x78>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <TIM3_Init+0x78>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6013      	str	r3, [r2, #0]

	// NVIC IRQ config
	NVIC_SetPriority(TIM3_IRQn, 1);
 8000c06:	2101      	movs	r1, #1
 8000c08:	201d      	movs	r0, #29
 8000c0a:	f7ff fcc9 	bl	80005a0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(TIM3_IRQn);
 8000c0e:	201d      	movs	r0, #29
 8000c10:	f7ff fca8 	bl	8000564 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 8000c14:	201d      	movs	r0, #29
 8000c16:	f7ff fc87 	bl	8000528 <__NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40000400 	.word	0x40000400

08000c2c <TIM1_Init>:

/* function: initalization of TIM1
 * TIMer to control the sampling rate / DMA transfer of the ADC	 */
void TIM1_Init()
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

	/* create ADC-Clock (10MHz) at OC-Pin PE9 (TIM1_CH1)
	 * used timer: TIM1 (APB2)
	 * clock: APB2 Timer Clock: 100MHz */
	// enable TIM1-clock
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	@ (8000cdc <TIM1_Init+0xb0>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	4a29      	ldr	r2, [pc, #164]	@ (8000cdc <TIM1_Init+0xb0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6453      	str	r3, [r2, #68]	@ 0x44

	// set clock with prescaler to clock_cnt=clock_in/(PSC+1)
	uint16_t prescaleValueTIM1 = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	80fb      	strh	r3, [r7, #6]
	TIM1->PSC = prescaleValueTIM1;
 8000c42:	4a27      	ldr	r2, [pc, #156]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	6293      	str	r3, [r2, #40]	@ 0x28
	// APB1-TimerClk is 100MHz -> 100MHz/(0+1)=100MHz-> Timer-Clock is 100MHz

	// set auto-reload value
	TIM1->ARR &= ~(0xFFFF);
 8000c48:	4b25      	ldr	r3, [pc, #148]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c4c:	4924      	ldr	r1, [pc, #144]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ce4 <TIM1_Init+0xb8>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	62cb      	str	r3, [r1, #44]	@ 0x2c
	uint16_t TIM1_ticks = 9;
 8000c54:	2309      	movs	r3, #9
 8000c56:	80bb      	strh	r3, [r7, #4]
	TIM1->ARR |= TIM1_ticks; 	// period: (9+1)ticks = 100ns
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c5c:	88bb      	ldrh	r3, [r7, #4]
 8000c5e:	4920      	ldr	r1, [pc, #128]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c60:	4313      	orrs	r3, r2
 8000c62:	62cb      	str	r3, [r1, #44]	@ 0x2c
	// set Capture/Compare register value
	TIM1->CCR1 &= ~(0xFFFF);
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c68:	491d      	ldr	r1, [pc, #116]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <TIM1_Init+0xb8>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	634b      	str	r3, [r1, #52]	@ 0x34
	TIM1->CCR1 |= 5; 			// HIGH for 50ns (duty-cycle=50%)
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c74:	4a1a      	ldr	r2, [pc, #104]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c76:	f043 0305 	orr.w	r3, r3, #5
 8000c7a:	6353      	str	r3, [r2, #52]	@ 0x34
	// capture mode enabled, active high and configure channel as output
	TIM1->CCER |= TIM_CCER_CC1E;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6213      	str	r3, [r2, #32]
	// PWM mode 1 (active: CNT<CCR1, else inactive) (mode: 0b0110)
	TIM1->CCMR1 &= ~(TIM_CCMR1_OC1M);
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c8a:	699a      	ldr	r2, [r3, #24]
 8000c8c:	4914      	ldr	r1, [pc, #80]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <TIM1_Init+0xbc>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	618b      	str	r3, [r1, #24]
	TIM1->CCMR1 |= TIM_CCMR1_OC1M_2|TIM_CCMR1_OC1M_1;
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000c9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c9e:	6193      	str	r3, [r2, #24]
	// CC1 channel configured as output (0b00)
	TIM1->CCMR1 &= ~(TIM_CCMR1_CC1S);
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	6193      	str	r3, [r2, #24]

	// Main output enable (enables OC1)
	TIM1->BDTR |= TIM_BDTR_MOE;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cb6:	6453      	str	r3, [r2, #68]	@ 0x44

	// enable update dma request (used for transferring GPIOG_IDR->SRAM)
	TIM1->DIER |= (TIM_DIER_UDE);
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc2:	60d3      	str	r3, [r2, #12]

	// enable TIM1
	TIM1->CR1 |= TIM_CR1_CEN;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <TIM1_Init+0xb4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	ffff0000 	.word	0xffff0000
 8000ce8:	fffeff8f 	.word	0xfffeff8f

08000cec <determineBufferAdresses>:

// determines all adresses needed in the DMA transfers for the complete buffer
// returns the adresses in a <numOfElements>x2-Array (adress is zero, if invalid)
// used for the memory pointers M0AR (first column) and M1AR (second column) of DMA2
int determineBufferAdresses(uint16_t buffer[], uint32_t bufferSize, uint32_t numOfRows, uint32_t* addressArray[][2])
{
 8000cec:	b480      	push	{r7}
 8000cee:	b08b      	sub	sp, #44	@ 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]
	uint32_t index = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t addressArraySize = numOfRows*2;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
	uint32_t partSize = bufferSize/(addressArraySize);
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
	// if the buffer can't be separated into (numOfRows*2) equal parts -> error
	if(bufferSize%(addressArraySize) != 0)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d16:	69b9      	ldr	r1, [r7, #24]
 8000d18:	fb01 f202 	mul.w	r2, r1, r2
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <determineBufferAdresses+0x3a>
		return 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e022      	b.n	8000d6c <determineBufferAdresses+0x80>
	for(int i = 0; i < numOfRows; i++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
 8000d2a:	e01a      	b.n	8000d62 <determineBufferAdresses+0x76>
	{
		for(int j = 0; j < 2; j++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	e011      	b.n	8000d56 <determineBufferAdresses+0x6a>
		{
			addressArray[i][j] = (uint32_t*)&buffer[index];
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	005a      	lsls	r2, r3, #1
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	6839      	ldr	r1, [r7, #0]
 8000d3c:	440b      	add	r3, r1
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	4411      	add	r1, r2
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			index += partSize;
 8000d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int j = 0; j < 2; j++)
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	ddea      	ble.n	8000d32 <determineBufferAdresses+0x46>
	for(int i = 0; i < numOfRows; i++)
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	623b      	str	r3, [r7, #32]
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8e0      	bhi.n	8000d2c <determineBufferAdresses+0x40>
		}
	}
	return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	372c      	adds	r7, #44	@ 0x2c
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DMA_Init>:

/* function: inititalization of the used DMA */
void DMA_Init(uint32_t numOfTransfers)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	 * used DAM-Controller: DMA2
	 * channel: 6
	 * stream: 5 (TIM1_UP)*/

	// enable DMA2 clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000d80:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb8 <DMA_Init+0x140>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d84:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb8 <DMA_Init+0x140>)
 8000d86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d8a:	6313      	str	r3, [r2, #48]	@ 0x30

	/* following procedure in RM p.267 */

	// 1. disable stream2 of DMA2 & clear all stream-dedicated status-bits
	DMA2_Stream5->CR &= ~(DMA_SxCR_EN);
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ebc <DMA_Init+0x144>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a4a      	ldr	r2, [pc, #296]	@ (8000ebc <DMA_Init+0x144>)
 8000d92:	f023 0301 	bic.w	r3, r3, #1
 8000d96:	6013      	str	r3, [r2, #0]
	while(DMA2_Stream5->CR & DMA_SxCR_EN) {}
 8000d98:	bf00      	nop
 8000d9a:	4b48      	ldr	r3, [pc, #288]	@ (8000ebc <DMA_Init+0x144>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f9      	bne.n	8000d9a <DMA_Init+0x22>
	DMA2->HIFCR |= (DMA_HIFCR_CTCIF5|DMA_HIFCR_CHTIF5|DMA_HIFCR_CTEIF5|DMA_HIFCR_CDMEIF5|DMA_HIFCR_CFEIF5);
 8000da6:	4b46      	ldr	r3, [pc, #280]	@ (8000ec0 <DMA_Init+0x148>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4a45      	ldr	r2, [pc, #276]	@ (8000ec0 <DMA_Init+0x148>)
 8000dac:	f443 6374 	orr.w	r3, r3, #3904	@ 0xf40
 8000db0:	60d3      	str	r3, [r2, #12]

	// 2. set peripheral port (periph2mem: source) address
	// source address is GPIOG_IDR
	DMA2_Stream5->PAR = (uint32_t)&GPIOG->IDR;
 8000db2:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <DMA_Init+0x144>)
 8000db4:	4a43      	ldr	r2, [pc, #268]	@ (8000ec4 <DMA_Init+0x14c>)
 8000db6:	609a      	str	r2, [r3, #8]

	// 3. set memory (periph2mem: destination) addresses
	// initialized with entries of the first row of addressArray
	uint32_t initialM0AR = addressArray[0][0];
 8000db8:	4b43      	ldr	r3, [pc, #268]	@ (8000ec8 <DMA_Init+0x150>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
	uint32_t initialM1AR = addressArray[0][1];
 8000dbe:	4b42      	ldr	r3, [pc, #264]	@ (8000ec8 <DMA_Init+0x150>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	60bb      	str	r3, [r7, #8]
	DMA2_Stream5->M0AR = initialM0AR;
 8000dc4:	4a3d      	ldr	r2, [pc, #244]	@ (8000ebc <DMA_Init+0x144>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	60d3      	str	r3, [r2, #12]
	DMA2_Stream5->M1AR = initialM1AR;
 8000dca:	4a3c      	ldr	r2, [pc, #240]	@ (8000ebc <DMA_Init+0x144>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	6113      	str	r3, [r2, #16]

	// 4. configure total number of transferred items
	DMA2_Stream5->NDTR &= ~(0xFFFF);
 8000dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ebc <DMA_Init+0x144>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4939      	ldr	r1, [pc, #228]	@ (8000ebc <DMA_Init+0x144>)
 8000dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <DMA_Init+0x154>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
	DMA2_Stream5->NDTR |= numOfTransfers;
 8000ddc:	4b37      	ldr	r3, [pc, #220]	@ (8000ebc <DMA_Init+0x144>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4936      	ldr	r1, [pc, #216]	@ (8000ebc <DMA_Init+0x144>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]

	// 5. select DMA channel 6
	DMA2_Stream5->CR &= ~(DMA_SxCR_CHSEL);
 8000de8:	4b34      	ldr	r3, [pc, #208]	@ (8000ebc <DMA_Init+0x144>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a33      	ldr	r2, [pc, #204]	@ (8000ebc <DMA_Init+0x144>)
 8000dee:	f023 53f0 	bic.w	r3, r3, #503316480	@ 0x1e000000
 8000df2:	6013      	str	r3, [r2, #0]
	DMA2_Stream5->CR |= DMA_SxCR_CHSEL_2|DMA_SxCR_CHSEL_1;
 8000df4:	4b31      	ldr	r3, [pc, #196]	@ (8000ebc <DMA_Init+0x144>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a30      	ldr	r2, [pc, #192]	@ (8000ebc <DMA_Init+0x144>)
 8000dfa:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8000dfe:	6013      	str	r3, [r2, #0]

	// 6. (only if peripheral=flow-controller)

	// 7. configure stream priority (0b11:highest - 0b00:lowest)
	DMA2_Stream5->CR &= ~(DMA_SxCR_PL);
 8000e00:	4b2e      	ldr	r3, [pc, #184]	@ (8000ebc <DMA_Init+0x144>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <DMA_Init+0x144>)
 8000e06:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8000e0a:	6013      	str	r3, [r2, #0]
	DMA2_Stream5->CR |= (DMA_SxCR_PL_1|DMA_SxCR_PL_0);	// highest priority
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <DMA_Init+0x144>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2a      	ldr	r2, [pc, #168]	@ (8000ebc <DMA_Init+0x144>)
 8000e12:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000e16:	6013      	str	r3, [r2, #0]

	// 8. configure FIFO usage (default: direct mode (DMDIS=0))
	DMA2_Stream5->FCR &= ~(DMA_SxFCR_DMDIS);
 8000e18:	4b28      	ldr	r3, [pc, #160]	@ (8000ebc <DMA_Init+0x144>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <DMA_Init+0x144>)
 8000e1e:	f023 0304 	bic.w	r3, r3, #4
 8000e22:	6153      	str	r3, [r2, #20]

	// 9.
	// data transfer direction (0b00: periph2mem)
	DMA2_Stream5->CR &= ~(DMA_SxCR_DIR);
 8000e24:	4b25      	ldr	r3, [pc, #148]	@ (8000ebc <DMA_Init+0x144>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a24      	ldr	r2, [pc, #144]	@ (8000ebc <DMA_Init+0x144>)
 8000e2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000e2e:	6013      	str	r3, [r2, #0]
	//DMA2_Stream5->CR |= 0;

	// peripheral (source) increment mode (PINC=0: no increment - fixed address)
	DMA2_Stream5->CR &= ~(DMA_SxCR_PINC);
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <DMA_Init+0x144>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <DMA_Init+0x144>)
 8000e36:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]

	// memory (destination) increment mode (MINC=1: according to MSIZE)
	DMA2_Stream5->CR |= DMA_SxCR_MINC;
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <DMA_Init+0x144>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1e      	ldr	r2, [pc, #120]	@ (8000ebc <DMA_Init+0x144>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]

	// XSIZE[1:0]: (0b00: byte, 0b01: half-word, 0b10: word)
	// peripheral (source) data size
	DMA2_Stream5->CR &= ~(DMA_SxCR_PSIZE);
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <DMA_Init+0x144>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <DMA_Init+0x144>)
 8000e4e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8000e52:	6013      	str	r3, [r2, #0]
	DMA2_Stream5->CR |= (DMA_SxCR_PSIZE_0);	// half-word
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <DMA_Init+0x144>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <DMA_Init+0x144>)
 8000e5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e5e:	6013      	str	r3, [r2, #0]

	// memory (destination) data size
	DMA2_Stream5->CR &= ~(DMA_SxCR_MSIZE);
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <DMA_Init+0x144>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a15      	ldr	r2, [pc, #84]	@ (8000ebc <DMA_Init+0x144>)
 8000e66:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000e6a:	6013      	str	r3, [r2, #0]
	DMA2_Stream5->CR |= (DMA_SxCR_MSIZE_0);	// half-word
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <DMA_Init+0x144>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <DMA_Init+0x144>)
 8000e72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e76:	6013      	str	r3, [r2, #0]

	/* enable double-buffer mode (circular mode is automatically enabled)
	* after one transaction M0AR and M1AR are switched as the destination address
	* while M0AR is active, M1AR can be changed (and vice versa)
	* CR_CT=0 -> M0AR used;	CR_CT=1 -_>M1AR used	(CT: current target) */
	DMA2_Stream5->CR |= (DMA_SxCR_DBM);
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <DMA_Init+0x144>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ebc <DMA_Init+0x144>)
 8000e7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e82:	6013      	str	r3, [r2, #0]

	// enable transfer error interrupt
	DMA2_Stream5->CR |= DMA_SxCR_TCIE;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <DMA_Init+0x144>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0c      	ldr	r2, [pc, #48]	@ (8000ebc <DMA_Init+0x144>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
	// enable transfer complete interrupt
	DMA2_Stream5->CR |= DMA_SxCR_TEIE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <DMA_Init+0x144>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a09      	ldr	r2, [pc, #36]	@ (8000ebc <DMA_Init+0x144>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6013      	str	r3, [r2, #0]

	// configure NVIC for DMA2 stream5 interrupts
	NVIC_SetPriority(DMA2_Stream5_IRQn, 0);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2044      	movs	r0, #68	@ 0x44
 8000ea0:	f7ff fb7e 	bl	80005a0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 8000ea4:	2044      	movs	r0, #68	@ 0x44
 8000ea6:	f7ff fb5d 	bl	8000564 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000eaa:	2044      	movs	r0, #68	@ 0x44
 8000eac:	f7ff fb3c 	bl	8000528 <__NVIC_EnableIRQ>


	// DMA2 stream 5 is enabled, when trigger condition is met
	// currently in another file in the TIM3 Exc. Handler
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40026488 	.word	0x40026488
 8000ec0:	40026400 	.word	0x40026400
 8000ec4:	40021810 	.word	0x40021810
 8000ec8:	200315c4 	.word	0x200315c4
 8000ecc:	ffff0000 	.word	0xffff0000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <Error_Handler+0x8>

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <HAL_MspInit+0x44>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <HAL_MspInit+0x44>)
 8000ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <HAL_MspInit+0x44>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_MspInit+0x44>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_MspInit+0x44>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_MspInit+0x44>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	@ 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4e      	ldr	r2, [pc, #312]	@ (800107c <HAL_ETH_MspInit+0x158>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f040 8096 	bne.w	8001074 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f48:	4b4d      	ldr	r3, [pc, #308]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f4e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f54:	4b4a      	ldr	r3, [pc, #296]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	4b47      	ldr	r3, [pc, #284]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	4a46      	ldr	r2, [pc, #280]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6c:	4b44      	ldr	r3, [pc, #272]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	4b41      	ldr	r3, [pc, #260]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	4a40      	ldr	r2, [pc, #256]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f84:	4b3e      	ldr	r3, [pc, #248]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	4a3a      	ldr	r2, [pc, #232]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9c:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b35      	ldr	r3, [pc, #212]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	4a34      	ldr	r2, [pc, #208]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb4:	4b32      	ldr	r3, [pc, #200]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_ETH_MspInit+0x15c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff0:	2332      	movs	r3, #50	@ 0x32
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001000:	230b      	movs	r3, #11
 8001002:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	481e      	ldr	r0, [pc, #120]	@ (8001084 <HAL_ETH_MspInit+0x160>)
 800100c:	f000 ff14 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001010:	2386      	movs	r3, #134	@ 0x86
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001020:	230b      	movs	r3, #11
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4817      	ldr	r0, [pc, #92]	@ (8001088 <HAL_ETH_MspInit+0x164>)
 800102c:	f000 ff04 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001042:	230b      	movs	r3, #11
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104a:	4619      	mov	r1, r3
 800104c:	480f      	ldr	r0, [pc, #60]	@ (800108c <HAL_ETH_MspInit+0x168>)
 800104e:	f000 fef3 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001052:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	4808      	ldr	r0, [pc, #32]	@ (8001090 <HAL_ETH_MspInit+0x16c>)
 8001070:	f000 fee2 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001074:	bf00      	nop
 8001076:	3738      	adds	r7, #56	@ 0x38
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40028000 	.word	0x40028000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020800 	.word	0x40020800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40021800 	.word	0x40021800

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ae      	sub	sp, #184	@ 0xb8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2290      	movs	r2, #144	@ 0x90
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fad8 	bl	800466a <memset>
  if(huart->Instance==USART3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a22      	ldr	r2, [pc, #136]	@ (8001148 <HAL_UART_MspInit+0xb4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d13c      	bne.n	800113e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fee4 	bl	8002ea0 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010de:	f7ff fef7 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <HAL_UART_MspInit+0xb8>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a19      	ldr	r2, [pc, #100]	@ (800114c <HAL_UART_MspInit+0xb8>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <HAL_UART_MspInit+0xb8>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_UART_MspInit+0xb8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <HAL_UART_MspInit+0xb8>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <HAL_UART_MspInit+0xb8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001112:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800112c:	2307      	movs	r3, #7
 800112e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <HAL_UART_MspInit+0xbc>)
 800113a:	f000 fe7d 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800113e:	bf00      	nop
 8001140:	37b8      	adds	r7, #184	@ 0xb8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004800 	.word	0x40004800
 800114c:	40023800 	.word	0x40023800
 8001150:	40020c00 	.word	0x40020c00

08001154 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0ae      	sub	sp, #184	@ 0xb8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2290      	movs	r2, #144	@ 0x90
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f003 fa78 	bl	800466a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001182:	d166      	bne.n	8001252 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001184:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001188:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800118a:	2360      	movs	r3, #96	@ 0x60
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001192:	2302      	movs	r3, #2
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001196:	2301      	movs	r3, #1
 8001198:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800119e:	2300      	movs	r3, #0
 80011a0:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80011a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80011a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fe76 	bl	8002ea0 <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 80011ba:	f7ff fe89 	bl	8000ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b27      	ldr	r3, [pc, #156]	@ (800125c <HAL_PCD_MspInit+0x108>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a26      	ldr	r2, [pc, #152]	@ (800125c <HAL_PCD_MspInit+0x108>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <HAL_PCD_MspInit+0x108>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011d6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011f0:	230a      	movs	r3, #10
 80011f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4818      	ldr	r0, [pc, #96]	@ (8001260 <HAL_PCD_MspInit+0x10c>)
 80011fe:	f000 fe1b 	bl	8001e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800121a:	4619      	mov	r1, r3
 800121c:	4810      	ldr	r0, [pc, #64]	@ (8001260 <HAL_PCD_MspInit+0x10c>)
 800121e:	f000 fe0b 	bl	8001e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_PCD_MspInit+0x108>)
 8001224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001226:	4a0d      	ldr	r2, [pc, #52]	@ (800125c <HAL_PCD_MspInit+0x108>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122c:	6353      	str	r3, [r2, #52]	@ 0x34
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <HAL_PCD_MspInit+0x108>)
 8001230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <HAL_PCD_MspInit+0x108>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	4a07      	ldr	r2, [pc, #28]	@ (800125c <HAL_PCD_MspInit+0x108>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	6453      	str	r3, [r2, #68]	@ 0x44
 8001246:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_PCD_MspInit+0x108>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001252:	bf00      	nop
 8001254:	37b8      	adds	r7, #184	@ 0xb8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ba:	f000 f945 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <TIM3_IRQHandler>:

/* USER CODE BEGIN 1 */

/* exception handler for TIM4 */
void TIM3_IRQHandler()
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	TIM3->SR &= ~(1 << 0);  	// clear TIM3 pending flag (UIF)
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <TIM3_IRQHandler+0x40>)
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <TIM3_IRQHandler+0x40>)
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	6113      	str	r3, [r2, #16]

	if(GPIOC->IDR & USER_Btn_Pin)
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <TIM3_IRQHandler+0x44>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00c      	beq.n	80012fa <TIM3_IRQHandler+0x36>
	{
		// Test Call by toggling LD2
		GPIOB->ODR ^= LD1_Pin|LD2_Pin|LD3_Pin;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <TIM3_IRQHandler+0x48>)
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	4909      	ldr	r1, [pc, #36]	@ (800130c <TIM3_IRQHandler+0x48>)
 80012e6:	f244 0381 	movw	r3, #16513	@ 0x4081
 80012ea:	4053      	eors	r3, r2
 80012ec:	614b      	str	r3, [r1, #20]

		// enable DMA2Stream5
		DMA2_Stream5->CR |= DMA_SxCR_EN;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <TIM3_IRQHandler+0x4c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <TIM3_IRQHandler+0x4c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]
	}
	// note:
	// clearing UIF at end causes problem, because of pipelining architecture
	// in combination with tailchaining mechanism (ISR is incorrectly called again)
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40000400 	.word	0x40000400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020400 	.word	0x40020400
 8001310:	40026488 	.word	0x40026488

08001314 <EXTI15_10_IRQHandler>:

/* exception handler for EXTI15_10 */
void EXTI15_10_IRQHandler()
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR13;		// clear EXTI13 pending flag
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <EXTI15_10_IRQHandler+0x28>)
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	4a07      	ldr	r2, [pc, #28]	@ (800133c <EXTI15_10_IRQHandler+0x28>)
 800131e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001322:	6153      	str	r3, [r2, #20]

	TIM3->CR1 |= TIM_CR1_CEN;       // enable Counter TIM4
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <EXTI15_10_IRQHandler+0x2c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <EXTI15_10_IRQHandler+0x2c>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40013c00 	.word	0x40013c00
 8001340:	40000400 	.word	0x40000400

08001344 <DMA2_Stream5_IRQHandler>:

/* exception handler for DMA2 Stream5 */
void DMA2_Stream5_IRQHandler()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	static uint32_t M0AR_counter = 0;
	static uint32_t M1AR_counter = 0;

	if(DMA2->HISR & DMA_HISR_TEIF5)			// transfer error interrupt
 8001348:	4b3a      	ldr	r3, [pc, #232]	@ (8001434 <DMA2_Stream5_IRQHandler+0xf0>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <DMA2_Stream5_IRQHandler+0x1e>
	{
		DMA2->HIFCR |= DMA_HIFCR_CTEIF5;	// clear transfer error Interrupt Flag
 8001354:	4b37      	ldr	r3, [pc, #220]	@ (8001434 <DMA2_Stream5_IRQHandler+0xf0>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a36      	ldr	r2, [pc, #216]	@ (8001434 <DMA2_Stream5_IRQHandler+0xf0>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135e:	60d3      	str	r3, [r2, #12]
 8001360:	e03f      	b.n	80013e2 <DMA2_Stream5_IRQHandler+0x9e>
	}
	else if(DMA2->HISR & DMA_HISR_TCIF5)	// transfer complete interrupt
 8001362:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <DMA2_Stream5_IRQHandler+0xf0>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800136a:	2b00      	cmp	r3, #0
 800136c:	d039      	beq.n	80013e2 <DMA2_Stream5_IRQHandler+0x9e>
	{
		DMA2->HIFCR |= DMA_HIFCR_CTCIF5;	// clear transfer complete Interrupt Flag
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <DMA2_Stream5_IRQHandler+0xf0>)
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	4a30      	ldr	r2, [pc, #192]	@ (8001434 <DMA2_Stream5_IRQHandler+0xf0>)
 8001374:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001378:	60d3      	str	r3, [r2, #12]
		// memory pointers (M0AR and M1AR) were swapped
		// check current target (CT)
		if(DMA2_Stream5->CR & DMA_SxCR_CT)	// CT=1 -> M1AR
 800137a:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <DMA2_Stream5_IRQHandler+0x70>
		{
			M0AR_counter++;	// PAR->M0AR was just finished
 8001386:	4b2d      	ldr	r3, [pc, #180]	@ (800143c <DMA2_Stream5_IRQHandler+0xf8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a2b      	ldr	r2, [pc, #172]	@ (800143c <DMA2_Stream5_IRQHandler+0xf8>)
 800138e:	6013      	str	r3, [r2, #0]
			if(M0AR_counter < numOfRows)
 8001390:	4b2a      	ldr	r3, [pc, #168]	@ (800143c <DMA2_Stream5_IRQHandler+0xf8>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <DMA2_Stream5_IRQHandler+0xfc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <DMA2_Stream5_IRQHandler+0x68>
				DMA2_Stream5->M0AR = addressArray[M0AR_counter][0];
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <DMA2_Stream5_IRQHandler+0xf8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a28      	ldr	r2, [pc, #160]	@ (8001444 <DMA2_Stream5_IRQHandler+0x100>)
 80013a2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80013a6:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	e01a      	b.n	80013e2 <DMA2_Stream5_IRQHandler+0x9e>
			else
				DMA2_Stream5->M0AR = &overflowBuffer;
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013ae:	4a26      	ldr	r2, [pc, #152]	@ (8001448 <DMA2_Stream5_IRQHandler+0x104>)
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	e016      	b.n	80013e2 <DMA2_Stream5_IRQHandler+0x9e>
				// Buffer is filled, until DMA2 stream 5 is eventually disabled
		}
		else								// CT=0 ->M0AR
		{
			M1AR_counter++;	// PAR->M1AR was just finished
 80013b4:	4b25      	ldr	r3, [pc, #148]	@ (800144c <DMA2_Stream5_IRQHandler+0x108>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a24      	ldr	r2, [pc, #144]	@ (800144c <DMA2_Stream5_IRQHandler+0x108>)
 80013bc:	6013      	str	r3, [r2, #0]
			if(M1AR_counter < numOfRows)
 80013be:	4b23      	ldr	r3, [pc, #140]	@ (800144c <DMA2_Stream5_IRQHandler+0x108>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <DMA2_Stream5_IRQHandler+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d208      	bcs.n	80013dc <DMA2_Stream5_IRQHandler+0x98>
				DMA2_Stream5->M1AR = addressArray[M1AR_counter][1];
 80013ca:	4b20      	ldr	r3, [pc, #128]	@ (800144c <DMA2_Stream5_IRQHandler+0x108>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001444 <DMA2_Stream5_IRQHandler+0x100>)
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4413      	add	r3, r2
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	e002      	b.n	80013e2 <DMA2_Stream5_IRQHandler+0x9e>
			else
				DMA2_Stream5->M1AR = &overflowBuffer;	// not necessary
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013de:	4a1a      	ldr	r2, [pc, #104]	@ (8001448 <DMA2_Stream5_IRQHandler+0x104>)
 80013e0:	611a      	str	r2, [r3, #16]
				// just for symmetric reasons

		}
	}
	if(M1AR_counter >= numOfRows)	// last transaction of PAR->M1AR just happened
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <DMA2_Stream5_IRQHandler+0x108>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <DMA2_Stream5_IRQHandler+0xfc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d31f      	bcc.n	800142e <DMA2_Stream5_IRQHandler+0xea>
	{
		DMA2_Stream5->CR &= ~(DMA_SxCR_EN);		// disable DMA2 stream 5
 80013ee:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	6013      	str	r3, [r2, #0]
		while(DMA2_Stream5->CR & DMA_SxCR_EN) {}
 80013fa:	bf00      	nop
 80013fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <DMA2_Stream5_IRQHandler+0xf4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f9      	bne.n	80013fc <DMA2_Stream5_IRQHandler+0xb8>

		// set flag, that data is ready
		dataReady = 1;
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <DMA2_Stream5_IRQHandler+0x10c>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]

		// reset counters
		M0AR_counter = 0;
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <DMA2_Stream5_IRQHandler+0xf8>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
		M1AR_counter = 0;
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <DMA2_Stream5_IRQHandler+0x108>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

		// reinitialize DMA2 stream 5
		DMA_Init(bufferSize/(numOfRows*2));
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <DMA2_Stream5_IRQHandler+0x110>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <DMA2_Stream5_IRQHandler+0xfc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fca5 	bl	8000d78 <DMA_Init>
	}
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40026400 	.word	0x40026400
 8001438:	40026488 	.word	0x40026488
 800143c:	200315fc 	.word	0x200315fc
 8001440:	200315ec 	.word	0x200315ec
 8001444:	200315c4 	.word	0x200315c4
 8001448:	200314fc 	.word	0x200314fc
 800144c:	20031600 	.word	0x20031600
 8001450:	200315f0 	.word	0x200315f0
 8001454:	200314f8 	.word	0x200314f8

08001458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001480:	f7ff ffea 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f003 f8e7 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff f8a1 	bl	80005f4 <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014c0:	08004704 	.word	0x08004704
  ldr r2, =_sbss
 80014c4:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80014c8:	20031608 	.word	0x20031608

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>

080014ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f92e 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f805 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014de:	f7ff fcfd 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f93b 	bl	8001782 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f911 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	20000008 	.word	0x20000008
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008
 800156c:	20031604 	.word	0x20031604

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	@ (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20031604 	.word	0x20031604

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008

080015d0 <__NVIC_SetPriorityGrouping>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	@ (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff47 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff5c 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffb0 	bl	80016f0 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e086      	b.n	80018bc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d106      	bne.n	80017c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2223      	movs	r2, #35	@ 0x23
 80017bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fbaf 	bl	8000f24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <HAL_ETH_Init+0x128>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a3e      	ldr	r2, [pc, #248]	@ (80018c4 <HAL_ETH_Init+0x128>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <HAL_ETH_Init+0x128>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017de:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <HAL_ETH_Init+0x12c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a39      	ldr	r2, [pc, #228]	@ (80018c8 <HAL_ETH_Init+0x12c>)
 80017e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80017e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017ea:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_ETH_Init+0x12c>)
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4935      	ldr	r1, [pc, #212]	@ (80018c8 <HAL_ETH_Init+0x12c>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <HAL_ETH_Init+0x12c>)
 80017fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001812:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001814:	f7ff feac 	bl	8001570 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800181a:	e011      	b.n	8001840 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800181c:	f7ff fea8 	bl	8001570 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800182a:	d909      	bls.n	8001840 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2204      	movs	r2, #4
 8001830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	22e0      	movs	r2, #224	@ 0xe0
 8001838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e03d      	b.n	80018bc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1e4      	bne.n	800181c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f97a 	bl	8001b4c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 fa25 	bl	8001ca8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fa7b 	bl	8001d5a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	461a      	mov	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f9e3 	bl	8001c38 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001880:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_ETH_Init+0x130>)
 8001890:	430b      	orrs	r3, r1
 8001892:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80018a6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2210      	movs	r2, #16
 80018b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	00020060 	.word	0x00020060

080018d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <ETH_SetMACConfig+0x164>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	7b9b      	ldrb	r3, [r3, #14]
 80018ee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	7c12      	ldrb	r2, [r2, #16]
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d102      	bne.n	80018fe <ETH_SetMACConfig+0x2e>
 80018f8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80018fc:	e000      	b.n	8001900 <ETH_SetMACConfig+0x30>
 80018fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001900:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	7c52      	ldrb	r2, [r2, #17]
 8001906:	2a00      	cmp	r2, #0
 8001908:	d102      	bne.n	8001910 <ETH_SetMACConfig+0x40>
 800190a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800190e:	e000      	b.n	8001912 <ETH_SetMACConfig+0x42>
 8001910:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001912:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001918:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7fdb      	ldrb	r3, [r3, #31]
 800191e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001920:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001926:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	7f92      	ldrb	r2, [r2, #30]
 800192c:	2a00      	cmp	r2, #0
 800192e:	d102      	bne.n	8001936 <ETH_SetMACConfig+0x66>
 8001930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001934:	e000      	b.n	8001938 <ETH_SetMACConfig+0x68>
 8001936:	2200      	movs	r2, #0
                        macconf->Speed |
 8001938:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	7f1b      	ldrb	r3, [r3, #28]
 800193e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001940:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001946:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800194e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001956:	2a00      	cmp	r2, #0
 8001958:	d102      	bne.n	8001960 <ETH_SetMACConfig+0x90>
 800195a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800195e:	e000      	b.n	8001962 <ETH_SetMACConfig+0x92>
 8001960:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001962:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	7bdb      	ldrb	r3, [r3, #15]
 8001968:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800196a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001970:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001978:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800197a:	4313      	orrs	r3, r2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fdf8 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80019ae:	4013      	ands	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d101      	bne.n	80019c6 <ETH_SetMACConfig+0xf6>
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	e000      	b.n	80019c8 <ETH_SetMACConfig+0xf8>
 80019c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80019d6:	2a01      	cmp	r2, #1
 80019d8:	d101      	bne.n	80019de <ETH_SetMACConfig+0x10e>
 80019da:	2208      	movs	r2, #8
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x110>
 80019de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80019e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80019e8:	2a01      	cmp	r2, #1
 80019ea:	d101      	bne.n	80019f0 <ETH_SetMACConfig+0x120>
 80019ec:	2204      	movs	r2, #4
 80019ee:	e000      	b.n	80019f2 <ETH_SetMACConfig+0x122>
 80019f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80019fa:	2a01      	cmp	r2, #1
 80019fc:	d101      	bne.n	8001a02 <ETH_SetMACConfig+0x132>
 80019fe:	2202      	movs	r2, #2
 8001a00:	e000      	b.n	8001a04 <ETH_SetMACConfig+0x134>
 8001a02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fdb3 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	619a      	str	r2, [r3, #24]
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	fd20810f 	.word	0xfd20810f

08001a38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <ETH_SetDMAConfig+0x110>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	7b1b      	ldrb	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d102      	bne.n	8001a64 <ETH_SetDMAConfig+0x2c>
 8001a5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a62:	e000      	b.n	8001a66 <ETH_SetDMAConfig+0x2e>
 8001a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	7b5b      	ldrb	r3, [r3, #13]
 8001a6a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a6c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	7f52      	ldrb	r2, [r2, #29]
 8001a72:	2a00      	cmp	r2, #0
 8001a74:	d102      	bne.n	8001a7c <ETH_SetDMAConfig+0x44>
 8001a76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a7a:	e000      	b.n	8001a7e <ETH_SetDMAConfig+0x46>
 8001a7c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	7b9b      	ldrb	r3, [r3, #14]
 8001a84:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a86:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a8c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7f1b      	ldrb	r3, [r3, #28]
 8001a92:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a94:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	7f9b      	ldrb	r3, [r3, #30]
 8001a9a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a9c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001aa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aaa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001aac:	4313      	orrs	r3, r2
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001abc:	461a      	mov	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff fd5a 	bl	8001588 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001aec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001af2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001af8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b00:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b02:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b0a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b10:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b1e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f7ff fd2b 	bl	8001588 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	f8de3f23 	.word	0xf8de3f23

08001b4c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b0a6      	sub	sp, #152	@ 0x98
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001bc6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fe7f 	bl	80018d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c0c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c12:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff05 	bl	8001a38 <ETH_SetDMAConfig>
}
 8001c2e:	bf00      	nop
 8001c30:	3798      	adds	r7, #152	@ 0x98
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3305      	adds	r3, #5
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	3204      	adds	r2, #4
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <ETH_MACAddressConfig+0x68>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3303      	adds	r3, #3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	061a      	lsls	r2, r3, #24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <ETH_MACAddressConfig+0x6c>)
 8001c8a:	4413      	add	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40028040 	.word	0x40028040
 8001ca4:	40028044 	.word	0x40028044

08001ca8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e03e      	b.n	8001d34 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68d9      	ldr	r1, [r3, #12]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	3206      	adds	r2, #6
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d80c      	bhi.n	8001d18 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68d9      	ldr	r1, [r3, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	e004      	b.n	8001d22 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d9bd      	bls.n	8001cb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d4c:	611a      	str	r2, [r3, #16]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e048      	b.n	8001dfa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6919      	ldr	r1, [r3, #16]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001da4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	3212      	adds	r2, #18
 8001dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d80c      	bhi.n	8001dea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6919      	ldr	r1, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	461a      	mov	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	e004      	b.n	8001df4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d9b3      	bls.n	8001d68 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e175      	b.n	8002144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8164 	bne.w	800213e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x56>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80be 	beq.w	800213e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	4b66      	ldr	r3, [pc, #408]	@ (800215c <HAL_GPIO_Init+0x324>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a65      	ldr	r2, [pc, #404]	@ (800215c <HAL_GPIO_Init+0x324>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b63      	ldr	r3, [pc, #396]	@ (800215c <HAL_GPIO_Init+0x324>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fda:	4a61      	ldr	r2, [pc, #388]	@ (8002160 <HAL_GPIO_Init+0x328>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <HAL_GPIO_Init+0x32c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d037      	beq.n	8002076 <HAL_GPIO_Init+0x23e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a57      	ldr	r2, [pc, #348]	@ (8002168 <HAL_GPIO_Init+0x330>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d031      	beq.n	8002072 <HAL_GPIO_Init+0x23a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a56      	ldr	r2, [pc, #344]	@ (800216c <HAL_GPIO_Init+0x334>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d02b      	beq.n	800206e <HAL_GPIO_Init+0x236>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a55      	ldr	r2, [pc, #340]	@ (8002170 <HAL_GPIO_Init+0x338>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d025      	beq.n	800206a <HAL_GPIO_Init+0x232>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a54      	ldr	r2, [pc, #336]	@ (8002174 <HAL_GPIO_Init+0x33c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <HAL_GPIO_Init+0x22e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a53      	ldr	r2, [pc, #332]	@ (8002178 <HAL_GPIO_Init+0x340>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d019      	beq.n	8002062 <HAL_GPIO_Init+0x22a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	@ (800217c <HAL_GPIO_Init+0x344>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_GPIO_Init+0x226>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a51      	ldr	r2, [pc, #324]	@ (8002180 <HAL_GPIO_Init+0x348>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00d      	beq.n	800205a <HAL_GPIO_Init+0x222>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a50      	ldr	r2, [pc, #320]	@ (8002184 <HAL_GPIO_Init+0x34c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d007      	beq.n	8002056 <HAL_GPIO_Init+0x21e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4f      	ldr	r2, [pc, #316]	@ (8002188 <HAL_GPIO_Init+0x350>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_GPIO_Init+0x21a>
 800204e:	2309      	movs	r3, #9
 8002050:	e012      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002052:	230a      	movs	r3, #10
 8002054:	e010      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002056:	2308      	movs	r3, #8
 8002058:	e00e      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800205a:	2307      	movs	r3, #7
 800205c:	e00c      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800205e:	2306      	movs	r3, #6
 8002060:	e00a      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002062:	2305      	movs	r3, #5
 8002064:	e008      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_Init+0x240>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x240>
 8002076:	2300      	movs	r3, #0
 8002078:	69fa      	ldr	r2, [r7, #28]
 800207a:	f002 0203 	and.w	r2, r2, #3
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002088:	4935      	ldr	r1, [pc, #212]	@ (8002160 <HAL_GPIO_Init+0x328>)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	3302      	adds	r3, #2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_GPIO_Init+0x354>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ba:	4a34      	ldr	r2, [pc, #208]	@ (800218c <HAL_GPIO_Init+0x354>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c0:	4b32      	ldr	r3, [pc, #200]	@ (800218c <HAL_GPIO_Init+0x354>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e4:	4a29      	ldr	r2, [pc, #164]	@ (800218c <HAL_GPIO_Init+0x354>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ea:	4b28      	ldr	r3, [pc, #160]	@ (800218c <HAL_GPIO_Init+0x354>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210e:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <HAL_GPIO_Init+0x354>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_GPIO_Init+0x354>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002138:	4a14      	ldr	r2, [pc, #80]	@ (800218c <HAL_GPIO_Init+0x354>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3301      	adds	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f ae86 	bls.w	8001e58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3724      	adds	r7, #36	@ 0x24
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40022000 	.word	0x40022000
 8002188:	40022400 	.word	0x40022400
 800218c:	40013c00 	.word	0x40013c00

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af02      	add	r7, sp, #8
 80021c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e108      	b.n	80023e6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe ffb0 	bl	8001154 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002202:	d102      	bne.n	800220a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f001 ff96 	bl	8004140 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7c1a      	ldrb	r2, [r3, #16]
 800221c:	f88d 2000 	strb.w	r2, [sp]
 8002220:	3304      	adds	r3, #4
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	f001 ff32 	bl	800408c <USB_CoreInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0d5      	b.n	80023e6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f001 ff8e 	bl	8004162 <USB_SetCurrentMode>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0c6      	b.n	80023e6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e04a      	b.n	80022f4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4413      	add	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3315      	adds	r3, #21
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	3314      	adds	r3, #20
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	b298      	uxth	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	332e      	adds	r3, #46	@ 0x2e
 800229a:	4602      	mov	r2, r0
 800229c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3318      	adds	r3, #24
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	331c      	adds	r3, #28
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3320      	adds	r3, #32
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3324      	adds	r3, #36	@ 0x24
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3301      	adds	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3af      	bcc.n	800225e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e044      	b.n	800238e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	791b      	ldrb	r3, [r3, #4]
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3b5      	bcc.n	8002304 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7c1a      	ldrb	r2, [r3, #16]
 80023a0:	f88d 2000 	strb.w	r2, [sp]
 80023a4:	3304      	adds	r3, #4
 80023a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a8:	f001 ff28 	bl	80041fc <USB_DevInit>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e013      	b.n	80023e6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7b1b      	ldrb	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f80b 	bl	80023f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 f8e3 	bl	80045aa <USB_DevDisconnect>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800241e:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_PCDEx_ActivateLPM+0x44>)
 8002420:	4313      	orrs	r3, r2
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	10000003 	.word	0x10000003

08002438 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40007000 	.word	0x40007000

08002458 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	@ 0x40
 800246e:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1d      	ldr	r2, [pc, #116]	@ (80024f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002486:	f7ff f873 	bl	8001570 <HAL_GetTick>
 800248a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800248c:	e009      	b.n	80024a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800248e:	f7ff f86f 	bl	8001570 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800249c:	d901      	bls.n	80024a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e022      	b.n	80024e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ae:	d1ee      	bne.n	800248e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0f      	ldr	r2, [pc, #60]	@ (80024f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024bc:	f7ff f858 	bl	8001570 <HAL_GetTick>
 80024c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024c2:	e009      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024c4:	f7ff f854 	bl	8001570 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024d2:	d901      	bls.n	80024d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e007      	b.n	80024e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024e4:	d1ee      	bne.n	80024c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002500:	2300      	movs	r3, #0
 8002502:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e29b      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8087 	beq.w	800262a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800251c:	4b96      	ldr	r3, [pc, #600]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 030c 	and.w	r3, r3, #12
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00c      	beq.n	8002542 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002528:	4b93      	ldr	r3, [pc, #588]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d112      	bne.n	800255a <HAL_RCC_OscConfig+0x62>
 8002534:	4b90      	ldr	r3, [pc, #576]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002540:	d10b      	bne.n	800255a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	4b8d      	ldr	r3, [pc, #564]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d06c      	beq.n	8002628 <HAL_RCC_OscConfig+0x130>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d168      	bne.n	8002628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e275      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002562:	d106      	bne.n	8002572 <HAL_RCC_OscConfig+0x7a>
 8002564:	4b84      	ldr	r3, [pc, #528]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a83      	ldr	r2, [pc, #524]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10c      	bne.n	8002594 <HAL_RCC_OscConfig+0x9c>
 800257a:	4b7f      	ldr	r3, [pc, #508]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7e      	ldr	r2, [pc, #504]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b7c      	ldr	r3, [pc, #496]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a7b      	ldr	r2, [pc, #492]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800258c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0xc0>
 800259e:	4b76      	ldr	r3, [pc, #472]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a75      	ldr	r2, [pc, #468]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b73      	ldr	r3, [pc, #460]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a72      	ldr	r2, [pc, #456]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xd8>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a6e      	ldr	r2, [pc, #440]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe ffca 	bl	8001570 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe ffc6 	bl	8001570 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e229      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b61      	ldr	r3, [pc, #388]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe8>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe ffb6 	bl	8001570 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe ffb2 	bl	8001570 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	@ 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e215      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b57      	ldr	r3, [pc, #348]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x110>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d069      	beq.n	800270a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002636:	4b50      	ldr	r3, [pc, #320]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b4d      	ldr	r3, [pc, #308]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x190>
 800264e:	4b4a      	ldr	r3, [pc, #296]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b47      	ldr	r3, [pc, #284]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x17a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1e9      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	493d      	ldr	r1, [pc, #244]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e040      	b.n	800270a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d023      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b39      	ldr	r3, [pc, #228]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a38      	ldr	r2, [pc, #224]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe ff68 	bl	8001570 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe ff64 	bl	8001570 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1c7      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4929      	ldr	r1, [pc, #164]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
 80026d6:	e018      	b.n	800270a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a26      	ldr	r2, [pc, #152]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe ff44 	bl	8001570 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ec:	f7fe ff40 	bl	8001570 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1a3      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d038      	beq.n	8002788 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d019      	beq.n	8002752 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800271e:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002722:	4a15      	ldr	r2, [pc, #84]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe ff21 	bl	8001570 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7fe ff1d 	bl	8001570 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e180      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002744:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x23a>
 8002750:	e01a      	b.n	8002788 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002756:	4a08      	ldr	r2, [pc, #32]	@ (8002778 <HAL_RCC_OscConfig+0x280>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe ff07 	bl	8001570 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002766:	f7fe ff03 	bl	8001570 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d903      	bls.n	800277c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e166      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
 8002778:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800277c:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800277e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ee      	bne.n	8002766 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a4 	beq.w	80028de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002796:	4b8c      	ldr	r3, [pc, #560]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10d      	bne.n	80027be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b89      	ldr	r3, [pc, #548]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a88      	ldr	r2, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b86      	ldr	r3, [pc, #536]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027be:	4b83      	ldr	r3, [pc, #524]	@ (80029cc <HAL_RCC_OscConfig+0x4d4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d118      	bne.n	80027fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ca:	4b80      	ldr	r3, [pc, #512]	@ (80029cc <HAL_RCC_OscConfig+0x4d4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a7f      	ldr	r2, [pc, #508]	@ (80029cc <HAL_RCC_OscConfig+0x4d4>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027d6:	f7fe fecb 	bl	8001570 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe fec7 	bl	8001570 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b64      	cmp	r3, #100	@ 0x64
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e12a      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f0:	4b76      	ldr	r3, [pc, #472]	@ (80029cc <HAL_RCC_OscConfig+0x4d4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x31a>
 8002804:	4b70      	ldr	r3, [pc, #448]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	4a6f      	ldr	r2, [pc, #444]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002810:	e02d      	b.n	800286e <HAL_RCC_OscConfig+0x376>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x33c>
 800281a:	4b6b      	ldr	r3, [pc, #428]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281e:	4a6a      	ldr	r2, [pc, #424]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
 8002826:	4b68      	ldr	r3, [pc, #416]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	4a67      	ldr	r2, [pc, #412]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6713      	str	r3, [r2, #112]	@ 0x70
 8002832:	e01c      	b.n	800286e <HAL_RCC_OscConfig+0x376>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b05      	cmp	r3, #5
 800283a:	d10c      	bne.n	8002856 <HAL_RCC_OscConfig+0x35e>
 800283c:	4b62      	ldr	r3, [pc, #392]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800283e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002840:	4a61      	ldr	r2, [pc, #388]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	f043 0304 	orr.w	r3, r3, #4
 8002846:	6713      	str	r3, [r2, #112]	@ 0x70
 8002848:	4b5f      	ldr	r3, [pc, #380]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284c:	4a5e      	ldr	r2, [pc, #376]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6713      	str	r3, [r2, #112]	@ 0x70
 8002854:	e00b      	b.n	800286e <HAL_RCC_OscConfig+0x376>
 8002856:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	4a5b      	ldr	r2, [pc, #364]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	@ 0x70
 8002862:	4b59      	ldr	r3, [pc, #356]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a58      	ldr	r2, [pc, #352]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002868:	f023 0304 	bic.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d015      	beq.n	80028a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7fe fe7b 	bl	8001570 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fe77 	bl	8001570 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0d8      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	4b4c      	ldr	r3, [pc, #304]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ee      	beq.n	800287e <HAL_RCC_OscConfig+0x386>
 80028a0:	e014      	b.n	80028cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe fe65 	bl	8001570 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe fe61 	bl	8001570 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0c2      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ee      	bne.n	80028aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d105      	bne.n	80028de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d2:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	4a3c      	ldr	r2, [pc, #240]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80028d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80ae 	beq.w	8002a44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e8:	4b37      	ldr	r3, [pc, #220]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d06d      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d14b      	bne.n	8002994 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a31      	ldr	r2, [pc, #196]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fe32 	bl	8001570 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fe2e 	bl	8001570 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e091      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002922:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69da      	ldr	r2, [r3, #28]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	019b      	lsls	r3, r3, #6
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	3b01      	subs	r3, #1
 8002948:	041b      	lsls	r3, r3, #16
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	071b      	lsls	r3, r3, #28
 800295a:	491b      	ldr	r1, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fe00 	bl	8001570 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fdfc 	bl	8001570 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e05f      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x47c>
 8002992:	e057      	b.n	8002a44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fde6 	bl	8001570 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fde2 	bl	8001570 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e045      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_RCC_OscConfig+0x4d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4b0>
 80029c6:	e03d      	b.n	8002a44 <HAL_RCC_OscConfig+0x54c>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a50 <HAL_RCC_OscConfig+0x558>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d030      	beq.n	8002a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d129      	bne.n	8002a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d122      	bne.n	8002a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d119      	bne.n	8002a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d10f      	bne.n	8002a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800

08002a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d0      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b67      	ldr	r3, [pc, #412]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 020f 	bic.w	r2, r3, #15
 8002a82:	4965      	ldr	r1, [pc, #404]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d040      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d115      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b41      	ldr	r3, [pc, #260]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e073      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3d      	ldr	r3, [pc, #244]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06b      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b39      	ldr	r3, [pc, #228]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4936      	ldr	r1, [pc, #216]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b48:	f7fe fd12 	bl	8001570 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe fd0e 	bl	8001570 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e053      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2d      	ldr	r3, [pc, #180]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b27      	ldr	r3, [pc, #156]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d210      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 020f 	bic.w	r2, r3, #15
 8002b8e:	4922      	ldr	r1, [pc, #136]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_RCC_ClockConfig+0x1c8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	490a      	ldr	r1, [pc, #40]	@ (8002c20 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf8:	5ccb      	ldrb	r3, [r1, r3]
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	@ (8002c24 <HAL_RCC_ClockConfig+0x1d0>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	@ (8002c28 <HAL_RCC_ClockConfig+0x1d4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fc6e 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	080046dc 	.word	0x080046dc
 8002c24:	20000000 	.word	0x20000000
 8002c28:	20000004 	.word	0x20000004

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c30:	b094      	sub	sp, #80	@ 0x50
 8002c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c38:	2300      	movs	r3, #0
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c44:	4b79      	ldr	r3, [pc, #484]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d00d      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	f200 80e1 	bhi.w	8002e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5e:	e0db      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b73      	ldr	r3, [pc, #460]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c64:	e0db      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c66:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c6a:	e0d8      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c76:	4b6d      	ldr	r3, [pc, #436]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c82:	4b6a      	ldr	r3, [pc, #424]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	099b      	lsrs	r3, r3, #6
 8002c88:	2200      	movs	r2, #0
 8002c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	f04f 0000 	mov.w	r0, #0
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	0159      	lsls	r1, r3, #5
 8002cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb0:	0150      	lsls	r0, r2, #5
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	1a51      	subs	r1, r2, r1
 8002cba:	6139      	str	r1, [r7, #16]
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	018b      	lsls	r3, r1, #6
 8002cd4:	4651      	mov	r1, sl
 8002cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cda:	4651      	mov	r1, sl
 8002cdc:	018a      	lsls	r2, r1, #6
 8002cde:	4651      	mov	r1, sl
 8002ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cfe:	4690      	mov	r8, r2
 8002d00:	4699      	mov	r9, r3
 8002d02:	4623      	mov	r3, r4
 8002d04:	eb18 0303 	adds.w	r3, r8, r3
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	eb49 0303 	adc.w	r3, r9, r3
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d1e:	4629      	mov	r1, r5
 8002d20:	024b      	lsls	r3, r1, #9
 8002d22:	4621      	mov	r1, r4
 8002d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d28:	4621      	mov	r1, r4
 8002d2a:	024a      	lsls	r2, r1, #9
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d3c:	f7fd fa7c 	bl	8000238 <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4613      	mov	r3, r2
 8002d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d48:	e058      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	4b38      	ldr	r3, [pc, #224]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	2200      	movs	r2, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	4611      	mov	r1, r2
 8002d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d64:	4642      	mov	r2, r8
 8002d66:	464b      	mov	r3, r9
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0159      	lsls	r1, r3, #5
 8002d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d76:	0150      	lsls	r0, r2, #5
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002da0:	eb63 050b 	sbc.w	r5, r3, fp
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	00eb      	lsls	r3, r5, #3
 8002dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db2:	00e2      	lsls	r2, r4, #3
 8002db4:	4614      	mov	r4, r2
 8002db6:	461d      	mov	r5, r3
 8002db8:	4643      	mov	r3, r8
 8002dba:	18e3      	adds	r3, r4, r3
 8002dbc:	603b      	str	r3, [r7, #0]
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	eb45 0303 	adc.w	r3, r5, r3
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	028b      	lsls	r3, r1, #10
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ddc:	4621      	mov	r1, r4
 8002dde:	028a      	lsls	r2, r1, #10
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de6:	2200      	movs	r2, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	61fa      	str	r2, [r7, #28]
 8002dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df0:	f7fd fa22 	bl	8000238 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e16:	e002      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3750      	adds	r7, #80	@ 0x50
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	007a1200 	.word	0x007a1200

08002e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	@ (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e54:	f7ff fff0 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b05      	ldr	r3, [pc, #20]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4903      	ldr	r1, [pc, #12]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	080046ec 	.word	0x080046ec

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e7c:	f7ff ffdc 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0b5b      	lsrs	r3, r3, #13
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4903      	ldr	r1, [pc, #12]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080046ec 	.word	0x080046ec

08002ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d012      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec8:	4b69      	ldr	r3, [pc, #420]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a68      	ldr	r2, [pc, #416]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	4b66      	ldr	r3, [pc, #408]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002edc:	4964      	ldr	r1, [pc, #400]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002eea:	2301      	movs	r3, #1
 8002eec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efa:	4b5d      	ldr	r3, [pc, #372]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f00:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	4959      	ldr	r1, [pc, #356]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f18:	d101      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d017      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f36:	4b4e      	ldr	r3, [pc, #312]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	494a      	ldr	r1, [pc, #296]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f54:	d101      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f62:	2301      	movs	r3, #1
 8002f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 808b 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	4b3a      	ldr	r3, [pc, #232]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	4a39      	ldr	r2, [pc, #228]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f90:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f9c:	4b35      	ldr	r3, [pc, #212]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a34      	ldr	r2, [pc, #208]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fae2 	bl	8001570 <HAL_GetTick>
 8002fac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb0:	f7fe fade 	bl	8001570 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e38f      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fce:	4b28      	ldr	r3, [pc, #160]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d035      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d02e      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fec:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003002:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	4a1a      	ldr	r2, [pc, #104]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800300e:	4a18      	ldr	r2, [pc, #96]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d114      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe faa6 	bl	8001570 <HAL_GetTick>
 8003024:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	e00a      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe faa2 	bl	8001570 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e351      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	4b0c      	ldr	r3, [pc, #48]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ee      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003056:	d111      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003066:	400b      	ands	r3, r1
 8003068:	4901      	ldr	r1, [pc, #4]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
 800306e:	e00b      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	0ffffcff 	.word	0x0ffffcff
 800307c:	4bac      	ldr	r3, [pc, #688]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4aab      	ldr	r2, [pc, #684]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003082:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	4ba9      	ldr	r3, [pc, #676]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	49a6      	ldr	r1, [pc, #664]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003096:	4313      	orrs	r3, r2
 8003098:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030a6:	4ba2      	ldr	r3, [pc, #648]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030ac:	4aa0      	ldr	r2, [pc, #640]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80030b6:	4b9e      	ldr	r3, [pc, #632]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c0:	499b      	ldr	r1, [pc, #620]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d4:	4b96      	ldr	r3, [pc, #600]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030e2:	4993      	ldr	r1, [pc, #588]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f6:	4b8e      	ldr	r3, [pc, #568]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003104:	498a      	ldr	r1, [pc, #552]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003118:	4b85      	ldr	r3, [pc, #532]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003126:	4982      	ldr	r1, [pc, #520]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800313a:	4b7d      	ldr	r3, [pc, #500]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003148:	4979      	ldr	r1, [pc, #484]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800315c:	4b74      	ldr	r3, [pc, #464]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	f023 0203 	bic.w	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	4971      	ldr	r1, [pc, #452]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800317e:	4b6c      	ldr	r3, [pc, #432]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	f023 020c 	bic.w	r2, r3, #12
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	4968      	ldr	r1, [pc, #416]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031a0:	4b63      	ldr	r3, [pc, #396]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ae:	4960      	ldr	r1, [pc, #384]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	4957      	ldr	r1, [pc, #348]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031e4:	4b52      	ldr	r3, [pc, #328]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	494f      	ldr	r1, [pc, #316]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003206:	4b4a      	ldr	r3, [pc, #296]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800320c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003214:	4946      	ldr	r1, [pc, #280]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003228:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	493e      	ldr	r1, [pc, #248]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800324a:	4b39      	ldr	r3, [pc, #228]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003258:	4935      	ldr	r1, [pc, #212]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800326c:	4b30      	ldr	r3, [pc, #192]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003272:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800327a:	492d      	ldr	r1, [pc, #180]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d011      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800328e:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003294:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800329c:	4924      	ldr	r1, [pc, #144]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ac:	d101      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032ae:	2301      	movs	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ce:	4b18      	ldr	r3, [pc, #96]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032dc:	4914      	ldr	r1, [pc, #80]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003300:	490b      	ldr	r1, [pc, #44]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003324:	4902      	ldr	r1, [pc, #8]	@ (8003330 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003340:	4b8a      	ldr	r3, [pc, #552]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003346:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003350:	4986      	ldr	r1, [pc, #536]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003364:	4b81      	ldr	r3, [pc, #516]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800336a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003374:	497d      	ldr	r1, [pc, #500]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d006      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d6 	beq.w	800353c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003390:	4b76      	ldr	r3, [pc, #472]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a75      	ldr	r2, [pc, #468]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003396:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe f8e8 	bl	8001570 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033a4:	f7fe f8e4 	bl	8001570 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e195      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033b6:	4b6d      	ldr	r3, [pc, #436]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d021      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11d      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033d6:	4b65      	ldr	r3, [pc, #404]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033e4:	4b61      	ldr	r3, [pc, #388]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ea:	0e1b      	lsrs	r3, r3, #24
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	019a      	lsls	r2, r3, #6
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	041b      	lsls	r3, r3, #16
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	071b      	lsls	r3, r3, #28
 800340a:	4958      	ldr	r1, [pc, #352]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02e      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800343c:	d129      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800343e:	4b4b      	ldr	r3, [pc, #300]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800344c:	4b47      	ldr	r3, [pc, #284]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003452:	0f1b      	lsrs	r3, r3, #28
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	019a      	lsls	r2, r3, #6
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	431a      	orrs	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	071b      	lsls	r3, r3, #28
 8003472:	493e      	ldr	r1, [pc, #248]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800347a:	4b3c      	ldr	r3, [pc, #240]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003480:	f023 021f 	bic.w	r2, r3, #31
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	3b01      	subs	r3, #1
 800348a:	4938      	ldr	r1, [pc, #224]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01d      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800349e:	4b33      	ldr	r3, [pc, #204]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a4:	0e1b      	lsrs	r3, r3, #24
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034ac:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b2:	0f1b      	lsrs	r3, r3, #28
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	019a      	lsls	r2, r3, #6
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	071b      	lsls	r3, r3, #28
 80034d2:	4926      	ldr	r1, [pc, #152]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d011      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	019a      	lsls	r2, r3, #6
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	071b      	lsls	r3, r3, #28
 8003502:	491a      	ldr	r1, [pc, #104]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800350a:	4b18      	ldr	r3, [pc, #96]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a17      	ldr	r2, [pc, #92]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003510:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003516:	f7fe f82b 	bl	8001570 <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800351e:	f7fe f827 	bl	8001570 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b64      	cmp	r3, #100	@ 0x64
 800352a:	d901      	bls.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0d8      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003530:	4b0e      	ldr	r3, [pc, #56]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b01      	cmp	r3, #1
 8003540:	f040 80ce 	bne.w	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a08      	ldr	r2, [pc, #32]	@ (800356c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003550:	f7fe f80e 	bl	8001570 <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003556:	e00b      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003558:	f7fe f80a 	bl	8001570 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	@ 0x64
 8003564:	d904      	bls.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0bb      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003570:	4b5e      	ldr	r3, [pc, #376]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800357c:	d0ec      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800359a:	2b00      	cmp	r3, #0
 800359c:	d02e      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d12a      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035a6:	4b51      	ldr	r3, [pc, #324]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035b4:	4b4d      	ldr	r3, [pc, #308]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	0f1b      	lsrs	r3, r3, #28
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	019a      	lsls	r2, r3, #6
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	431a      	orrs	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	071b      	lsls	r3, r3, #28
 80035da:	4944      	ldr	r1, [pc, #272]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035e2:	4b42      	ldr	r3, [pc, #264]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	493d      	ldr	r1, [pc, #244]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d022      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800360c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003610:	d11d      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003612:	4b36      	ldr	r3, [pc, #216]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003618:	0e1b      	lsrs	r3, r3, #24
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003620:	4b32      	ldr	r3, [pc, #200]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	0f1b      	lsrs	r3, r3, #28
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	019a      	lsls	r2, r3, #6
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	061b      	lsls	r3, r3, #24
 8003640:	431a      	orrs	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	071b      	lsls	r3, r3, #28
 8003646:	4929      	ldr	r1, [pc, #164]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800365a:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003660:	0e1b      	lsrs	r3, r3, #24
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003668:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	019a      	lsls	r2, r3, #6
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	431a      	orrs	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	071b      	lsls	r3, r3, #28
 800368e:	4917      	ldr	r1, [pc, #92]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003696:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003698:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800369c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4911      	ldr	r1, [pc, #68]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0e      	ldr	r2, [pc, #56]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd ff5a 	bl	8001570 <HAL_GetTick>
 80036bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036c0:	f7fd ff56 	bl	8001570 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	@ 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e007      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036de:	d1ef      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e040      	b.n	8003784 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fcbe 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	@ 0x24
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fa8c 	bl	8003c54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f825 	bl	800378c <UART_SetConfig>
 8003742:	4603      	mov	r3, r0
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e01b      	b.n	8003784 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800375a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800376a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fb0b 	bl	8003d98 <UART_CheckIdleState>
 8003782:	4603      	mov	r3, r0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4ba6      	ldr	r3, [pc, #664]	@ (8003a50 <UART_SetConfig+0x2c4>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a94      	ldr	r2, [pc, #592]	@ (8003a54 <UART_SetConfig+0x2c8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d120      	bne.n	800384a <UART_SetConfig+0xbe>
 8003808:	4b93      	ldr	r3, [pc, #588]	@ (8003a58 <UART_SetConfig+0x2cc>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d816      	bhi.n	8003844 <UART_SetConfig+0xb8>
 8003816:	a201      	add	r2, pc, #4	@ (adr r2, 800381c <UART_SetConfig+0x90>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	0800382d 	.word	0x0800382d
 8003820:	08003839 	.word	0x08003839
 8003824:	08003833 	.word	0x08003833
 8003828:	0800383f 	.word	0x0800383f
 800382c:	2301      	movs	r3, #1
 800382e:	77fb      	strb	r3, [r7, #31]
 8003830:	e150      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003832:	2302      	movs	r3, #2
 8003834:	77fb      	strb	r3, [r7, #31]
 8003836:	e14d      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003838:	2304      	movs	r3, #4
 800383a:	77fb      	strb	r3, [r7, #31]
 800383c:	e14a      	b.n	8003ad4 <UART_SetConfig+0x348>
 800383e:	2308      	movs	r3, #8
 8003840:	77fb      	strb	r3, [r7, #31]
 8003842:	e147      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003844:	2310      	movs	r3, #16
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e144      	b.n	8003ad4 <UART_SetConfig+0x348>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a83      	ldr	r2, [pc, #524]	@ (8003a5c <UART_SetConfig+0x2d0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d132      	bne.n	80038ba <UART_SetConfig+0x12e>
 8003854:	4b80      	ldr	r3, [pc, #512]	@ (8003a58 <UART_SetConfig+0x2cc>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d828      	bhi.n	80038b4 <UART_SetConfig+0x128>
 8003862:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <UART_SetConfig+0xdc>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	0800389d 	.word	0x0800389d
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038b5 	.word	0x080038b5
 8003874:	080038b5 	.word	0x080038b5
 8003878:	080038a9 	.word	0x080038a9
 800387c:	080038b5 	.word	0x080038b5
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080038b5 	.word	0x080038b5
 8003888:	080038a3 	.word	0x080038a3
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038b5 	.word	0x080038b5
 8003894:	080038b5 	.word	0x080038b5
 8003898:	080038af 	.word	0x080038af
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e118      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038a2:	2302      	movs	r3, #2
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e115      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038a8:	2304      	movs	r3, #4
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e112      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038ae:	2308      	movs	r3, #8
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e10f      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e10c      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a68      	ldr	r2, [pc, #416]	@ (8003a60 <UART_SetConfig+0x2d4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d120      	bne.n	8003906 <UART_SetConfig+0x17a>
 80038c4:	4b64      	ldr	r3, [pc, #400]	@ (8003a58 <UART_SetConfig+0x2cc>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038ce:	2b30      	cmp	r3, #48	@ 0x30
 80038d0:	d013      	beq.n	80038fa <UART_SetConfig+0x16e>
 80038d2:	2b30      	cmp	r3, #48	@ 0x30
 80038d4:	d814      	bhi.n	8003900 <UART_SetConfig+0x174>
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d009      	beq.n	80038ee <UART_SetConfig+0x162>
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d810      	bhi.n	8003900 <UART_SetConfig+0x174>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <UART_SetConfig+0x15c>
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d006      	beq.n	80038f4 <UART_SetConfig+0x168>
 80038e6:	e00b      	b.n	8003900 <UART_SetConfig+0x174>
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e0f2      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038ee:	2302      	movs	r3, #2
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e0ef      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e0ec      	b.n	8003ad4 <UART_SetConfig+0x348>
 80038fa:	2308      	movs	r3, #8
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e0e9      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003900:	2310      	movs	r3, #16
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e0e6      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a56      	ldr	r2, [pc, #344]	@ (8003a64 <UART_SetConfig+0x2d8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d120      	bne.n	8003952 <UART_SetConfig+0x1c6>
 8003910:	4b51      	ldr	r3, [pc, #324]	@ (8003a58 <UART_SetConfig+0x2cc>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003916:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800391a:	2bc0      	cmp	r3, #192	@ 0xc0
 800391c:	d013      	beq.n	8003946 <UART_SetConfig+0x1ba>
 800391e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003920:	d814      	bhi.n	800394c <UART_SetConfig+0x1c0>
 8003922:	2b80      	cmp	r3, #128	@ 0x80
 8003924:	d009      	beq.n	800393a <UART_SetConfig+0x1ae>
 8003926:	2b80      	cmp	r3, #128	@ 0x80
 8003928:	d810      	bhi.n	800394c <UART_SetConfig+0x1c0>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <UART_SetConfig+0x1a8>
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	d006      	beq.n	8003940 <UART_SetConfig+0x1b4>
 8003932:	e00b      	b.n	800394c <UART_SetConfig+0x1c0>
 8003934:	2300      	movs	r3, #0
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e0cc      	b.n	8003ad4 <UART_SetConfig+0x348>
 800393a:	2302      	movs	r3, #2
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e0c9      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003940:	2304      	movs	r3, #4
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e0c6      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003946:	2308      	movs	r3, #8
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e0c3      	b.n	8003ad4 <UART_SetConfig+0x348>
 800394c:	2310      	movs	r3, #16
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e0c0      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a44      	ldr	r2, [pc, #272]	@ (8003a68 <UART_SetConfig+0x2dc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d125      	bne.n	80039a8 <UART_SetConfig+0x21c>
 800395c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a58 <UART_SetConfig+0x2cc>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800396a:	d017      	beq.n	800399c <UART_SetConfig+0x210>
 800396c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003970:	d817      	bhi.n	80039a2 <UART_SetConfig+0x216>
 8003972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003976:	d00b      	beq.n	8003990 <UART_SetConfig+0x204>
 8003978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800397c:	d811      	bhi.n	80039a2 <UART_SetConfig+0x216>
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <UART_SetConfig+0x1fe>
 8003982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003986:	d006      	beq.n	8003996 <UART_SetConfig+0x20a>
 8003988:	e00b      	b.n	80039a2 <UART_SetConfig+0x216>
 800398a:	2300      	movs	r3, #0
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e0a1      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003990:	2302      	movs	r3, #2
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e09e      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003996:	2304      	movs	r3, #4
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e09b      	b.n	8003ad4 <UART_SetConfig+0x348>
 800399c:	2308      	movs	r3, #8
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e098      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039a2:	2310      	movs	r3, #16
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e095      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	@ (8003a6c <UART_SetConfig+0x2e0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d125      	bne.n	80039fe <UART_SetConfig+0x272>
 80039b2:	4b29      	ldr	r3, [pc, #164]	@ (8003a58 <UART_SetConfig+0x2cc>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039c0:	d017      	beq.n	80039f2 <UART_SetConfig+0x266>
 80039c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039c6:	d817      	bhi.n	80039f8 <UART_SetConfig+0x26c>
 80039c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039cc:	d00b      	beq.n	80039e6 <UART_SetConfig+0x25a>
 80039ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d2:	d811      	bhi.n	80039f8 <UART_SetConfig+0x26c>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <UART_SetConfig+0x254>
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039dc:	d006      	beq.n	80039ec <UART_SetConfig+0x260>
 80039de:	e00b      	b.n	80039f8 <UART_SetConfig+0x26c>
 80039e0:	2301      	movs	r3, #1
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e076      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039e6:	2302      	movs	r3, #2
 80039e8:	77fb      	strb	r3, [r7, #31]
 80039ea:	e073      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039ec:	2304      	movs	r3, #4
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e070      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039f2:	2308      	movs	r3, #8
 80039f4:	77fb      	strb	r3, [r7, #31]
 80039f6:	e06d      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039f8:	2310      	movs	r3, #16
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e06a      	b.n	8003ad4 <UART_SetConfig+0x348>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <UART_SetConfig+0x2e4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d138      	bne.n	8003a7a <UART_SetConfig+0x2ee>
 8003a08:	4b13      	ldr	r3, [pc, #76]	@ (8003a58 <UART_SetConfig+0x2cc>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a16:	d017      	beq.n	8003a48 <UART_SetConfig+0x2bc>
 8003a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a1c:	d82a      	bhi.n	8003a74 <UART_SetConfig+0x2e8>
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a22:	d00b      	beq.n	8003a3c <UART_SetConfig+0x2b0>
 8003a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a28:	d824      	bhi.n	8003a74 <UART_SetConfig+0x2e8>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <UART_SetConfig+0x2aa>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a32:	d006      	beq.n	8003a42 <UART_SetConfig+0x2b6>
 8003a34:	e01e      	b.n	8003a74 <UART_SetConfig+0x2e8>
 8003a36:	2300      	movs	r3, #0
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e04b      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e048      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003a42:	2304      	movs	r3, #4
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e045      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003a48:	2308      	movs	r3, #8
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e042      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003a4e:	bf00      	nop
 8003a50:	efff69f3 	.word	0xefff69f3
 8003a54:	40011000 	.word	0x40011000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40004400 	.word	0x40004400
 8003a60:	40004800 	.word	0x40004800
 8003a64:	40004c00 	.word	0x40004c00
 8003a68:	40005000 	.word	0x40005000
 8003a6c:	40011400 	.word	0x40011400
 8003a70:	40007800 	.word	0x40007800
 8003a74:	2310      	movs	r3, #16
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e02c      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a72      	ldr	r2, [pc, #456]	@ (8003c48 <UART_SetConfig+0x4bc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d125      	bne.n	8003ad0 <UART_SetConfig+0x344>
 8003a84:	4b71      	ldr	r3, [pc, #452]	@ (8003c4c <UART_SetConfig+0x4c0>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a92:	d017      	beq.n	8003ac4 <UART_SetConfig+0x338>
 8003a94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a98:	d817      	bhi.n	8003aca <UART_SetConfig+0x33e>
 8003a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a9e:	d00b      	beq.n	8003ab8 <UART_SetConfig+0x32c>
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa4:	d811      	bhi.n	8003aca <UART_SetConfig+0x33e>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <UART_SetConfig+0x326>
 8003aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aae:	d006      	beq.n	8003abe <UART_SetConfig+0x332>
 8003ab0:	e00b      	b.n	8003aca <UART_SetConfig+0x33e>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	77fb      	strb	r3, [r7, #31]
 8003ab6:	e00d      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	77fb      	strb	r3, [r7, #31]
 8003abc:	e00a      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003abe:	2304      	movs	r3, #4
 8003ac0:	77fb      	strb	r3, [r7, #31]
 8003ac2:	e007      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e004      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003aca:	2310      	movs	r3, #16
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e001      	b.n	8003ad4 <UART_SetConfig+0x348>
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003adc:	d15b      	bne.n	8003b96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003ade:	7ffb      	ldrb	r3, [r7, #31]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d828      	bhi.n	8003b36 <UART_SetConfig+0x3aa>
 8003ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8003aec <UART_SetConfig+0x360>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
 8003b0c:	08003b2f 	.word	0x08003b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7ff f99e 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e013      	b.n	8003b40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7ff f9ae 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	61b8      	str	r0, [r7, #24]
        break;
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b20:	4b4b      	ldr	r3, [pc, #300]	@ (8003c50 <UART_SetConfig+0x4c4>)
 8003b22:	61bb      	str	r3, [r7, #24]
        break;
 8003b24:	e00c      	b.n	8003b40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b26:	f7ff f881 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8003b2a:	61b8      	str	r0, [r7, #24]
        break;
 8003b2c:	e008      	b.n	8003b40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b32:	61bb      	str	r3, [r7, #24]
        break;
 8003b34:	e004      	b.n	8003b40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d074      	beq.n	8003c30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	d916      	bls.n	8003b90 <UART_SetConfig+0x404>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b68:	d212      	bcs.n	8003b90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	f023 030f 	bic.w	r3, r3, #15
 8003b72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	89fa      	ldrh	r2, [r7, #14]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	e04f      	b.n	8003c30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	77bb      	strb	r3, [r7, #30]
 8003b94:	e04c      	b.n	8003c30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d828      	bhi.n	8003bee <UART_SetConfig+0x462>
 8003b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <UART_SetConfig+0x418>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7ff f942 	bl	8002e50 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61b8      	str	r0, [r7, #24]
        break;
 8003bce:	e013      	b.n	8003bf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7ff f952 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61b8      	str	r0, [r7, #24]
        break;
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <UART_SetConfig+0x4c4>)
 8003bda:	61bb      	str	r3, [r7, #24]
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7ff f825 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8003be2:	61b8      	str	r0, [r7, #24]
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bea:	61bb      	str	r3, [r7, #24]
        break;
 8003bec:	e004      	b.n	8003bf8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bf6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d018      	beq.n	8003c30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085a      	lsrs	r2, r3, #1
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d909      	bls.n	8003c2c <UART_SetConfig+0x4a0>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d205      	bcs.n	8003c2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e001      	b.n	8003c30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40007c00 	.word	0x40007c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	00f42400 	.word	0x00f42400

08003c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d52:	d10a      	bne.n	8003d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b098      	sub	sp, #96	@ 0x60
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003da8:	f7fd fbe2 	bl	8001570 <HAL_GetTick>
 8003dac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d12e      	bne.n	8003e1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f88c 	bl	8003ee8 <UART_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d021      	beq.n	8003e1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dde:	e853 3f00 	ldrex	r3, [r3]
 8003de2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	461a      	mov	r2, r3
 8003df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e6      	bne.n	8003dd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e062      	b.n	8003ee0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d149      	bne.n	8003ebc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f856 	bl	8003ee8 <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03c      	beq.n	8003ebc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e6      	bne.n	8003e42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e94:	61fa      	str	r2, [r7, #28]
 8003e96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	69b9      	ldr	r1, [r7, #24]
 8003e9a:	69fa      	ldr	r2, [r7, #28]
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e5      	bne.n	8003e74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e011      	b.n	8003ee0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3758      	adds	r7, #88	@ 0x58
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef8:	e04f      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d04b      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fd fb35 	bl	8001570 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e04e      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d037      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b80      	cmp	r3, #128	@ 0x80
 8003f2e:	d034      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d031      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d110      	bne.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f838 	bl	8003fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2208      	movs	r2, #8
 8003f56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e029      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f74:	d111      	bne.n	8003f9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f81e 	bl	8003fc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00f      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d0a0      	beq.n	8003efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b095      	sub	sp, #84	@ 0x54
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e6      	bne.n	8003fca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	61fb      	str	r3, [r7, #28]
   return(result);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800401c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800401e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004024:	e841 2300 	strex	r3, r2, [r1]
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1e5      	bne.n	8003ffc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004034:	2b01      	cmp	r3, #1
 8004036:	d118      	bne.n	800406a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	60bb      	str	r3, [r7, #8]
   return(result);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f023 0310 	bic.w	r3, r3, #16
 800404c:	647b      	str	r3, [r7, #68]	@ 0x44
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	613b      	str	r3, [r7, #16]
   return(result);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e6      	bne.n	8004038 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800407e:	bf00      	nop
 8004080:	3754      	adds	r7, #84	@ 0x54
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
	...

0800408c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800408c:	b084      	sub	sp, #16
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	f107 001c 	add.w	r0, r7, #28
 800409a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800409e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d121      	bne.n	80040ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	4b21      	ldr	r3, [pc, #132]	@ (800413c <USB_CoreInit+0xb0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fa92 	bl	8004608 <USB_CoreReset>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e010      	b.n	800410c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa86 	bl	8004608 <USB_CoreReset>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004104:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800410c:	7fbb      	ldrb	r3, [r7, #30]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d10b      	bne.n	800412a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f043 0206 	orr.w	r2, r3, #6
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004136:	b004      	add	sp, #16
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	ffbdffbf 	.word	0xffbdffbf

08004140 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 0201 	bic.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d115      	bne.n	80041b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004190:	200a      	movs	r0, #10
 8004192:	f7fd f9f9 	bl	8001588 <HAL_Delay>
      ms += 10U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	330a      	adds	r3, #10
 800419a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa25 	bl	80045ec <USB_GetMode>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d01e      	beq.n	80041e6 <USB_SetCurrentMode+0x84>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80041ac:	d9f0      	bls.n	8004190 <USB_SetCurrentMode+0x2e>
 80041ae:	e01a      	b.n	80041e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041c2:	200a      	movs	r0, #10
 80041c4:	f7fd f9e0 	bl	8001588 <HAL_Delay>
      ms += 10U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	330a      	adds	r3, #10
 80041cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fa0c 	bl	80045ec <USB_GetMode>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d005      	beq.n	80041e6 <USB_SetCurrentMode+0x84>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80041de:	d9f0      	bls.n	80041c2 <USB_SetCurrentMode+0x60>
 80041e0:	e001      	b.n	80041e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e005      	b.n	80041f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80041ea:	d101      	bne.n	80041f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041fc:	b084      	sub	sp, #16
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800420a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e009      	b.n	8004230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3340      	adds	r3, #64	@ 0x40
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	2200      	movs	r2, #0
 8004228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	3301      	adds	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b0e      	cmp	r3, #14
 8004234:	d9f2      	bls.n	800421c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11c      	bne.n	8004278 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800424c:	f043 0302 	orr.w	r3, r3, #2
 8004250:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004256:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e005      	b.n	8004284 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800428a:	461a      	mov	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004290:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10d      	bne.n	80042b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042a0:	2100      	movs	r1, #0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f968 	bl	8004578 <USB_SetDevSpeed>
 80042a8:	e008      	b.n	80042bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042aa:	2101      	movs	r1, #1
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f963 	bl	8004578 <USB_SetDevSpeed>
 80042b2:	e003      	b.n	80042bc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042b4:	2103      	movs	r1, #3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f95e 	bl	8004578 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042bc:	2110      	movs	r1, #16
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f8fa 	bl	80044b8 <USB_FlushTxFifo>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f924 	bl	800451c <USB_FlushRxFifo>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042f0:	461a      	mov	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042fc:	461a      	mov	r2, r3
 80042fe:	2300      	movs	r3, #0
 8004300:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	e043      	b.n	8004390 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800431a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800431e:	d118      	bne.n	8004352 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10a      	bne.n	800433c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004332:	461a      	mov	r2, r3
 8004334:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	e013      	b.n	8004364 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800434e:	6013      	str	r3, [r2, #0]
 8004350:	e008      	b.n	8004364 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800435e:	461a      	mov	r2, r3
 8004360:	2300      	movs	r3, #0
 8004362:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004370:	461a      	mov	r2, r3
 8004372:	2300      	movs	r3, #0
 8004374:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004382:	461a      	mov	r2, r3
 8004384:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004388:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3301      	adds	r3, #1
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004394:	461a      	mov	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4293      	cmp	r3, r2
 800439a:	d3b5      	bcc.n	8004308 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	e043      	b.n	800442a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043b8:	d118      	bne.n	80043ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e013      	b.n	80043fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e2:	461a      	mov	r2, r3
 80043e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e008      	b.n	80043fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	2300      	movs	r3, #0
 800440e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004422:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	3301      	adds	r3, #1
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800442e:	461a      	mov	r2, r3
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4293      	cmp	r3, r2
 8004434:	d3b5      	bcc.n	80043a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004448:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004456:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004458:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f043 0210 	orr.w	r2, r3, #16
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699a      	ldr	r2, [r3, #24]
 8004470:	4b0f      	ldr	r3, [pc, #60]	@ (80044b0 <USB_DevInit+0x2b4>)
 8004472:	4313      	orrs	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004478:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f043 0208 	orr.w	r2, r3, #8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800448c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004490:	2b01      	cmp	r3, #1
 8004492:	d105      	bne.n	80044a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <USB_DevInit+0x2b8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ac:	b004      	add	sp, #16
 80044ae:	4770      	bx	lr
 80044b0:	803c3800 	.word	0x803c3800
 80044b4:	40000004 	.word	0x40000004

080044b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044d2:	d901      	bls.n	80044d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e01b      	b.n	8004510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	daf2      	bge.n	80044c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	019b      	lsls	r3, r3, #6
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3301      	adds	r3, #1
 80044f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044fc:	d901      	bls.n	8004502 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e006      	b.n	8004510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d0f0      	beq.n	80044f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3301      	adds	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004534:	d901      	bls.n	800453a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e018      	b.n	800456c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	daf2      	bge.n	8004528 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2210      	movs	r2, #16
 800454a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	3301      	adds	r3, #1
 8004550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004558:	d901      	bls.n	800455e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e006      	b.n	800456c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d0f0      	beq.n	800454c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004598:	4313      	orrs	r3, r2
 800459a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80045c4:	f023 0303 	bic.w	r3, r3, #3
 80045c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0301 	and.w	r3, r3, #1
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004620:	d901      	bls.n	8004626 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e01b      	b.n	800465e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	daf2      	bge.n	8004614 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f043 0201 	orr.w	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800464a:	d901      	bls.n	8004650 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d0f0      	beq.n	800463e <USB_CoreReset+0x36>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <memset>:
 800466a:	4402      	add	r2, r0
 800466c:	4603      	mov	r3, r0
 800466e:	4293      	cmp	r3, r2
 8004670:	d100      	bne.n	8004674 <memset+0xa>
 8004672:	4770      	bx	lr
 8004674:	f803 1b01 	strb.w	r1, [r3], #1
 8004678:	e7f9      	b.n	800466e <memset+0x4>
	...

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4d0d      	ldr	r5, [pc, #52]	@ (80046b4 <__libc_init_array+0x38>)
 8004680:	4c0d      	ldr	r4, [pc, #52]	@ (80046b8 <__libc_init_array+0x3c>)
 8004682:	1b64      	subs	r4, r4, r5
 8004684:	10a4      	asrs	r4, r4, #2
 8004686:	2600      	movs	r6, #0
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	4d0b      	ldr	r5, [pc, #44]	@ (80046bc <__libc_init_array+0x40>)
 800468e:	4c0c      	ldr	r4, [pc, #48]	@ (80046c0 <__libc_init_array+0x44>)
 8004690:	f000 f818 	bl	80046c4 <_init>
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	2600      	movs	r6, #0
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	080046fc 	.word	0x080046fc
 80046b8:	080046fc 	.word	0x080046fc
 80046bc:	080046fc 	.word	0x080046fc
 80046c0:	08004700 	.word	0x08004700

080046c4 <_init>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr

080046d0 <_fini>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	bf00      	nop
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr
